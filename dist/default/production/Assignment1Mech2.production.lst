

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Mon Apr 11 22:15:22 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	inittext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	intentry,global,class=CODE,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	dabs	1,0x7E,2
    50  0000                     	;# 
    51  0001                     	;# 
    52  0002                     	;# 
    53  0003                     	;# 
    54  0004                     	;# 
    55  0005                     	;# 
    56  0006                     	;# 
    57  0007                     	;# 
    58  0008                     	;# 
    59  0009                     	;# 
    60  000A                     	;# 
    61  000B                     	;# 
    62  000C                     	;# 
    63  000D                     	;# 
    64  000E                     	;# 
    65  000E                     	;# 
    66  000F                     	;# 
    67  0010                     	;# 
    68  0011                     	;# 
    69  0012                     	;# 
    70  0013                     	;# 
    71  0014                     	;# 
    72  0015                     	;# 
    73  0015                     	;# 
    74  0016                     	;# 
    75  0017                     	;# 
    76  0018                     	;# 
    77  0019                     	;# 
    78  001A                     	;# 
    79  001B                     	;# 
    80  001B                     	;# 
    81  001C                     	;# 
    82  001D                     	;# 
    83  001E                     	;# 
    84  001F                     	;# 
    85  0081                     	;# 
    86  0085                     	;# 
    87  0086                     	;# 
    88  0087                     	;# 
    89  0088                     	;# 
    90  0089                     	;# 
    91  008C                     	;# 
    92  008D                     	;# 
    93  008E                     	;# 
    94  0091                     	;# 
    95  0092                     	;# 
    96  0093                     	;# 
    97  0094                     	;# 
    98  0098                     	;# 
    99  0099                     	;# 
   100  009C                     	;# 
   101  009D                     	;# 
   102  009E                     	;# 
   103  009F                     	;# 
   104  010C                     	;# 
   105  010D                     	;# 
   106  010E                     	;# 
   107  010F                     	;# 
   108  018C                     	;# 
   109  018D                     	;# 
   110  0000                     	;# 
   111  0001                     	;# 
   112  0002                     	;# 
   113  0003                     	;# 
   114  0004                     	;# 
   115  0005                     	;# 
   116  0006                     	;# 
   117  0007                     	;# 
   118  0008                     	;# 
   119  0009                     	;# 
   120  000A                     	;# 
   121  000B                     	;# 
   122  000C                     	;# 
   123  000D                     	;# 
   124  000E                     	;# 
   125  000E                     	;# 
   126  000F                     	;# 
   127  0010                     	;# 
   128  0011                     	;# 
   129  0012                     	;# 
   130  0013                     	;# 
   131  0014                     	;# 
   132  0015                     	;# 
   133  0015                     	;# 
   134  0016                     	;# 
   135  0017                     	;# 
   136  0018                     	;# 
   137  0019                     	;# 
   138  001A                     	;# 
   139  001B                     	;# 
   140  001B                     	;# 
   141  001C                     	;# 
   142  001D                     	;# 
   143  001E                     	;# 
   144  001F                     	;# 
   145  0081                     	;# 
   146  0085                     	;# 
   147  0086                     	;# 
   148  0087                     	;# 
   149  0088                     	;# 
   150  0089                     	;# 
   151  008C                     	;# 
   152  008D                     	;# 
   153  008E                     	;# 
   154  0091                     	;# 
   155  0092                     	;# 
   156  0093                     	;# 
   157  0094                     	;# 
   158  0098                     	;# 
   159  0099                     	;# 
   160  009C                     	;# 
   161  009D                     	;# 
   162  009E                     	;# 
   163  009F                     	;# 
   164  010C                     	;# 
   165  010D                     	;# 
   166  010E                     	;# 
   167  010F                     	;# 
   168  018C                     	;# 
   169  018D                     	;# 
   170  0000                     	;# 
   171  0001                     	;# 
   172  0002                     	;# 
   173  0003                     	;# 
   174  0004                     	;# 
   175  0005                     	;# 
   176  0006                     	;# 
   177  0007                     	;# 
   178  0008                     	;# 
   179  0009                     	;# 
   180  000A                     	;# 
   181  000B                     	;# 
   182  000C                     	;# 
   183  000D                     	;# 
   184  000E                     	;# 
   185  000E                     	;# 
   186  000F                     	;# 
   187  0010                     	;# 
   188  0011                     	;# 
   189  0012                     	;# 
   190  0013                     	;# 
   191  0014                     	;# 
   192  0015                     	;# 
   193  0015                     	;# 
   194  0016                     	;# 
   195  0017                     	;# 
   196  0018                     	;# 
   197  0019                     	;# 
   198  001A                     	;# 
   199  001B                     	;# 
   200  001B                     	;# 
   201  001C                     	;# 
   202  001D                     	;# 
   203  001E                     	;# 
   204  001F                     	;# 
   205  0081                     	;# 
   206  0085                     	;# 
   207  0086                     	;# 
   208  0087                     	;# 
   209  0088                     	;# 
   210  0089                     	;# 
   211  008C                     	;# 
   212  008D                     	;# 
   213  008E                     	;# 
   214  0091                     	;# 
   215  0092                     	;# 
   216  0093                     	;# 
   217  0094                     	;# 
   218  0098                     	;# 
   219  0099                     	;# 
   220  009C                     	;# 
   221  009D                     	;# 
   222  009E                     	;# 
   223  009F                     	;# 
   224  010C                     	;# 
   225  010D                     	;# 
   226  010E                     	;# 
   227  010F                     	;# 
   228  018C                     	;# 
   229  018D                     	;# 
   230  0000                     	;# 
   231  0001                     	;# 
   232  0002                     	;# 
   233  0003                     	;# 
   234  0004                     	;# 
   235  0005                     	;# 
   236  0006                     	;# 
   237  0007                     	;# 
   238  0008                     	;# 
   239  0009                     	;# 
   240  000A                     	;# 
   241  000B                     	;# 
   242  000C                     	;# 
   243  000D                     	;# 
   244  000E                     	;# 
   245  000E                     	;# 
   246  000F                     	;# 
   247  0010                     	;# 
   248  0011                     	;# 
   249  0012                     	;# 
   250  0013                     	;# 
   251  0014                     	;# 
   252  0015                     	;# 
   253  0015                     	;# 
   254  0016                     	;# 
   255  0017                     	;# 
   256  0018                     	;# 
   257  0019                     	;# 
   258  001A                     	;# 
   259  001B                     	;# 
   260  001B                     	;# 
   261  001C                     	;# 
   262  001D                     	;# 
   263  001E                     	;# 
   264  001F                     	;# 
   265  0081                     	;# 
   266  0085                     	;# 
   267  0086                     	;# 
   268  0087                     	;# 
   269  0088                     	;# 
   270  0089                     	;# 
   271  008C                     	;# 
   272  008D                     	;# 
   273  008E                     	;# 
   274  0091                     	;# 
   275  0092                     	;# 
   276  0093                     	;# 
   277  0094                     	;# 
   278  0098                     	;# 
   279  0099                     	;# 
   280  009C                     	;# 
   281  009D                     	;# 
   282  009E                     	;# 
   283  009F                     	;# 
   284  010C                     	;# 
   285  010D                     	;# 
   286  010E                     	;# 
   287  010F                     	;# 
   288  018C                     	;# 
   289  018D                     	;# 
   290  0000                     	;# 
   291  0001                     	;# 
   292  0002                     	;# 
   293  0003                     	;# 
   294  0004                     	;# 
   295  0005                     	;# 
   296  0006                     	;# 
   297  0007                     	;# 
   298  0008                     	;# 
   299  0009                     	;# 
   300  000A                     	;# 
   301  000B                     	;# 
   302  000C                     	;# 
   303  000D                     	;# 
   304  000E                     	;# 
   305  000E                     	;# 
   306  000F                     	;# 
   307  0010                     	;# 
   308  0011                     	;# 
   309  0012                     	;# 
   310  0013                     	;# 
   311  0014                     	;# 
   312  0015                     	;# 
   313  0015                     	;# 
   314  0016                     	;# 
   315  0017                     	;# 
   316  0018                     	;# 
   317  0019                     	;# 
   318  001A                     	;# 
   319  001B                     	;# 
   320  001B                     	;# 
   321  001C                     	;# 
   322  001D                     	;# 
   323  001E                     	;# 
   324  001F                     	;# 
   325  0081                     	;# 
   326  0085                     	;# 
   327  0086                     	;# 
   328  0087                     	;# 
   329  0088                     	;# 
   330  0089                     	;# 
   331  008C                     	;# 
   332  008D                     	;# 
   333  008E                     	;# 
   334  0091                     	;# 
   335  0092                     	;# 
   336  0093                     	;# 
   337  0094                     	;# 
   338  0098                     	;# 
   339  0099                     	;# 
   340  009C                     	;# 
   341  009D                     	;# 
   342  009E                     	;# 
   343  009F                     	;# 
   344  010C                     	;# 
   345  010D                     	;# 
   346  010E                     	;# 
   347  010F                     	;# 
   348  018C                     	;# 
   349  018D                     	;# 
   350                           
   351                           	psect	idataBANK1
   352  0D59                     __pidataBANK1:	
   353                           
   354                           ;initializer for _halfSteps
   355  0D59  343C               	retlw	60
   356  0D5A  3400               	retlw	0
   357  0D5B  342E               	retlw	46
   358  0D5C  3400               	retlw	0
   359  0D5D  342B               	retlw	43
   360  0D5E  3400               	retlw	0
   361  0D5F  3427               	retlw	39
   362  0D60  3400               	retlw	0
   363  0D61  3435               	retlw	53
   364  0D62  3400               	retlw	0
   365  0D63  3417               	retlw	23
   366  0D64  3400               	retlw	0
   367  0D65  341B               	retlw	27
   368  0D66  3400               	retlw	0
   369  0D67  341E               	retlw	30
   370  0D68  3400               	retlw	0
   371                           
   372                           ;initializer for _wholeSteps
   373  0D69  343C               	retlw	60
   374  0D6A  3400               	retlw	0
   375  0D6B  342B               	retlw	43
   376  0D6C  3400               	retlw	0
   377  0D6D  3435               	retlw	53
   378  0D6E  3400               	retlw	0
   379  0D6F  341B               	retlw	27
   380  0D70  3400               	retlw	0
   381  001F                     _ADCON0	set	31
   382  001E                     _ADRESH	set	30
   383  0007                     _PORTC	set	7
   384  0008                     _PORTD	set	8
   385  0009                     _PORTE	set	9
   386  0001                     _TMR0	set	1
   387  0066                     _ADIF	set	102
   388  005F                     _GIE	set	95
   389  00FA                     _GO	set	250
   390  005E                     _PEIE	set	94
   391  0030                     _RB0	set	48
   392  0031                     _RB1	set	49
   393  0032                     _RB2	set	50
   394  0033                     _RB3	set	51
   395  0034                     _RB4	set	52
   396  0035                     _RB5	set	53
   397  0048                     _RE0	set	72
   398  0049                     _RE1	set	73
   399  004A                     _RE2	set	74
   400  005A                     _T0IF	set	90
   401  005D                     _TMR0IE	set	93
   402  009E                     _ADRESL	set	158
   403  0085                     _TRISA	set	133
   404  0086                     _TRISB	set	134
   405  0087                     _TRISC	set	135
   406  0088                     _TRISD	set	136
   407  0089                     _TRISE	set	137
   408  04FE                     _ADCS2	set	1278
   409  04FF                     _ADFM	set	1279
   410  0466                     _ADIE	set	1126
   411  04F8                     _PCFG0	set	1272
   412  04F9                     _PCFG1	set	1273
   413  04FA                     _PCFG2	set	1274
   414  04FB                     _PCFG3	set	1275
   415  0408                     _PS0	set	1032
   416  0409                     _PS1	set	1033
   417  040A                     _PS2	set	1034
   418  040B                     _PSA	set	1035
   419  040D                     _T0CS	set	1037
   420  040C                     _T0SE	set	1036
   421                           
   422                           	psect	strings
   423  0800                     __pstrings:	
   424  0800                     stringtab:	
   425  0800                     __stringtab:	
   426  0800                     stringcode:	
   427                           ;	String table - string pointers are 1 byte each
   428                           
   429  0800                     stringdir:	
   430  0800  3008               	movlw	high stringdir
   431  0801  008A               	movwf	10
   432  0802  0804               	movf	4,w
   433  0803  0A84               	incf	4,f
   434  0804  0782               	addwf	2,f
   435  0805                     __stringbase:	
   436  0805  3400               	retlw	0
   437  0806                     __end_of__stringtab:	
   438  0806                     STR_4:	
   439  0806  3453               	retlw	83	;'S'
   440  0807  3474               	retlw	116	;'t'
   441  0808  3465               	retlw	101	;'e'
   442  0809  3470               	retlw	112	;'p'
   443  080A  3473               	retlw	115	;'s'
   444  080B  343A               	retlw	58	;':'
   445  080C  3400               	retlw	0
   446  080D                     STR_5:	
   447  080D  3473               	retlw	115	;'s'
   448  080E  3474               	retlw	116	;'t'
   449  080F  3465               	retlw	101	;'e'
   450  0810  3470               	retlw	112	;'p'
   451  0811  3473               	retlw	115	;'s'
   452  0812  343A               	retlw	58	;':'
   453  0813  3400               	retlw	0
   454  0814                     STR_1:	
   455  0814  3452               	retlw	82	;'R'
   456  0815  3461               	retlw	97	;'a'
   457  0816  3477               	retlw	119	;'w'
   458  0817  343A               	retlw	58	;':'
   459  0818  3400               	retlw	0
   460  0819                     STR_2:	
   461  0819  343D               	retlw	61	;'='
   462  081A  343E               	retlw	62	;'>'
   463  081B  3400               	retlw	0
   464  081C                     STR_3:	
   465  081C  3463               	retlw	99	;'c'
   466  081D  346D               	retlw	109	;'m'
   467  081E  3400               	retlw	0
   468                           
   469                           ; #config settings
   470  0000                     
   471                           	psect	cinit
   472  0015                     start_initialization:	
   473  0015                     __initialization:	
   474                           
   475                           ; Clear objects allocated to BITCOMMON
   476  0015  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   477  0016  01F1               	clrf	((__pbitbssCOMMON/(0+8)+1))& (0+127)
   478                           
   479                           ; Clear objects allocated to COMMON
   480  0017  01F7               	clrf	__pbssCOMMON& (0+127)
   481  0018  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   482  0019  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   483                           
   484                           ; Clear objects allocated to BANK1
   485  001A  1683               	bsf	3,5	;RP0=1, select bank1
   486  001B  1303               	bcf	3,6	;RP1=0, select bank1
   487  001C  01D1               	clrf	__pbssBANK1& (0+127)
   488  001D  01D2               	clrf	(__pbssBANK1+1)& (0+127)
   489  001E  01D3               	clrf	(__pbssBANK1+2)& (0+127)
   490  001F  01D4               	clrf	(__pbssBANK1+3)& (0+127)
   491  0020  01D5               	clrf	(__pbssBANK1+4)& (0+127)
   492  0021  01D6               	clrf	(__pbssBANK1+5)& (0+127)
   493  0022  01D7               	clrf	(__pbssBANK1+6)& (0+127)
   494  0023  01D8               	clrf	(__pbssBANK1+7)& (0+127)
   495  0024  01D9               	clrf	(__pbssBANK1+8)& (0+127)
   496                           
   497                           ; Initialize objects allocated to BANK1
   498  0025  1383               	bcf	3,7	;select IRP bank0
   499  0026  30D1               	movlw	low (__pdataBANK1+24)
   500  0027  00FD               	movwf	btemp+-1
   501  0028  300D               	movlw	high __pidataBANK1
   502  0029  00FE               	movwf	btemp
   503  002A  3059               	movlw	low __pidataBANK1
   504  002B  00FF               	movwf	btemp+1
   505  002C  30B9               	movlw	low __pdataBANK1
   506  002D  0084               	movwf	4
   507  002E  120A  158A  24F8   	fcall	init_ram0
   508  0031                     end_of_initialization:	
   509                           ;End of C runtime variable initialization code
   510                           
   511  0031                     __end_of__initialization:	
   512  0031  0183               	clrf	3
   513  0032  120A  118A  2B27   	ljmp	_main	;jump to C main() function
   514                           
   515                           	psect	bitbssCOMMON
   516  0380                     __pbitbssCOMMON:	
   517  0380                     _conversionDone:	
   518  0380                     	ds	1
   519  0381                     _motorToggle:	
   520  0381                     	ds	1
   521  0382                     _pb0Pressed:	
   522  0382                     	ds	1
   523  0383                     _pb0Released:	
   524  0383                     	ds	1
   525  0384                     _pb1Pressed:	
   526  0384                     	ds	1
   527  0385                     _pb1Released:	
   528  0385                     	ds	1
   529  0386                     _pb2Pressed:	
   530  0386                     	ds	1
   531  0387                     _pb2Released:	
   532  0387                     	ds	1
   533  0388                     _pb3Pressed:	
   534  0388                     	ds	1
   535  0389                     _pb3Released:	
   536  0389                     	ds	1
   537  038A                     _updateLcdIRData:	
   538  038A                     	ds	1
   539                           
   540                           	psect	bssCOMMON
   541  0077                     __pbssCOMMON:	
   542  0077                     _cstep:	
   543  0077                     	ds	1
   544  0078                     _pbCounter:	
   545  0078                     	ds	1
   546  0079                     _pbCounter2:	
   547  0079                     	ds	1
   548                           
   549                           	psect	bssBANK1
   550  00D1                     __pbssBANK1:	
   551  00D1                     _errno:	
   552  00D1                     	ds	2
   553  00D3                     _nrOfSteps:	
   554  00D3                     	ds	2
   555  00D5                     _rtcCounter:	
   556  00D5                     	ds	2
   557  00D7                     _irLcdCounter:	
   558  00D7                     	ds	1
   559  00D8                     _pbCounter3:	
   560  00D8                     	ds	1
   561  00D9                     _pbCounter4:	
   562  00D9                     	ds	1
   563                           
   564                           	psect	dataBANK1
   565  00B9                     __pdataBANK1:	
   566  00B9                     _halfSteps:	
   567  00B9                     	ds	16
   568  00C9                     _wholeSteps:	
   569  00C9                     	ds	8
   570                           
   571                           	psect	inittext
   572  0CF4                     init_fetch0:	
   573                           ;	Called with low address in FSR and high address in W
   574                           
   575  0CF4  087E               	movf	126,w
   576  0CF5  008A               	movwf	10
   577  0CF6  087F               	movf	127,w
   578  0CF7  0082               	movwf	2
   579  0CF8                     init_ram0:	
   580                           ;Called with:
   581                           ;	high address of idata address in btemp 
   582                           ;	low address of idata address in btemp+1 
   583                           ;	low address of data in FSR
   584                           ;	high address + 1 of data in btemp-1
   585                           
   586  0CF8  24F4  120A  158A   	fcall	init_fetch0
   587  0CFB  0080               	movwf	0
   588  0CFC  0A84               	incf	4,f
   589  0CFD  0804               	movf	4,w
   590  0CFE  067D               	xorwf	125,w
   591  0CFF  1903               	btfsc	3,2
   592  0D00  3400               	retlw	0
   593  0D01  0AFF               	incf	127,f
   594  0D02  1903               	btfsc	3,2
   595  0D03  0AFE               	incf	126,f
   596  0D04  2CF8               	goto	init_ram0
   597                           
   598                           	psect	cstackBANK1
   599  00A0                     __pcstackBANK1:	
   600  00A0                     ??_moveDeg:	
   601  00A0                     readADCMeter@rawInverted:	
   602                           ; 1 bytes @ 0x0
   603                           
   604                           
   605                           ; 3 bytes @ 0x0
   606  00A0                     	ds	1
   607  00A1                     _moveDeg$686:	
   608                           
   609                           ; 3 bytes @ 0x1
   610  00A1                     	ds	2
   611  00A3                     readADCMeter@k:	
   612                           
   613                           ; 3 bytes @ 0x3
   614  00A3                     	ds	1
   615  00A4                     _moveDeg$687:	
   616                           
   617                           ; 3 bytes @ 0x4
   618  00A4                     	ds	2
   619  00A6                     readADCMeter@m:	
   620                           
   621                           ; 3 bytes @ 0x6
   622  00A6                     	ds	1
   623  00A7                     _moveDeg$688:	
   624                           
   625                           ; 3 bytes @ 0x7
   626  00A7                     	ds	2
   627  00A9                     readADCMeter@result:	
   628                           
   629                           ; 3 bytes @ 0x9
   630  00A9                     	ds	1
   631  00AA                     moveDeg@stepsToMove:	
   632                           
   633                           ; 1 bytes @ 0xA
   634  00AA                     	ds	2
   635  00AC                     _readADCMeter$689:	
   636                           
   637                           ; 3 bytes @ 0xC
   638  00AC                     	ds	3
   639  00AF                     readADCMeter@raw:	
   640                           
   641                           ; 2 bytes @ 0xF
   642  00AF                     	ds	2
   643  00B1                     readADCMeter@resultInInt:	
   644                           
   645                           ; 2 bytes @ 0x11
   646  00B1                     	ds	2
   647  00B3                     ??_main:	
   648                           
   649                           ; 1 bytes @ 0x13
   650  00B3                     	ds	2
   651  00B5                     main@result:	
   652                           
   653                           ; 2 bytes @ 0x15
   654  00B5                     	ds	2
   655  00B7                     main@resultInMeters:	
   656                           
   657                           ; 2 bytes @ 0x17
   658  00B7                     	ds	2
   659                           
   660                           	psect	cstackCOMMON
   661  0072                     __pcstackCOMMON:	
   662  0072                     ?_flashLed:	
   663  0072                     ??_flashLed:	
   664                           ; 1 bytes @ 0x0
   665                           
   666  0072                     ?_debounceButtons:	
   667                           ; 1 bytes @ 0x0
   668                           
   669  0072                     ??_debounceButtons:	
   670                           ; 1 bytes @ 0x0
   671                           
   672  0072                     ?_lcdRefresh:	
   673                           ; 1 bytes @ 0x0
   674                           
   675  0072                     ??_lcdRefresh:	
   676                           ; 1 bytes @ 0x0
   677                           
   678  0072                     ?_initializeTimer0:	
   679                           ; 1 bytes @ 0x0
   680                           
   681  0072                     ?_initializeADC:	
   682                           ; 1 bytes @ 0x0
   683                           
   684  0072                     ?_setupLCD:	
   685                           ; 1 bytes @ 0x0
   686                           
   687  0072                     ?_startADCConversion:	
   688                           ; 1 bytes @ 0x0
   689                           
   690  0072                     ?_lcdSetCursor:	
   691                           ; 1 bytes @ 0x0
   692                           
   693  0072                     ?_lcdWriteString:	
   694                           ; 1 bytes @ 0x0
   695                           
   696  0072                     ?_isr:	
   697                           ; 1 bytes @ 0x0
   698                           
   699  0072                     ?_initialise:	
   700                           ; 1 bytes @ 0x0
   701                           
   702  0072                     ?_main:	
   703                           ; 1 bytes @ 0x0
   704                           
   705  0072                     ?_lcdWriteControl:	
   706                           ; 1 bytes @ 0x0
   707                           
   708  0072                     ?_lcdWriteData:	
   709                           ; 1 bytes @ 0x0
   710                           
   711  0072                     ?_initializeMotor:	
   712                           ; 1 bytes @ 0x0
   713                           
   714                           
   715                           ; 2 bytes @ 0x0
   716  0072                     	ds	1
   717  0073                     ??_isr:	
   718                           
   719                           ; 1 bytes @ 0x1
   720  0073                     	ds	4
   721                           
   722                           	psect	cstackBANK0
   723  0020                     __pcstackBANK0:	
   724  0020                     ?___ftge:	
   725  0020                     ??_initializeTimer0:	
   726                           ; 1 bit 
   727                           
   728  0020                     ??_initializeADC:	
   729                           ; 1 bytes @ 0x0
   730                           
   731  0020                     ??_startADCConversion:	
   732                           ; 1 bytes @ 0x0
   733                           
   734  0020                     ??_lcdWriteControl:	
   735                           ; 1 bytes @ 0x0
   736                           
   737  0020                     ??_lcdWriteData:	
   738                           ; 1 bytes @ 0x0
   739                           
   740  0020                     ?_readADCData:	
   741                           ; 1 bytes @ 0x0
   742                           
   743  0020                     ?___wmul:	
   744                           ; 2 bytes @ 0x0
   745                           
   746  0020                     ?___ftpack:	
   747                           ; 2 bytes @ 0x0
   748                           
   749  0020                     ?_frexp:	
   750                           ; 3 bytes @ 0x0
   751                           
   752  0020                     ___wmul@multiplier:	
   753                           ; 3 bytes @ 0x0
   754                           
   755  0020                     ___ftpack@arg:	
   756                           ; 2 bytes @ 0x0
   757                           
   758  0020                     ___ftge@ff1:	
   759                           ; 3 bytes @ 0x0
   760                           
   761  0020                     frexp@value:	
   762                           ; 3 bytes @ 0x0
   763                           
   764                           
   765                           ; 3 bytes @ 0x0
   766  0020                     	ds	2
   767  0022                     ??_readADCData:	
   768  0022                     lcdWriteControl@databyte:	
   769                           ; 1 bytes @ 0x2
   770                           
   771  0022                     lcdWriteData@databyte:	
   772                           ; 1 bytes @ 0x2
   773                           
   774  0022                     readADCData@ADCResult:	
   775                           ; 1 bytes @ 0x2
   776                           
   777  0022                     ___wmul@multiplicand:	
   778                           ; 2 bytes @ 0x2
   779                           
   780                           
   781                           ; 2 bytes @ 0x2
   782  0022                     	ds	1
   783  0023                     ??_setupLCD:	
   784  0023                     ??_lcdSetCursor:	
   785                           ; 1 bytes @ 0x3
   786                           
   787  0023                     ??_lcdWriteString:	
   788                           ; 1 bytes @ 0x3
   789                           
   790  0023                     lcdSetCursor@address:	
   791                           ; 1 bytes @ 0x3
   792                           
   793  0023                     ___ftpack@exp:	
   794                           ; 1 bytes @ 0x3
   795                           
   796  0023                     frexp@eptr:	
   797                           ; 1 bytes @ 0x3
   798                           
   799  0023                     ___ftge@ff2:	
   800                           ; 1 bytes @ 0x3
   801                           
   802                           
   803                           ; 3 bytes @ 0x3
   804  0023                     	ds	1
   805  0024                     ??_frexp:	
   806  0024                     ??___wmul:	
   807                           ; 1 bytes @ 0x4
   808                           
   809  0024                     lcdWriteString@s:	
   810                           ; 1 bytes @ 0x4
   811                           
   812  0024                     ___ftpack@sign:	
   813                           ; 1 bytes @ 0x4
   814                           
   815  0024                     ___wmul@product:	
   816                           ; 1 bytes @ 0x4
   817                           
   818                           
   819                           ; 2 bytes @ 0x4
   820  0024                     	ds	1
   821  0025                     ??___ftpack:	
   822                           
   823                           ; 1 bytes @ 0x5
   824  0025                     	ds	1
   825  0026                     ?_lcdWriteToDigitBCD:	
   826  0026                     ??___ftge:	
   827                           ; 1 bytes @ 0x6
   828                           
   829  0026                     lcdWriteToDigitBCD@data:	
   830                           ; 1 bytes @ 0x6
   831                           
   832                           
   833                           ; 2 bytes @ 0x6
   834  0026                     	ds	2
   835  0028                     ?___altoft:	
   836  0028                     ?___awtoft:	
   837                           ; 3 bytes @ 0x8
   838                           
   839  0028                     ?___ftmul:	
   840                           ; 3 bytes @ 0x8
   841                           
   842  0028                     lcdWriteToDigitBCD@digits:	
   843                           ; 3 bytes @ 0x8
   844                           
   845  0028                     ___awtoft@c:	
   846                           ; 1 bytes @ 0x8
   847                           
   848  0028                     ___ftmul@f1:	
   849                           ; 2 bytes @ 0x8
   850                           
   851  0028                     ___altoft@c:	
   852                           ; 3 bytes @ 0x8
   853                           
   854                           
   855                           ; 4 bytes @ 0x8
   856  0028                     	ds	1
   857  0029                     lcdWriteToDigitBCD@showSign:	
   858                           
   859                           ; 1 bytes @ 0x9
   860  0029                     	ds	1
   861  002A                     ??_lcdWriteToDigitBCD:	
   862                           
   863                           ; 1 bytes @ 0xA
   864  002A                     	ds	1
   865  002B                     ??___awtoft:	
   866  002B                     lcdWriteToDigitBCD@TensDigit:	
   867                           ; 1 bytes @ 0xB
   868                           
   869  002B                     ___ftmul@f2:	
   870                           ; 1 bytes @ 0xB
   871                           
   872                           
   873                           ; 3 bytes @ 0xB
   874  002B                     	ds	1
   875  002C                     ??___altoft:	
   876  002C                     lcdWriteToDigitBCD@HundredDigit:	
   877                           ; 1 bytes @ 0xC
   878                           
   879                           
   880                           ; 1 bytes @ 0xC
   881  002C                     	ds	1
   882  002D                     lcdWriteToDigitBCD@ThousandDigit:	
   883  002D                     ___awtoft@sign:	
   884                           ; 1 bytes @ 0xD
   885                           
   886                           
   887                           ; 1 bytes @ 0xD
   888  002D                     	ds	1
   889  002E                     ??___ftmul:	
   890  002E                     lcdWriteToDigitBCD@sign:	
   891                           ; 1 bytes @ 0xE
   892                           
   893  002E                     ___altoft@exp:	
   894                           ; 1 bytes @ 0xE
   895                           
   896                           
   897                           ; 1 bytes @ 0xE
   898  002E                     	ds	1
   899  002F                     ___altoft@sign:	
   900  002F                     lcdWriteToDigitBCD@OnesDigit:	
   901                           ; 1 bytes @ 0xF
   902                           
   903                           
   904                           ; 2 bytes @ 0xF
   905  002F                     	ds	1
   906  0030                     ?___ftneg:	
   907  0030                     ___ftneg@f1:	
   908                           ; 3 bytes @ 0x10
   909                           
   910                           
   911                           ; 3 bytes @ 0x10
   912  0030                     	ds	1
   913  0031                     ??_initializeMotor:	
   914  0031                     ?_move:	
   915                           ; 1 bytes @ 0x11
   916                           
   917  0031                     move@direction:	
   918                           ; 1 bytes @ 0x11
   919                           
   920                           
   921                           ; 1 bytes @ 0x11
   922  0031                     	ds	1
   923  0032                     ??_move:	
   924  0032                     ??_initialise:	
   925                           ; 1 bytes @ 0x12
   926                           
   927  0032                     ___ftmul@exp:	
   928                           ; 1 bytes @ 0x12
   929                           
   930                           
   931                           ; 1 bytes @ 0x12
   932  0032                     	ds	1
   933  0033                     ??___ftneg:	
   934  0033                     ?___ftdiv:	
   935                           ; 1 bytes @ 0x13
   936                           
   937  0033                     ___ftdiv@f2:	
   938                           ; 3 bytes @ 0x13
   939                           
   940  0033                     ___ftmul@f3_as_product:	
   941                           ; 3 bytes @ 0x13
   942                           
   943                           
   944                           ; 3 bytes @ 0x13
   945  0033                     	ds	1
   946  0034                     move@steps:	
   947                           
   948                           ; 1 bytes @ 0x14
   949  0034                     	ds	1
   950  0035                     move@i:	
   951                           
   952                           ; 1 bytes @ 0x15
   953  0035                     	ds	1
   954  0036                     ___ftmul@cntr:	
   955  0036                     ___ftdiv@f1:	
   956                           ; 1 bytes @ 0x16
   957                           
   958                           
   959                           ; 3 bytes @ 0x16
   960  0036                     	ds	1
   961  0037                     ___ftmul@sign:	
   962                           
   963                           ; 1 bytes @ 0x17
   964  0037                     	ds	2
   965  0039                     ??___ftdiv:	
   966                           
   967                           ; 1 bytes @ 0x19
   968  0039                     	ds	4
   969  003D                     ___ftdiv@cntr:	
   970                           
   971                           ; 1 bytes @ 0x1D
   972  003D                     	ds	1
   973  003E                     ___ftdiv@f3:	
   974                           
   975                           ; 3 bytes @ 0x1E
   976  003E                     	ds	3
   977  0041                     ___ftdiv@exp:	
   978                           
   979                           ; 1 bytes @ 0x21
   980  0041                     	ds	1
   981  0042                     ___ftdiv@sign:	
   982                           
   983                           ; 1 bytes @ 0x22
   984  0042                     	ds	1
   985  0043                     ?___fttol:	
   986  0043                     ___fttol@f1:	
   987                           ; 4 bytes @ 0x23
   988                           
   989                           
   990                           ; 3 bytes @ 0x23
   991  0043                     	ds	4
   992  0047                     ??___fttol:	
   993                           
   994                           ; 1 bytes @ 0x27
   995  0047                     	ds	4
   996  004B                     ___fttol@sign1:	
   997                           
   998                           ; 1 bytes @ 0x2B
   999  004B                     	ds	1
  1000  004C                     ___fttol@lval:	
  1001                           
  1002                           ; 4 bytes @ 0x2C
  1003  004C                     	ds	4
  1004  0050                     ___fttol@exp1:	
  1005                           
  1006                           ; 1 bytes @ 0x30
  1007  0050                     	ds	1
  1008  0051                     ?_trunc:	
  1009  0051                     trunc@x:	
  1010                           ; 3 bytes @ 0x31
  1011                           
  1012                           
  1013                           ; 3 bytes @ 0x31
  1014  0051                     	ds	3
  1015  0054                     ??_trunc:	
  1016                           
  1017                           ; 1 bytes @ 0x34
  1018  0054                     	ds	1
  1019  0055                     trunc@i:	
  1020                           
  1021                           ; 3 bytes @ 0x35
  1022  0055                     	ds	3
  1023  0058                     trunc@expon:	
  1024                           
  1025                           ; 2 bytes @ 0x38
  1026  0058                     	ds	2
  1027  005A                     ?___ftadd:	
  1028  005A                     ___ftadd@f1:	
  1029                           ; 3 bytes @ 0x3A
  1030                           
  1031                           
  1032                           ; 3 bytes @ 0x3A
  1033  005A                     	ds	3
  1034  005D                     ___ftadd@f2:	
  1035                           
  1036                           ; 3 bytes @ 0x3D
  1037  005D                     	ds	3
  1038  0060                     ??___ftadd:	
  1039                           
  1040                           ; 1 bytes @ 0x40
  1041  0060                     	ds	4
  1042  0064                     ___ftadd@sign:	
  1043                           
  1044                           ; 1 bytes @ 0x44
  1045  0064                     	ds	1
  1046  0065                     ___ftadd@exp2:	
  1047                           
  1048                           ; 1 bytes @ 0x45
  1049  0065                     	ds	1
  1050  0066                     ___ftadd@exp1:	
  1051                           
  1052                           ; 1 bytes @ 0x46
  1053  0066                     	ds	1
  1054  0067                     ?_round:	
  1055  0067                     round@x:	
  1056                           ; 3 bytes @ 0x47
  1057                           
  1058                           
  1059                           ; 3 bytes @ 0x47
  1060  0067                     	ds	3
  1061  006A                     ??_round:	
  1062  006A                     round@f:	
  1063                           ; 1 bytes @ 0x4A
  1064                           
  1065                           
  1066                           ; 3 bytes @ 0x4A
  1067  006A                     	ds	3
  1068  006D                     ?_moveDeg:	
  1069  006D                     ?_readADCMeter:	
  1070                           ; 1 bytes @ 0x4D
  1071                           
  1072  006D                     moveDeg@deg:	
  1073                           ; 2 bytes @ 0x4D
  1074                           
  1075                           
  1076                           ; 3 bytes @ 0x4D
  1077  006D                     	ds	2
  1078  006F                     ??_readADCMeter:	
  1079                           
  1080                           ; 1 bytes @ 0x4F
  1081  006F                     	ds	1
  1082                           
  1083                           	psect	maintext
  1084  0327                     __pmaintext:	
  1085 ;;
  1086 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1087 ;;
  1088 ;; *************** function _main *****************
  1089 ;; Defined at:
  1090 ;;		line 46 in file "main.c"
  1091 ;; Parameters:    Size  Location     Type
  1092 ;;		None
  1093 ;; Auto vars:     Size  Location     Type
  1094 ;;  resultInMete    2   23[BANK1 ] int 
  1095 ;;  result          2   21[BANK1 ] int 
  1096 ;; Return value:  Size  Location     Type
  1097 ;;                  1    wreg      void 
  1098 ;; Registers used:
  1099 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1100 ;; Tracked objects:
  1101 ;;		On entry : B00/0
  1102 ;;		On exit  : 0/0
  1103 ;;		Unchanged: 0/0
  1104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1105 ;;      Params:         0       0       0       0       0
  1106 ;;      Locals:         0       0       4       0       0
  1107 ;;      Temps:          0       0       2       0       0
  1108 ;;      Totals:         0       0       6       0       0
  1109 ;;Total ram usage:        6 bytes
  1110 ;; Hardware stack levels required when called:    7
  1111 ;; This function calls:
  1112 ;;		_initialise
  1113 ;;		_lcdSetCursor
  1114 ;;		_lcdWriteString
  1115 ;;		_lcdWriteToDigitBCD
  1116 ;;		_move
  1117 ;;		_moveDeg
  1118 ;;		_readADCData
  1119 ;;		_readADCMeter
  1120 ;;		_startADCConversion
  1121 ;; This function is called by:
  1122 ;;		Startup code after reset
  1123 ;; This function uses a non-reentrant model
  1124 ;;
  1125                           
  1126                           
  1127                           ;psect for function _main
  1128  0327                     _main:	
  1129                           
  1130                           ;main.c: 48: initialise();
  1131                           
  1132                           ;incstack = 0
  1133                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1134  0327  120A  158A  2571  120A  118A  	fcall	_initialise
  1135                           
  1136                           ;main.c: 50: startADCConversion();
  1137  032C  120A  158A  24C8  120A  118A  	fcall	_startADCConversion
  1138  0331                     l2880:	
  1139                           ;main.c: 51: while(1){
  1140                           
  1141                           
  1142                           ;main.c: 54: if(conversionDone){
  1143  0331  1C70               	btfss	_conversionDone/(0+8),_conversionDone& (0+7)	;volatile
  1144  0332  2BB0               	goto	l2906
  1145                           
  1146                           ;main.c: 55: conversionDone = 0;
  1147  0333  1070               	bcf	_conversionDone/(0+8),_conversionDone& (0+7)	;volatile
  1148                           
  1149                           ;main.c: 56: int result = readADCData();
  1150  0334  120A  158A  24E5  120A  118A  	fcall	_readADCData
  1151  0339  1283               	bcf	3,5	;RP0=0, select bank0
  1152  033A  1303               	bcf	3,6	;RP1=0, select bank0
  1153  033B  0821               	movf	?_readADCData+1,w
  1154  033C  1683               	bsf	3,5	;RP0=1, select bank1
  1155  033D  1303               	bcf	3,6	;RP1=0, select bank1
  1156  033E  00B6               	movwf	(main@result+1)^(0+128)
  1157  033F  1283               	bcf	3,5	;RP0=0, select bank0
  1158  0340  1303               	bcf	3,6	;RP1=0, select bank0
  1159  0341  0820               	movf	?_readADCData,w
  1160  0342  1683               	bsf	3,5	;RP0=1, select bank1
  1161  0343  1303               	bcf	3,6	;RP1=0, select bank1
  1162  0344  00B5               	movwf	main@result^(0+128)
  1163                           
  1164                           ;main.c: 57: int resultInMeters = readADCMeter();
  1165  0345  120A  118A  213E  120A  118A  	fcall	_readADCMeter
  1166  034A  1283               	bcf	3,5	;RP0=0, select bank0
  1167  034B  1303               	bcf	3,6	;RP1=0, select bank0
  1168  034C  086E               	movf	?_readADCMeter+1,w
  1169  034D  1683               	bsf	3,5	;RP0=1, select bank1
  1170  034E  1303               	bcf	3,6	;RP1=0, select bank1
  1171  034F  00B8               	movwf	(main@resultInMeters+1)^(0+128)
  1172  0350  1283               	bcf	3,5	;RP0=0, select bank0
  1173  0351  1303               	bcf	3,6	;RP1=0, select bank0
  1174  0352  086D               	movf	?_readADCMeter,w
  1175  0353  1683               	bsf	3,5	;RP0=1, select bank1
  1176  0354  1303               	bcf	3,6	;RP1=0, select bank1
  1177  0355  00B7               	movwf	main@resultInMeters^(0+128)
  1178                           
  1179                           ;main.c: 58: if(updateLcdIRData){
  1180  0356  1D71               	btfss	_updateLcdIRData/(0+8),_updateLcdIRData& (0+7)	;volatile
  1181  0357  2BAB               	goto	l2904
  1182                           
  1183                           ;main.c: 59: lcdSetCursor(0x00);
  1184  0358  3000               	movlw	0
  1185  0359  120A  158A  24A8  120A  118A  	fcall	_lcdSetCursor
  1186                           
  1187                           ;main.c: 60: lcdWriteString("Raw:");
  1188  035E  300F               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1189  035F  120A  158A  258D  120A  118A  	fcall	_lcdWriteString
  1190                           
  1191                           ;main.c: 61: lcdWriteToDigitBCD(result,4,0);
  1192  0364  1683               	bsf	3,5	;RP0=1, select bank1
  1193  0365  1303               	bcf	3,6	;RP1=0, select bank1
  1194  0366  0836               	movf	(main@result+1)^(0+128),w
  1195  0367  1283               	bcf	3,5	;RP0=0, select bank0
  1196  0368  1303               	bcf	3,6	;RP1=0, select bank0
  1197  0369  00A7               	movwf	lcdWriteToDigitBCD@data+1
  1198  036A  1683               	bsf	3,5	;RP0=1, select bank1
  1199  036B  1303               	bcf	3,6	;RP1=0, select bank1
  1200  036C  0835               	movf	main@result^(0+128),w
  1201  036D  1283               	bcf	3,5	;RP0=0, select bank0
  1202  036E  1303               	bcf	3,6	;RP1=0, select bank0
  1203  036F  00A6               	movwf	lcdWriteToDigitBCD@data
  1204  0370  3004               	movlw	4
  1205  0371  1683               	bsf	3,5	;RP0=1, select bank1
  1206  0372  1303               	bcf	3,6	;RP1=0, select bank1
  1207  0373  00B3               	movwf	??_main^(0+128)
  1208  0374  0833               	movf	??_main^(0+128),w
  1209  0375  1283               	bcf	3,5	;RP0=0, select bank0
  1210  0376  1303               	bcf	3,6	;RP1=0, select bank0
  1211  0377  00A8               	movwf	lcdWriteToDigitBCD@digits
  1212  0378  01A9               	clrf	lcdWriteToDigitBCD@showSign
  1213  0379  120A  118A  2587  120A  118A  	fcall	_lcdWriteToDigitBCD
  1214                           
  1215                           ;main.c: 62: lcdSetCursor(0x09);
  1216  037E  3009               	movlw	9
  1217  037F  120A  158A  24A8  120A  118A  	fcall	_lcdSetCursor
  1218                           
  1219                           ;main.c: 63: lcdWriteString("=>");
  1220  0384  3014               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1221  0385  120A  158A  258D  120A  118A  	fcall	_lcdWriteString
  1222                           
  1223                           ;main.c: 64: lcdWriteToDigitBCD(resultInMeters,3,0);
  1224  038A  1683               	bsf	3,5	;RP0=1, select bank1
  1225  038B  1303               	bcf	3,6	;RP1=0, select bank1
  1226  038C  0838               	movf	(main@resultInMeters+1)^(0+128),w
  1227  038D  1283               	bcf	3,5	;RP0=0, select bank0
  1228  038E  1303               	bcf	3,6	;RP1=0, select bank0
  1229  038F  00A7               	movwf	lcdWriteToDigitBCD@data+1
  1230  0390  1683               	bsf	3,5	;RP0=1, select bank1
  1231  0391  1303               	bcf	3,6	;RP1=0, select bank1
  1232  0392  0837               	movf	main@resultInMeters^(0+128),w
  1233  0393  1283               	bcf	3,5	;RP0=0, select bank0
  1234  0394  1303               	bcf	3,6	;RP1=0, select bank0
  1235  0395  00A6               	movwf	lcdWriteToDigitBCD@data
  1236  0396  3003               	movlw	3
  1237  0397  1683               	bsf	3,5	;RP0=1, select bank1
  1238  0398  1303               	bcf	3,6	;RP1=0, select bank1
  1239  0399  00B3               	movwf	??_main^(0+128)
  1240  039A  0833               	movf	??_main^(0+128),w
  1241  039B  1283               	bcf	3,5	;RP0=0, select bank0
  1242  039C  1303               	bcf	3,6	;RP1=0, select bank0
  1243  039D  00A8               	movwf	lcdWriteToDigitBCD@digits
  1244  039E  01A9               	clrf	lcdWriteToDigitBCD@showSign
  1245  039F  120A  118A  2587  120A  118A  	fcall	_lcdWriteToDigitBCD
  1246                           
  1247                           ;main.c: 65: lcdWriteString("cm");
  1248  03A4  3017               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1249  03A5  120A  158A  258D  120A  118A  	fcall	_lcdWriteString
  1250                           
  1251                           ;main.c: 66: updateLcdIRData = 0;
  1252  03AA  1171               	bcf	_updateLcdIRData/(0+8),_updateLcdIRData& (0+7)	;volatile
  1253  03AB                     l2904:	
  1254                           
  1255                           ;main.c: 67: }
  1256                           ;main.c: 69: startADCConversion();
  1257  03AB  120A  158A  24C8  120A  118A  	fcall	_startADCConversion
  1258  03B0                     l2906:	
  1259                           
  1260                           ;main.c: 71: }
  1261                           ;main.c: 73: if(pb0Pressed){
  1262  03B0  1D70               	btfss	_pb0Pressed/(0+8),_pb0Pressed& (0+7)	;volatile
  1263  03B1  2BC1               	goto	l2914
  1264                           
  1265                           ;main.c: 74: move(1,1);
  1266  03B2  1283               	bcf	3,5	;RP0=0, select bank0
  1267  03B3  1303               	bcf	3,6	;RP1=0, select bank0
  1268  03B4  01B1               	clrf	move@direction
  1269  03B5  0AB1               	incf	move@direction,f
  1270  03B6  3001               	movlw	1
  1271  03B7  120A  118A  2626  120A  118A  	fcall	_move
  1272                           
  1273                           ;main.c: 75: RB4 = !RB4;
  1274  03BC  3010               	movlw	16
  1275  03BD  1283               	bcf	3,5	;RP0=0, select bank0
  1276  03BE  1303               	bcf	3,6	;RP1=0, select bank0
  1277  03BF  0686               	xorwf	6,f
  1278                           
  1279                           ;main.c: 76: pb0Pressed = 0;
  1280  03C0  1170               	bcf	_pb0Pressed/(0+8),_pb0Pressed& (0+7)	;volatile
  1281  03C1                     l2914:	
  1282                           
  1283                           ;main.c: 77: }
  1284                           ;main.c: 79: if(pb1Pressed){
  1285  03C1  1E70               	btfss	_pb1Pressed/(0+8),_pb1Pressed& (0+7)	;volatile
  1286  03C2  2BCD               	goto	l2920
  1287                           
  1288                           ;main.c: 80: move(1,0);
  1289  03C3  1283               	bcf	3,5	;RP0=0, select bank0
  1290  03C4  1303               	bcf	3,6	;RP1=0, select bank0
  1291  03C5  01B1               	clrf	move@direction
  1292  03C6  3001               	movlw	1
  1293  03C7  120A  118A  2626  120A  118A  	fcall	_move
  1294                           
  1295                           ;main.c: 81: pb1Pressed = 0;
  1296  03CC  1270               	bcf	_pb1Pressed/(0+8),_pb1Pressed& (0+7)	;volatile
  1297  03CD                     l2920:	
  1298                           
  1299                           ;main.c: 82: }
  1300                           ;main.c: 84: if(pb2Pressed){
  1301  03CD  1F70               	btfss	_pb2Pressed/(0+8),_pb2Pressed& (0+7)	;volatile
  1302  03CE  2BE9               	goto	l2932
  1303                           
  1304                           ;main.c: 85: if(motorToggle){
  1305  03CF  1CF0               	btfss	_motorToggle/(0+8),_motorToggle& (0+7)
  1306  03D0  2BD9               	goto	l2926
  1307                           
  1308                           ;main.c: 86: moveDeg(-180);
  1309  03D1  3000               	movlw	0
  1310  03D2  1283               	bcf	3,5	;RP0=0, select bank0
  1311  03D3  1303               	bcf	3,6	;RP1=0, select bank0
  1312  03D4  00ED               	movwf	moveDeg@deg
  1313  03D5  3034               	movlw	52
  1314  03D6  00EE               	movwf	moveDeg@deg+1
  1315  03D7  30C3               	movlw	195
  1316  03D8  2BE0               	goto	L1
  1317  03D9                     l2926:	
  1318                           ;main.c: 87: }
  1319                           
  1320                           
  1321                           ;main.c: 88: else{
  1322                           ;main.c: 89: moveDeg(180);
  1323  03D9  3000               	movlw	0
  1324  03DA  1283               	bcf	3,5	;RP0=0, select bank0
  1325  03DB  1303               	bcf	3,6	;RP1=0, select bank0
  1326  03DC  00ED               	movwf	moveDeg@deg
  1327  03DD  3034               	movlw	52
  1328  03DE  00EE               	movwf	moveDeg@deg+1
  1329  03DF  3043               	movlw	67
  1330  03E0                     L1:	
  1331  03E0  00EF               	movwf	moveDeg@deg+2
  1332  03E1  120A  118A  2238  120A  118A  	fcall	_moveDeg
  1333                           
  1334                           ;main.c: 90: }
  1335                           ;main.c: 91: motorToggle = !motorToggle;
  1336  03E6  3002               	movlw	(0+1) shl (_motorToggle& (0+7))
  1337  03E7  06F0               	xorwf	_motorToggle/(0+8),f
  1338                           
  1339                           ;main.c: 92: pb2Pressed = 0;
  1340  03E8  1370               	bcf	_pb2Pressed/(0+8),_pb2Pressed& (0+7)	;volatile
  1341  03E9                     l2932:	
  1342                           
  1343                           ;main.c: 93: }
  1344                           ;main.c: 95: if(pb3Pressed){
  1345  03E9  1C71               	btfss	_pb3Pressed/(0+8),_pb3Pressed& (0+7)	;volatile
  1346  03EA  2BF0               	goto	l107
  1347                           
  1348                           ;main.c: 96: RB4 = !RB4;
  1349  03EB  3010               	movlw	16
  1350  03EC  1283               	bcf	3,5	;RP0=0, select bank0
  1351  03ED  1303               	bcf	3,6	;RP1=0, select bank0
  1352  03EE  0686               	xorwf	6,f
  1353                           
  1354                           ;main.c: 97: pb3Pressed = 0;
  1355  03EF  1071               	bcf	_pb3Pressed/(0+8),_pb3Pressed& (0+7)	;volatile
  1356  03F0                     l107:	
  1357                           
  1358                           ;main.c: 98: }
  1359                           ;main.c: 100: _delay((unsigned long)((20)*(20000000/4000.0)));
  1360  03F0  3082               	movlw	130
  1361  03F1  1683               	bsf	3,5	;RP0=1, select bank1
  1362  03F2  1303               	bcf	3,6	;RP1=0, select bank1
  1363  03F3  00B4               	movwf	(??_main^(0+128)+1)
  1364  03F4  30DD               	movlw	221
  1365  03F5  00B3               	movwf	??_main^(0+128)
  1366  03F6                     u3637:	
  1367  03F6  0BB3               	decfsz	??_main^(0+128),f
  1368  03F7  2BF6               	goto	u3637
  1369  03F8  0BB4               	decfsz	(??_main^(0+128)+1),f
  1370  03F9  2BF6               	goto	u3637
  1371  03FA  2BFB               	nop2
  1372  03FB  2B31               	goto	l2880
  1373  03FC                     __end_of_main:	
  1374                           
  1375                           	psect	text1
  1376  0CC8                     __ptext1:	
  1377 ;; *************** function _startADCConversion *****************
  1378 ;; Defined at:
  1379 ;;		line 47 in file "adConv.c"
  1380 ;; Parameters:    Size  Location     Type
  1381 ;;		None
  1382 ;; Auto vars:     Size  Location     Type
  1383 ;;		None
  1384 ;; Return value:  Size  Location     Type
  1385 ;;                  1    wreg      void 
  1386 ;; Registers used:
  1387 ;;		wreg
  1388 ;; Tracked objects:
  1389 ;;		On entry : 0/0
  1390 ;;		On exit  : 0/0
  1391 ;;		Unchanged: 0/0
  1392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1393 ;;      Params:         0       0       0       0       0
  1394 ;;      Locals:         0       0       0       0       0
  1395 ;;      Temps:          0       2       0       0       0
  1396 ;;      Totals:         0       2       0       0       0
  1397 ;;Total ram usage:        2 bytes
  1398 ;; Hardware stack levels used:    1
  1399 ;; Hardware stack levels required when called:    2
  1400 ;; This function calls:
  1401 ;;		Nothing
  1402 ;; This function is called by:
  1403 ;;		_main
  1404 ;; This function uses a non-reentrant model
  1405 ;;
  1406                           
  1407                           
  1408                           ;psect for function _startADCConversion
  1409  0CC8                     _startADCConversion:	
  1410                           
  1411                           ;adConv.c: 49: _delay((unsigned long)((1)*(20000000/4000.0)));
  1412                           
  1413                           ;incstack = 0
  1414                           ; Regs used in _startADCConversion: [wreg]
  1415  0CC8  3007               	movlw	7
  1416  0CC9  1283               	bcf	3,5	;RP0=0, select bank0
  1417  0CCA  1303               	bcf	3,6	;RP1=0, select bank0
  1418  0CCB  00A1               	movwf	??_startADCConversion+1
  1419  0CCC  307D               	movlw	125
  1420  0CCD  00A0               	movwf	??_startADCConversion
  1421  0CCE                     u3647:	
  1422  0CCE  0BA0               	decfsz	??_startADCConversion,f
  1423  0CCF  2CCE               	goto	u3647
  1424  0CD0  0BA1               	decfsz	??_startADCConversion+1,f
  1425  0CD1  2CCE               	goto	u3647
  1426                           
  1427                           ;adConv.c: 51: GO = 1;
  1428  0CD2  1283               	bcf	3,5	;RP0=0, select bank0
  1429  0CD3  1303               	bcf	3,6	;RP1=0, select bank0
  1430  0CD4  151F               	bsf	31,2	;volatile
  1431  0CD5  0008               	return
  1432  0CD6                     __end_of_startADCConversion:	
  1433                           
  1434                           	psect	text2
  1435  013E                     __ptext2:	
  1436 ;; *************** function _readADCMeter *****************
  1437 ;; Defined at:
  1438 ;;		line 37 in file "adConv.c"
  1439 ;; Parameters:    Size  Location     Type
  1440 ;;		None
  1441 ;; Auto vars:     Size  Location     Type
  1442 ;;  result          3    9[BANK1 ] void 
  1443 ;;  m               3    6[BANK1 ] void 
  1444 ;;  k               3    3[BANK1 ] void 
  1445 ;;  rawInverted     3    0[BANK1 ] void 
  1446 ;;  resultInInt     2   17[BANK1 ] int 
  1447 ;;  raw             2   15[BANK1 ] int 
  1448 ;; Return value:  Size  Location     Type
  1449 ;;                  2   77[BANK0 ] int 
  1450 ;; Registers used:
  1451 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1452 ;; Tracked objects:
  1453 ;;		On entry : 0/0
  1454 ;;		On exit  : 0/0
  1455 ;;		Unchanged: 0/0
  1456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1457 ;;      Params:         0       2       0       0       0
  1458 ;;      Locals:         0       0      19       0       0
  1459 ;;      Temps:          0       0       0       0       0
  1460 ;;      Totals:         0       2      19       0       0
  1461 ;;Total ram usage:       21 bytes
  1462 ;; Hardware stack levels used:    1
  1463 ;; Hardware stack levels required when called:    6
  1464 ;; This function calls:
  1465 ;;		___awtoft
  1466 ;;		___ftadd
  1467 ;;		___ftdiv
  1468 ;;		___ftmul
  1469 ;;		___fttol
  1470 ;;		_readADCData
  1471 ;;		_round
  1472 ;; This function is called by:
  1473 ;;		_main
  1474 ;; This function uses a non-reentrant model
  1475 ;;
  1476                           
  1477                           
  1478                           ;psect for function _readADCMeter
  1479  013E                     _readADCMeter:	
  1480                           
  1481                           ;adConv.c: 38: int raw = readADCData();
  1482                           
  1483                           ;incstack = 0
  1484                           ; Regs used in _readADCMeter: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1485  013E  120A  158A  24E5  120A  118A  	fcall	_readADCData
  1486  0143  1283               	bcf	3,5	;RP0=0, select bank0
  1487  0144  1303               	bcf	3,6	;RP1=0, select bank0
  1488  0145  0821               	movf	?_readADCData+1,w
  1489  0146  1683               	bsf	3,5	;RP0=1, select bank1
  1490  0147  1303               	bcf	3,6	;RP1=0, select bank1
  1491  0148  00B0               	movwf	(readADCMeter@raw+1)^(0+128)
  1492  0149  1283               	bcf	3,5	;RP0=0, select bank0
  1493  014A  1303               	bcf	3,6	;RP1=0, select bank0
  1494  014B  0820               	movf	?_readADCData,w
  1495  014C  1683               	bsf	3,5	;RP0=1, select bank1
  1496  014D  1303               	bcf	3,6	;RP1=0, select bank1
  1497  014E  00AF               	movwf	readADCMeter@raw^(0+128)
  1498                           
  1499                           ;adConv.c: 39: double rawInverted = 1.0/((double) raw);
  1500  014F  0830               	movf	(readADCMeter@raw+1)^(0+128),w
  1501  0150  1283               	bcf	3,5	;RP0=0, select bank0
  1502  0151  1303               	bcf	3,6	;RP1=0, select bank0
  1503  0152  00A9               	movwf	___awtoft@c+1
  1504  0153  1683               	bsf	3,5	;RP0=1, select bank1
  1505  0154  1303               	bcf	3,6	;RP1=0, select bank1
  1506  0155  082F               	movf	readADCMeter@raw^(0+128),w
  1507  0156  1283               	bcf	3,5	;RP0=0, select bank0
  1508  0157  1303               	bcf	3,6	;RP1=0, select bank0
  1509  0158  00A8               	movwf	___awtoft@c
  1510  0159  120A  158A  25F5  120A  118A  	fcall	___awtoft
  1511  015E  1283               	bcf	3,5	;RP0=0, select bank0
  1512  015F  1303               	bcf	3,6	;RP1=0, select bank0
  1513  0160  0828               	movf	?___awtoft,w
  1514  0161  00B3               	movwf	___ftdiv@f2
  1515  0162  0829               	movf	?___awtoft+1,w
  1516  0163  00B4               	movwf	___ftdiv@f2+1
  1517  0164  082A               	movf	?___awtoft+2,w
  1518  0165  00B5               	movwf	___ftdiv@f2+2
  1519  0166  3000               	movlw	0
  1520  0167  00B6               	movwf	___ftdiv@f1
  1521  0168  3080               	movlw	128
  1522  0169  00B7               	movwf	___ftdiv@f1+1
  1523  016A  303F               	movlw	63
  1524  016B  00B8               	movwf	___ftdiv@f1+2
  1525  016C  120A  118A  24CF  120A  118A  	fcall	___ftdiv
  1526  0171  1283               	bcf	3,5	;RP0=0, select bank0
  1527  0172  1303               	bcf	3,6	;RP1=0, select bank0
  1528  0173  0833               	movf	?___ftdiv,w
  1529  0174  1683               	bsf	3,5	;RP0=1, select bank1
  1530  0175  1303               	bcf	3,6	;RP1=0, select bank1
  1531  0176  00A0               	movwf	readADCMeter@rawInverted^(0+128)
  1532  0177  1283               	bcf	3,5	;RP0=0, select bank0
  1533  0178  1303               	bcf	3,6	;RP1=0, select bank0
  1534  0179  0834               	movf	?___ftdiv+1,w
  1535  017A  1683               	bsf	3,5	;RP0=1, select bank1
  1536  017B  1303               	bcf	3,6	;RP1=0, select bank1
  1537  017C  00A1               	movwf	(readADCMeter@rawInverted+1)^(0+128)
  1538  017D  1283               	bcf	3,5	;RP0=0, select bank0
  1539  017E  1303               	bcf	3,6	;RP1=0, select bank0
  1540  017F  0835               	movf	?___ftdiv+2,w
  1541  0180  1683               	bsf	3,5	;RP0=1, select bank1
  1542  0181  1303               	bcf	3,6	;RP1=0, select bank1
  1543  0182  00A2               	movwf	(readADCMeter@rawInverted+2)^(0+128)
  1544                           
  1545                           ;adConv.c: 40: double k = 18609;
  1546  0183  3062               	movlw	98
  1547  0184  00A3               	movwf	readADCMeter@k^(0+128)
  1548  0185  3091               	movlw	145
  1549  0186  00A4               	movwf	(readADCMeter@k+1)^(0+128)
  1550  0187  3046               	movlw	70
  1551  0188  00A5               	movwf	(readADCMeter@k+2)^(0+128)
  1552                           
  1553                           ;adConv.c: 41: double m = -1.6803;
  1554  0189  3014               	movlw	20
  1555  018A  00A6               	movwf	readADCMeter@m^(0+128)
  1556  018B  30D7               	movlw	215
  1557  018C  00A7               	movwf	(readADCMeter@m+1)^(0+128)
  1558  018D  30BF               	movlw	191
  1559  018E  00A8               	movwf	(readADCMeter@m+2)^(0+128)
  1560                           
  1561                           ;adConv.c: 42: double result = rawInverted*k + m;
  1562  018F  0826               	movf	readADCMeter@m^(0+128),w
  1563  0190  1283               	bcf	3,5	;RP0=0, select bank0
  1564  0191  1303               	bcf	3,6	;RP1=0, select bank0
  1565  0192  00DA               	movwf	___ftadd@f1
  1566  0193  1683               	bsf	3,5	;RP0=1, select bank1
  1567  0194  1303               	bcf	3,6	;RP1=0, select bank1
  1568  0195  0827               	movf	(readADCMeter@m+1)^(0+128),w
  1569  0196  1283               	bcf	3,5	;RP0=0, select bank0
  1570  0197  1303               	bcf	3,6	;RP1=0, select bank0
  1571  0198  00DB               	movwf	___ftadd@f1+1
  1572  0199  1683               	bsf	3,5	;RP0=1, select bank1
  1573  019A  1303               	bcf	3,6	;RP1=0, select bank1
  1574  019B  0828               	movf	(readADCMeter@m+2)^(0+128),w
  1575  019C  1283               	bcf	3,5	;RP0=0, select bank0
  1576  019D  1303               	bcf	3,6	;RP1=0, select bank0
  1577  019E  00DC               	movwf	___ftadd@f1+2
  1578  019F  1683               	bsf	3,5	;RP0=1, select bank1
  1579  01A0  1303               	bcf	3,6	;RP1=0, select bank1
  1580  01A1  0823               	movf	readADCMeter@k^(0+128),w
  1581  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  1582  01A3  1303               	bcf	3,6	;RP1=0, select bank0
  1583  01A4  00A8               	movwf	___ftmul@f1
  1584  01A5  1683               	bsf	3,5	;RP0=1, select bank1
  1585  01A6  1303               	bcf	3,6	;RP1=0, select bank1
  1586  01A7  0824               	movf	(readADCMeter@k+1)^(0+128),w
  1587  01A8  1283               	bcf	3,5	;RP0=0, select bank0
  1588  01A9  1303               	bcf	3,6	;RP1=0, select bank0
  1589  01AA  00A9               	movwf	___ftmul@f1+1
  1590  01AB  1683               	bsf	3,5	;RP0=1, select bank1
  1591  01AC  1303               	bcf	3,6	;RP1=0, select bank1
  1592  01AD  0825               	movf	(readADCMeter@k+2)^(0+128),w
  1593  01AE  1283               	bcf	3,5	;RP0=0, select bank0
  1594  01AF  1303               	bcf	3,6	;RP1=0, select bank0
  1595  01B0  00AA               	movwf	___ftmul@f1+2
  1596  01B1  1683               	bsf	3,5	;RP0=1, select bank1
  1597  01B2  1303               	bcf	3,6	;RP1=0, select bank1
  1598  01B3  0820               	movf	readADCMeter@rawInverted^(0+128),w
  1599  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  1600  01B5  1303               	bcf	3,6	;RP1=0, select bank0
  1601  01B6  00AB               	movwf	___ftmul@f2
  1602  01B7  1683               	bsf	3,5	;RP0=1, select bank1
  1603  01B8  1303               	bcf	3,6	;RP1=0, select bank1
  1604  01B9  0821               	movf	(readADCMeter@rawInverted+1)^(0+128),w
  1605  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  1606  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  1607  01BC  00AC               	movwf	___ftmul@f2+1
  1608  01BD  1683               	bsf	3,5	;RP0=1, select bank1
  1609  01BE  1303               	bcf	3,6	;RP1=0, select bank1
  1610  01BF  0822               	movf	(readADCMeter@rawInverted+2)^(0+128),w
  1611  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  1612  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  1613  01C2  00AD               	movwf	___ftmul@f2+2
  1614  01C3  120A  118A  23FC  120A  118A  	fcall	___ftmul
  1615  01C8  1283               	bcf	3,5	;RP0=0, select bank0
  1616  01C9  1303               	bcf	3,6	;RP1=0, select bank0
  1617  01CA  0828               	movf	?___ftmul,w
  1618  01CB  00DD               	movwf	___ftadd@f2
  1619  01CC  0829               	movf	?___ftmul+1,w
  1620  01CD  00DE               	movwf	___ftadd@f2+1
  1621  01CE  082A               	movf	?___ftmul+2,w
  1622  01CF  00DF               	movwf	___ftadd@f2+2
  1623  01D0  120A  118A  2035  120A  118A  	fcall	___ftadd
  1624  01D5  1283               	bcf	3,5	;RP0=0, select bank0
  1625  01D6  1303               	bcf	3,6	;RP1=0, select bank0
  1626  01D7  085A               	movf	?___ftadd,w
  1627  01D8  1683               	bsf	3,5	;RP0=1, select bank1
  1628  01D9  1303               	bcf	3,6	;RP1=0, select bank1
  1629  01DA  00A9               	movwf	readADCMeter@result^(0+128)
  1630  01DB  1283               	bcf	3,5	;RP0=0, select bank0
  1631  01DC  1303               	bcf	3,6	;RP1=0, select bank0
  1632  01DD  085B               	movf	?___ftadd+1,w
  1633  01DE  1683               	bsf	3,5	;RP0=1, select bank1
  1634  01DF  1303               	bcf	3,6	;RP1=0, select bank1
  1635  01E0  00AA               	movwf	(readADCMeter@result+1)^(0+128)
  1636  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  1637  01E2  1303               	bcf	3,6	;RP1=0, select bank0
  1638  01E3  085C               	movf	?___ftadd+2,w
  1639  01E4  1683               	bsf	3,5	;RP0=1, select bank1
  1640  01E5  1303               	bcf	3,6	;RP1=0, select bank1
  1641  01E6  00AB               	movwf	(readADCMeter@result+2)^(0+128)
  1642                           
  1643                           ;adConv.c: 43: int resultInInt = (int) round(result);
  1644  01E7  0829               	movf	readADCMeter@result^(0+128),w
  1645  01E8  1283               	bcf	3,5	;RP0=0, select bank0
  1646  01E9  1303               	bcf	3,6	;RP1=0, select bank0
  1647  01EA  00E7               	movwf	round@x
  1648  01EB  1683               	bsf	3,5	;RP0=1, select bank1
  1649  01EC  1303               	bcf	3,6	;RP1=0, select bank1
  1650  01ED  082A               	movf	(readADCMeter@result+1)^(0+128),w
  1651  01EE  1283               	bcf	3,5	;RP0=0, select bank0
  1652  01EF  1303               	bcf	3,6	;RP1=0, select bank0
  1653  01F0  00E8               	movwf	round@x+1
  1654  01F1  1683               	bsf	3,5	;RP0=1, select bank1
  1655  01F2  1303               	bcf	3,6	;RP1=0, select bank1
  1656  01F3  082B               	movf	(readADCMeter@result+2)^(0+128),w
  1657  01F4  1283               	bcf	3,5	;RP0=0, select bank0
  1658  01F5  1303               	bcf	3,6	;RP1=0, select bank0
  1659  01F6  00E9               	movwf	round@x+2
  1660  01F7  120A  158A  27A0  120A  118A  	fcall	_round
  1661  01FC  1283               	bcf	3,5	;RP0=0, select bank0
  1662  01FD  1303               	bcf	3,6	;RP1=0, select bank0
  1663  01FE  0867               	movf	?_round,w
  1664  01FF  1683               	bsf	3,5	;RP0=1, select bank1
  1665  0200  1303               	bcf	3,6	;RP1=0, select bank1
  1666  0201  00AC               	movwf	_readADCMeter$689^(0+128)
  1667  0202  1283               	bcf	3,5	;RP0=0, select bank0
  1668  0203  1303               	bcf	3,6	;RP1=0, select bank0
  1669  0204  0868               	movf	?_round+1,w
  1670  0205  1683               	bsf	3,5	;RP0=1, select bank1
  1671  0206  1303               	bcf	3,6	;RP1=0, select bank1
  1672  0207  00AD               	movwf	(_readADCMeter$689+1)^(0+128)
  1673  0208  1283               	bcf	3,5	;RP0=0, select bank0
  1674  0209  1303               	bcf	3,6	;RP1=0, select bank0
  1675  020A  0869               	movf	?_round+2,w
  1676  020B  1683               	bsf	3,5	;RP0=1, select bank1
  1677  020C  1303               	bcf	3,6	;RP1=0, select bank1
  1678  020D  00AE               	movwf	(_readADCMeter$689+2)^(0+128)
  1679                           
  1680                           ;adConv.c: 43: int resultInInt = (int) round(result);
  1681  020E  082C               	movf	_readADCMeter$689^(0+128),w
  1682  020F  1283               	bcf	3,5	;RP0=0, select bank0
  1683  0210  1303               	bcf	3,6	;RP1=0, select bank0
  1684  0211  00C3               	movwf	___fttol@f1
  1685  0212  1683               	bsf	3,5	;RP0=1, select bank1
  1686  0213  1303               	bcf	3,6	;RP1=0, select bank1
  1687  0214  082D               	movf	(_readADCMeter$689+1)^(0+128),w
  1688  0215  1283               	bcf	3,5	;RP0=0, select bank0
  1689  0216  1303               	bcf	3,6	;RP1=0, select bank0
  1690  0217  00C4               	movwf	___fttol@f1+1
  1691  0218  1683               	bsf	3,5	;RP0=1, select bank1
  1692  0219  1303               	bcf	3,6	;RP1=0, select bank1
  1693  021A  082E               	movf	(_readADCMeter$689+2)^(0+128),w
  1694  021B  1283               	bcf	3,5	;RP0=0, select bank0
  1695  021C  1303               	bcf	3,6	;RP1=0, select bank0
  1696  021D  00C5               	movwf	___fttol@f1+2
  1697  021E  120A  118A  26BD   	fcall	___fttol
  1698  0221  1283               	bcf	3,5	;RP0=0, select bank0
  1699  0222  1303               	bcf	3,6	;RP1=0, select bank0
  1700  0223  0844               	movf	?___fttol+1,w
  1701  0224  1683               	bsf	3,5	;RP0=1, select bank1
  1702  0225  1303               	bcf	3,6	;RP1=0, select bank1
  1703  0226  00B2               	movwf	(readADCMeter@resultInInt+1)^(0+128)
  1704  0227  1283               	bcf	3,5	;RP0=0, select bank0
  1705  0228  1303               	bcf	3,6	;RP1=0, select bank0
  1706  0229  0843               	movf	?___fttol,w
  1707  022A  1683               	bsf	3,5	;RP0=1, select bank1
  1708  022B  1303               	bcf	3,6	;RP1=0, select bank1
  1709  022C  00B1               	movwf	readADCMeter@resultInInt^(0+128)
  1710                           
  1711                           ;adConv.c: 44: return resultInInt;
  1712  022D  0832               	movf	(readADCMeter@resultInInt+1)^(0+128),w
  1713  022E  1283               	bcf	3,5	;RP0=0, select bank0
  1714  022F  1303               	bcf	3,6	;RP1=0, select bank0
  1715  0230  00EE               	movwf	?_readADCMeter+1
  1716  0231  1683               	bsf	3,5	;RP0=1, select bank1
  1717  0232  1303               	bcf	3,6	;RP1=0, select bank1
  1718  0233  0831               	movf	readADCMeter@resultInInt^(0+128),w
  1719  0234  1283               	bcf	3,5	;RP0=0, select bank0
  1720  0235  1303               	bcf	3,6	;RP1=0, select bank0
  1721  0236  00ED               	movwf	?_readADCMeter
  1722  0237  0008               	return
  1723  0238                     __end_of_readADCMeter:	
  1724                           
  1725                           	psect	text3
  1726  0CE5                     __ptext3:	
  1727 ;; *************** function _readADCData *****************
  1728 ;; Defined at:
  1729 ;;		line 29 in file "adConv.c"
  1730 ;; Parameters:    Size  Location     Type
  1731 ;;		None
  1732 ;; Auto vars:     Size  Location     Type
  1733 ;;  ADCResult       2    2[BANK0 ] int 
  1734 ;; Return value:  Size  Location     Type
  1735 ;;                  2    0[BANK0 ] int 
  1736 ;; Registers used:
  1737 ;;		wreg
  1738 ;; Tracked objects:
  1739 ;;		On entry : 0/0
  1740 ;;		On exit  : 0/0
  1741 ;;		Unchanged: 0/0
  1742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1743 ;;      Params:         0       2       0       0       0
  1744 ;;      Locals:         0       2       0       0       0
  1745 ;;      Temps:          0       0       0       0       0
  1746 ;;      Totals:         0       4       0       0       0
  1747 ;;Total ram usage:        4 bytes
  1748 ;; Hardware stack levels used:    1
  1749 ;; Hardware stack levels required when called:    2
  1750 ;; This function calls:
  1751 ;;		Nothing
  1752 ;; This function is called by:
  1753 ;;		_main
  1754 ;;		_readADCMeter
  1755 ;; This function uses a non-reentrant model
  1756 ;;
  1757                           
  1758                           
  1759                           ;psect for function _readADCData
  1760  0CE5                     _readADCData:	
  1761                           
  1762                           ;adConv.c: 31: int ADCResult = (ADRESH<<8) + ADRESL ;
  1763                           
  1764                           ;incstack = 0
  1765                           ; Regs used in _readADCData: [wreg]
  1766  0CE5  1283               	bcf	3,5	;RP0=0, select bank0
  1767  0CE6  1303               	bcf	3,6	;RP1=0, select bank0
  1768  0CE7  081E               	movf	30,w	;volatile
  1769  0CE8  00A3               	movwf	readADCData@ADCResult+1
  1770  0CE9  1683               	bsf	3,5	;RP0=1, select bank1
  1771  0CEA  1303               	bcf	3,6	;RP1=0, select bank1
  1772  0CEB  081E               	movf	30,w	;volatile
  1773  0CEC  1283               	bcf	3,5	;RP0=0, select bank0
  1774  0CED  1303               	bcf	3,6	;RP1=0, select bank0
  1775  0CEE  00A2               	movwf	readADCData@ADCResult
  1776                           
  1777                           ;adConv.c: 32: return ADCResult;
  1778  0CEF  0823               	movf	readADCData@ADCResult+1,w
  1779  0CF0  00A1               	movwf	?_readADCData+1
  1780  0CF1  0822               	movf	readADCData@ADCResult,w
  1781  0CF2  00A0               	movwf	?_readADCData
  1782  0CF3  0008               	return
  1783  0CF4                     __end_of_readADCData:	
  1784                           
  1785                           	psect	text4
  1786  03FC                     __ptext4:	
  1787 ;; *************** function ___ftmul *****************
  1788 ;; Defined at:
  1789 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
  1790 ;; Parameters:    Size  Location     Type
  1791 ;;  f1              3    8[BANK0 ] float 
  1792 ;;  f2              3   11[BANK0 ] float 
  1793 ;; Auto vars:     Size  Location     Type
  1794 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
  1795 ;;  sign            1   23[BANK0 ] unsigned char 
  1796 ;;  cntr            1   22[BANK0 ] unsigned char 
  1797 ;;  exp             1   18[BANK0 ] unsigned char 
  1798 ;; Return value:  Size  Location     Type
  1799 ;;                  3    8[BANK0 ] float 
  1800 ;; Registers used:
  1801 ;;		wreg, status,2, status,0, pclath, cstack
  1802 ;; Tracked objects:
  1803 ;;		On entry : 0/0
  1804 ;;		On exit  : 0/0
  1805 ;;		Unchanged: 0/0
  1806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1807 ;;      Params:         0       6       0       0       0
  1808 ;;      Locals:         0       6       0       0       0
  1809 ;;      Temps:          0       4       0       0       0
  1810 ;;      Totals:         0      16       0       0       0
  1811 ;;Total ram usage:       16 bytes
  1812 ;; Hardware stack levels used:    1
  1813 ;; Hardware stack levels required when called:    3
  1814 ;; This function calls:
  1815 ;;		___ftpack
  1816 ;; This function is called by:
  1817 ;;		_readADCMeter
  1818 ;; This function uses a non-reentrant model
  1819 ;;
  1820                           
  1821                           
  1822                           ;psect for function ___ftmul
  1823  03FC                     ___ftmul:	
  1824                           
  1825                           ;incstack = 0
  1826                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  1827  03FC  1283               	bcf	3,5	;RP0=0, select bank0
  1828  03FD  1303               	bcf	3,6	;RP1=0, select bank0
  1829  03FE  0828               	movf	___ftmul@f1,w
  1830  03FF  00AE               	movwf	??___ftmul
  1831  0400  0829               	movf	___ftmul@f1+1,w
  1832  0401  00AF               	movwf	??___ftmul+1
  1833  0402  082A               	movf	___ftmul@f1+2,w
  1834  0403  00B0               	movwf	??___ftmul+2
  1835  0404  1003               	clrc
  1836  0405  0D2F               	rlf	??___ftmul+1,w
  1837  0406  0D30               	rlf	??___ftmul+2,w
  1838  0407  00B1               	movwf	??___ftmul+3
  1839  0408  0831               	movf	??___ftmul+3,w
  1840  0409  00B2               	movwf	___ftmul@exp
  1841  040A  0832               	movf	___ftmul@exp,w
  1842  040B  1D03               	btfss	3,2
  1843  040C  2C14               	goto	l2778
  1844  040D  3000               	movlw	0
  1845  040E  00A8               	movwf	?___ftmul
  1846  040F  3000               	movlw	0
  1847  0410  00A9               	movwf	?___ftmul+1
  1848  0411  3000               	movlw	0
  1849  0412  00AA               	movwf	?___ftmul+2
  1850  0413  0008               	return
  1851  0414                     l2778:	
  1852  0414  082B               	movf	___ftmul@f2,w
  1853  0415  00AE               	movwf	??___ftmul
  1854  0416  082C               	movf	___ftmul@f2+1,w
  1855  0417  00AF               	movwf	??___ftmul+1
  1856  0418  082D               	movf	___ftmul@f2+2,w
  1857  0419  00B0               	movwf	??___ftmul+2
  1858  041A  1003               	clrc
  1859  041B  0D2F               	rlf	??___ftmul+1,w
  1860  041C  0D30               	rlf	??___ftmul+2,w
  1861  041D  00B1               	movwf	??___ftmul+3
  1862  041E  0831               	movf	??___ftmul+3,w
  1863  041F  00B7               	movwf	___ftmul@sign
  1864  0420  0837               	movf	___ftmul@sign,w
  1865  0421  1D03               	btfss	3,2
  1866  0422  2C2A               	goto	l2784
  1867  0423  3000               	movlw	0
  1868  0424  00A8               	movwf	?___ftmul
  1869  0425  3000               	movlw	0
  1870  0426  00A9               	movwf	?___ftmul+1
  1871  0427  3000               	movlw	0
  1872  0428  00AA               	movwf	?___ftmul+2
  1873  0429  0008               	return
  1874  042A                     l2784:	
  1875  042A  0837               	movf	___ftmul@sign,w
  1876  042B  3E7B               	addlw	123
  1877  042C  00AE               	movwf	??___ftmul
  1878  042D  082E               	movf	??___ftmul,w
  1879  042E  07B2               	addwf	___ftmul@exp,f
  1880  042F  0828               	movf	___ftmul@f1,w
  1881  0430  00AE               	movwf	??___ftmul
  1882  0431  0829               	movf	___ftmul@f1+1,w
  1883  0432  00AF               	movwf	??___ftmul+1
  1884  0433  082A               	movf	___ftmul@f1+2,w
  1885  0434  00B0               	movwf	??___ftmul+2
  1886  0435  3010               	movlw	16
  1887  0436                     u3435:	
  1888  0436  1003               	clrc
  1889  0437  0CB0               	rrf	??___ftmul+2,f
  1890  0438  0CAF               	rrf	??___ftmul+1,f
  1891  0439  0CAE               	rrf	??___ftmul,f
  1892  043A  3EFF               	addlw	-1
  1893  043B  1D03               	skipz
  1894  043C  2C36               	goto	u3435
  1895  043D  082E               	movf	??___ftmul,w
  1896  043E  00B1               	movwf	??___ftmul+3
  1897  043F  0831               	movf	??___ftmul+3,w
  1898  0440  00B7               	movwf	___ftmul@sign
  1899  0441  082B               	movf	___ftmul@f2,w
  1900  0442  00AE               	movwf	??___ftmul
  1901  0443  082C               	movf	___ftmul@f2+1,w
  1902  0444  00AF               	movwf	??___ftmul+1
  1903  0445  082D               	movf	___ftmul@f2+2,w
  1904  0446  00B0               	movwf	??___ftmul+2
  1905  0447  3010               	movlw	16
  1906  0448                     u3445:	
  1907  0448  1003               	clrc
  1908  0449  0CB0               	rrf	??___ftmul+2,f
  1909  044A  0CAF               	rrf	??___ftmul+1,f
  1910  044B  0CAE               	rrf	??___ftmul,f
  1911  044C  3EFF               	addlw	-1
  1912  044D  1D03               	skipz
  1913  044E  2C48               	goto	u3445
  1914  044F  082E               	movf	??___ftmul,w
  1915  0450  00B1               	movwf	??___ftmul+3
  1916  0451  0831               	movf	??___ftmul+3,w
  1917  0452  06B7               	xorwf	___ftmul@sign,f
  1918  0453  3080               	movlw	128
  1919  0454  00AE               	movwf	??___ftmul
  1920  0455  082E               	movf	??___ftmul,w
  1921  0456  05B7               	andwf	___ftmul@sign,f
  1922  0457  17A9               	bsf	___ftmul@f1+1,7
  1923  0458  17AC               	bsf	___ftmul@f2+1,7
  1924  0459  30FF               	movlw	255
  1925  045A  05AB               	andwf	___ftmul@f2,f
  1926  045B  30FF               	movlw	255
  1927  045C  05AC               	andwf	___ftmul@f2+1,f
  1928  045D  3000               	movlw	0
  1929  045E  05AD               	andwf	___ftmul@f2+2,f
  1930  045F  3000               	movlw	0
  1931  0460  00B3               	movwf	___ftmul@f3_as_product
  1932  0461  3000               	movlw	0
  1933  0462  00B4               	movwf	___ftmul@f3_as_product+1
  1934  0463  3000               	movlw	0
  1935  0464  00B5               	movwf	___ftmul@f3_as_product+2
  1936  0465  3007               	movlw	7
  1937  0466  00AE               	movwf	??___ftmul
  1938  0467  082E               	movf	??___ftmul,w
  1939  0468  00B6               	movwf	___ftmul@cntr
  1940  0469                     l2796:	
  1941  0469  1C28               	btfss	___ftmul@f1,0
  1942  046A  2C79               	goto	l2800
  1943  046B  082B               	movf	___ftmul@f2,w
  1944  046C  07B3               	addwf	___ftmul@f3_as_product,f
  1945  046D  082C               	movf	___ftmul@f2+1,w
  1946  046E  1103               	clrz
  1947  046F  1803               	skipnc
  1948  0470  0A2C               	incf	___ftmul@f2+1,w
  1949  0471  1D03               	btfss	3,2
  1950  0472  07B4               	addwf	___ftmul@f3_as_product+1,f
  1951  0473  082D               	movf	___ftmul@f2+2,w
  1952  0474  1103               	clrz
  1953  0475  1803               	skipnc
  1954  0476  0A2D               	incf	___ftmul@f2+2,w
  1955  0477  1D03               	btfss	3,2
  1956  0478  07B5               	addwf	___ftmul@f3_as_product+2,f
  1957  0479                     l2800:	
  1958  0479  3001               	movlw	1
  1959  047A                     u3475:	
  1960  047A  1003               	clrc
  1961  047B  0CAA               	rrf	___ftmul@f1+2,f
  1962  047C  0CA9               	rrf	___ftmul@f1+1,f
  1963  047D  0CA8               	rrf	___ftmul@f1,f
  1964  047E  3EFF               	addlw	-1
  1965  047F  1D03               	skipz
  1966  0480  2C7A               	goto	u3475
  1967  0481  3001               	movlw	1
  1968  0482                     u3485:	
  1969  0482  1003               	clrc
  1970  0483  0DAB               	rlf	___ftmul@f2,f
  1971  0484  0DAC               	rlf	___ftmul@f2+1,f
  1972  0485  0DAD               	rlf	___ftmul@f2+2,f
  1973  0486  3EFF               	addlw	-1
  1974  0487  1D03               	skipz
  1975  0488  2C82               	goto	u3485
  1976  0489  3001               	movlw	1
  1977  048A  02B6               	subwf	___ftmul@cntr,f
  1978  048B  1D03               	btfss	3,2
  1979  048C  2C69               	goto	l2796
  1980  048D  3009               	movlw	9
  1981  048E  00AE               	movwf	??___ftmul
  1982  048F  082E               	movf	??___ftmul,w
  1983  0490  00B6               	movwf	___ftmul@cntr
  1984  0491                     l2808:	
  1985  0491  1C28               	btfss	___ftmul@f1,0
  1986  0492  2CA1               	goto	l2812
  1987  0493  082B               	movf	___ftmul@f2,w
  1988  0494  07B3               	addwf	___ftmul@f3_as_product,f
  1989  0495  082C               	movf	___ftmul@f2+1,w
  1990  0496  1103               	clrz
  1991  0497  1803               	skipnc
  1992  0498  0A2C               	incf	___ftmul@f2+1,w
  1993  0499  1D03               	btfss	3,2
  1994  049A  07B4               	addwf	___ftmul@f3_as_product+1,f
  1995  049B  082D               	movf	___ftmul@f2+2,w
  1996  049C  1103               	clrz
  1997  049D  1803               	skipnc
  1998  049E  0A2D               	incf	___ftmul@f2+2,w
  1999  049F  1D03               	btfss	3,2
  2000  04A0  07B5               	addwf	___ftmul@f3_as_product+2,f
  2001  04A1                     l2812:	
  2002  04A1  3001               	movlw	1
  2003  04A2                     u3525:	
  2004  04A2  1003               	clrc
  2005  04A3  0CAA               	rrf	___ftmul@f1+2,f
  2006  04A4  0CA9               	rrf	___ftmul@f1+1,f
  2007  04A5  0CA8               	rrf	___ftmul@f1,f
  2008  04A6  3EFF               	addlw	-1
  2009  04A7  1D03               	skipz
  2010  04A8  2CA2               	goto	u3525
  2011  04A9  3001               	movlw	1
  2012  04AA                     u3535:	
  2013  04AA  1003               	clrc
  2014  04AB  0CB5               	rrf	___ftmul@f3_as_product+2,f
  2015  04AC  0CB4               	rrf	___ftmul@f3_as_product+1,f
  2016  04AD  0CB3               	rrf	___ftmul@f3_as_product,f
  2017  04AE  3EFF               	addlw	-1
  2018  04AF  1D03               	skipz
  2019  04B0  2CAA               	goto	u3535
  2020  04B1  3001               	movlw	1
  2021  04B2  02B6               	subwf	___ftmul@cntr,f
  2022  04B3  1D03               	btfss	3,2
  2023  04B4  2C91               	goto	l2808
  2024  04B5  0833               	movf	___ftmul@f3_as_product,w
  2025  04B6  00A0               	movwf	___ftpack@arg
  2026  04B7  0834               	movf	___ftmul@f3_as_product+1,w
  2027  04B8  00A1               	movwf	___ftpack@arg+1
  2028  04B9  0835               	movf	___ftmul@f3_as_product+2,w
  2029  04BA  00A2               	movwf	___ftpack@arg+2
  2030  04BB  0832               	movf	___ftmul@exp,w
  2031  04BC  00AE               	movwf	??___ftmul
  2032  04BD  082E               	movf	??___ftmul,w
  2033  04BE  00A3               	movwf	___ftpack@exp
  2034  04BF  0837               	movf	___ftmul@sign,w
  2035  04C0  00AF               	movwf	??___ftmul+1
  2036  04C1  082F               	movf	??___ftmul+1,w
  2037  04C2  00A4               	movwf	___ftpack@sign
  2038  04C3  120A  118A  274B   	fcall	___ftpack
  2039  04C6  1283               	bcf	3,5	;RP0=0, select bank0
  2040  04C7  1303               	bcf	3,6	;RP1=0, select bank0
  2041  04C8  0820               	movf	?___ftpack,w
  2042  04C9  00A8               	movwf	?___ftmul
  2043  04CA  0821               	movf	?___ftpack+1,w
  2044  04CB  00A9               	movwf	?___ftmul+1
  2045  04CC  0822               	movf	?___ftpack+2,w
  2046  04CD  00AA               	movwf	?___ftmul+2
  2047  04CE  0008               	return
  2048  04CF                     __end_of___ftmul:	
  2049                           
  2050                           	psect	text5
  2051  0DF5                     __ptext5:	
  2052 ;; *************** function ___awtoft *****************
  2053 ;; Defined at:
  2054 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
  2055 ;; Parameters:    Size  Location     Type
  2056 ;;  c               2    8[BANK0 ] int 
  2057 ;; Auto vars:     Size  Location     Type
  2058 ;;  sign            1   13[BANK0 ] unsigned char 
  2059 ;; Return value:  Size  Location     Type
  2060 ;;                  3    8[BANK0 ] float 
  2061 ;; Registers used:
  2062 ;;		wreg, status,2, status,0, pclath, cstack
  2063 ;; Tracked objects:
  2064 ;;		On entry : 0/0
  2065 ;;		On exit  : 0/0
  2066 ;;		Unchanged: 0/0
  2067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2068 ;;      Params:         0       3       0       0       0
  2069 ;;      Locals:         0       1       0       0       0
  2070 ;;      Temps:          0       2       0       0       0
  2071 ;;      Totals:         0       6       0       0       0
  2072 ;;Total ram usage:        6 bytes
  2073 ;; Hardware stack levels used:    1
  2074 ;; Hardware stack levels required when called:    3
  2075 ;; This function calls:
  2076 ;;		___ftpack
  2077 ;; This function is called by:
  2078 ;;		_readADCMeter
  2079 ;; This function uses a non-reentrant model
  2080 ;;
  2081                           
  2082                           
  2083                           ;psect for function ___awtoft
  2084  0DF5                     ___awtoft:	
  2085                           
  2086                           ;incstack = 0
  2087                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  2088  0DF5  1283               	bcf	3,5	;RP0=0, select bank0
  2089  0DF6  1303               	bcf	3,6	;RP1=0, select bank0
  2090  0DF7  01AD               	clrf	___awtoft@sign
  2091  0DF8  1FA9               	btfss	___awtoft@c+1,7
  2092  0DF9  2E01               	goto	l2726
  2093  0DFA  09A8               	comf	___awtoft@c,f
  2094  0DFB  09A9               	comf	___awtoft@c+1,f
  2095  0DFC  0AA8               	incf	___awtoft@c,f
  2096  0DFD  1903               	skipnz
  2097  0DFE  0AA9               	incf	___awtoft@c+1,f
  2098  0DFF  01AD               	clrf	___awtoft@sign
  2099  0E00  0AAD               	incf	___awtoft@sign,f
  2100  0E01                     l2726:	
  2101  0E01  0828               	movf	___awtoft@c,w
  2102  0E02  00A0               	movwf	___ftpack@arg
  2103  0E03  0829               	movf	___awtoft@c+1,w
  2104  0E04  00A1               	movwf	___ftpack@arg+1
  2105  0E05  01A2               	clrf	___ftpack@arg+2
  2106  0E06  308E               	movlw	142
  2107  0E07  00AB               	movwf	??___awtoft
  2108  0E08  082B               	movf	??___awtoft,w
  2109  0E09  00A3               	movwf	___ftpack@exp
  2110  0E0A  082D               	movf	___awtoft@sign,w
  2111  0E0B  00AC               	movwf	??___awtoft+1
  2112  0E0C  082C               	movf	??___awtoft+1,w
  2113  0E0D  00A4               	movwf	___ftpack@sign
  2114  0E0E  120A  118A  274B   	fcall	___ftpack
  2115  0E11  1283               	bcf	3,5	;RP0=0, select bank0
  2116  0E12  1303               	bcf	3,6	;RP1=0, select bank0
  2117  0E13  0820               	movf	?___ftpack,w
  2118  0E14  00A8               	movwf	?___awtoft
  2119  0E15  0821               	movf	?___ftpack+1,w
  2120  0E16  00A9               	movwf	?___awtoft+1
  2121  0E17  0822               	movf	?___ftpack+2,w
  2122  0E18  00AA               	movwf	?___awtoft+2
  2123  0E19  0008               	return
  2124  0E1A                     __end_of___awtoft:	
  2125                           
  2126                           	psect	text6
  2127  0238                     __ptext6:	
  2128 ;; *************** function _moveDeg *****************
  2129 ;; Defined at:
  2130 ;;		line 72 in file "motor.c"
  2131 ;; Parameters:    Size  Location     Type
  2132 ;;  deg             3   77[BANK0 ] float 
  2133 ;; Auto vars:     Size  Location     Type
  2134 ;;  stepsToMove     1   10[BANK1 ] unsigned char 
  2135 ;; Return value:  Size  Location     Type
  2136 ;;                  1    wreg      void 
  2137 ;; Registers used:
  2138 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2139 ;; Tracked objects:
  2140 ;;		On entry : 0/0
  2141 ;;		On exit  : 0/0
  2142 ;;		Unchanged: 0/0
  2143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2144 ;;      Params:         0       3       0       0       0
  2145 ;;      Locals:         0       0      10       0       0
  2146 ;;      Temps:          0       0       1       0       0
  2147 ;;      Totals:         0       3      11       0       0
  2148 ;;Total ram usage:       14 bytes
  2149 ;; Hardware stack levels used:    1
  2150 ;; Hardware stack levels required when called:    6
  2151 ;; This function calls:
  2152 ;;		___ftdiv
  2153 ;;		___ftge
  2154 ;;		___ftneg
  2155 ;;		___fttol
  2156 ;;		_move
  2157 ;;		_round
  2158 ;; This function is called by:
  2159 ;;		_main
  2160 ;; This function uses a non-reentrant model
  2161 ;;
  2162                           
  2163                           
  2164                           ;psect for function _moveDeg
  2165  0238                     _moveDeg:	
  2166                           
  2167                           ;motor.c: 73: char stepsToMove;
  2168                           ;motor.c: 74: if(deg<0){
  2169                           
  2170                           ;incstack = 0
  2171                           ; Regs used in _moveDeg: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2172  0238  1283               	bcf	3,5	;RP0=0, select bank0
  2173  0239  1303               	bcf	3,6	;RP1=0, select bank0
  2174  023A  086D               	movf	moveDeg@deg,w
  2175  023B  00A0               	movwf	___ftge@ff1
  2176  023C  086E               	movf	moveDeg@deg+1,w
  2177  023D  00A1               	movwf	___ftge@ff1+1
  2178  023E  086F               	movf	moveDeg@deg+2,w
  2179  023F  00A2               	movwf	___ftge@ff1+2
  2180  0240  3000               	movlw	0
  2181  0241  00A3               	movwf	___ftge@ff2
  2182  0242  3000               	movlw	0
  2183  0243  00A4               	movwf	___ftge@ff2+1
  2184  0244  3000               	movlw	0
  2185  0245  00A5               	movwf	___ftge@ff2+2
  2186  0246  120A  158A  2741  120A  118A  	fcall	___ftge
  2187  024B  1803               	btfsc	3,0
  2188  024C  2ACD               	goto	l2870
  2189                           
  2190                           ;motor.c: 75: stepsToMove = (char) round(-deg/(7.5/2.0));
  2191  024D  1283               	bcf	3,5	;RP0=0, select bank0
  2192  024E  1303               	bcf	3,6	;RP1=0, select bank0
  2193  024F  086D               	movf	moveDeg@deg,w
  2194  0250  00B0               	movwf	___ftneg@f1
  2195  0251  086E               	movf	moveDeg@deg+1,w
  2196  0252  00B1               	movwf	___ftneg@f1+1
  2197  0253  086F               	movf	moveDeg@deg+2,w
  2198  0254  00B2               	movwf	___ftneg@f1+2
  2199  0255  120A  158A  24B1  120A  118A  	fcall	___ftneg
  2200  025A  1283               	bcf	3,5	;RP0=0, select bank0
  2201  025B  1303               	bcf	3,6	;RP1=0, select bank0
  2202  025C  0830               	movf	?___ftneg,w
  2203  025D  00B6               	movwf	___ftdiv@f1
  2204  025E  0831               	movf	?___ftneg+1,w
  2205  025F  00B7               	movwf	___ftdiv@f1+1
  2206  0260  0832               	movf	?___ftneg+2,w
  2207  0261  00B8               	movwf	___ftdiv@f1+2
  2208  0262  3000               	movlw	0
  2209  0263  00B3               	movwf	___ftdiv@f2
  2210  0264  3070               	movlw	112
  2211  0265  00B4               	movwf	___ftdiv@f2+1
  2212  0266  3040               	movlw	64
  2213  0267  00B5               	movwf	___ftdiv@f2+2
  2214  0268  120A  118A  24CF  120A  118A  	fcall	___ftdiv
  2215  026D  1283               	bcf	3,5	;RP0=0, select bank0
  2216  026E  1303               	bcf	3,6	;RP1=0, select bank0
  2217  026F  0833               	movf	?___ftdiv,w
  2218  0270  1683               	bsf	3,5	;RP0=1, select bank1
  2219  0271  1303               	bcf	3,6	;RP1=0, select bank1
  2220  0272  00A1               	movwf	_moveDeg$686^(0+128)
  2221  0273  1283               	bcf	3,5	;RP0=0, select bank0
  2222  0274  1303               	bcf	3,6	;RP1=0, select bank0
  2223  0275  0834               	movf	?___ftdiv+1,w
  2224  0276  1683               	bsf	3,5	;RP0=1, select bank1
  2225  0277  1303               	bcf	3,6	;RP1=0, select bank1
  2226  0278  00A2               	movwf	(_moveDeg$686+1)^(0+128)
  2227  0279  1283               	bcf	3,5	;RP0=0, select bank0
  2228  027A  1303               	bcf	3,6	;RP1=0, select bank0
  2229  027B  0835               	movf	?___ftdiv+2,w
  2230  027C  1683               	bsf	3,5	;RP0=1, select bank1
  2231  027D  1303               	bcf	3,6	;RP1=0, select bank1
  2232  027E  00A3               	movwf	(_moveDeg$686+2)^(0+128)
  2233                           
  2234                           ;motor.c: 75: stepsToMove = (char) round(-deg/(7.5/2.0));
  2235  027F  0821               	movf	_moveDeg$686^(0+128),w
  2236  0280  1283               	bcf	3,5	;RP0=0, select bank0
  2237  0281  1303               	bcf	3,6	;RP1=0, select bank0
  2238  0282  00E7               	movwf	round@x
  2239  0283  1683               	bsf	3,5	;RP0=1, select bank1
  2240  0284  1303               	bcf	3,6	;RP1=0, select bank1
  2241  0285  0822               	movf	(_moveDeg$686+1)^(0+128),w
  2242  0286  1283               	bcf	3,5	;RP0=0, select bank0
  2243  0287  1303               	bcf	3,6	;RP1=0, select bank0
  2244  0288  00E8               	movwf	round@x+1
  2245  0289  1683               	bsf	3,5	;RP0=1, select bank1
  2246  028A  1303               	bcf	3,6	;RP1=0, select bank1
  2247  028B  0823               	movf	(_moveDeg$686+2)^(0+128),w
  2248  028C  1283               	bcf	3,5	;RP0=0, select bank0
  2249  028D  1303               	bcf	3,6	;RP1=0, select bank0
  2250  028E  00E9               	movwf	round@x+2
  2251  028F  120A  158A  27A0  120A  118A  	fcall	_round
  2252  0294  1283               	bcf	3,5	;RP0=0, select bank0
  2253  0295  1303               	bcf	3,6	;RP1=0, select bank0
  2254  0296  0867               	movf	?_round,w
  2255  0297  1683               	bsf	3,5	;RP0=1, select bank1
  2256  0298  1303               	bcf	3,6	;RP1=0, select bank1
  2257  0299  00A4               	movwf	_moveDeg$687^(0+128)
  2258  029A  1283               	bcf	3,5	;RP0=0, select bank0
  2259  029B  1303               	bcf	3,6	;RP1=0, select bank0
  2260  029C  0868               	movf	?_round+1,w
  2261  029D  1683               	bsf	3,5	;RP0=1, select bank1
  2262  029E  1303               	bcf	3,6	;RP1=0, select bank1
  2263  029F  00A5               	movwf	(_moveDeg$687+1)^(0+128)
  2264  02A0  1283               	bcf	3,5	;RP0=0, select bank0
  2265  02A1  1303               	bcf	3,6	;RP1=0, select bank0
  2266  02A2  0869               	movf	?_round+2,w
  2267  02A3  1683               	bsf	3,5	;RP0=1, select bank1
  2268  02A4  1303               	bcf	3,6	;RP1=0, select bank1
  2269  02A5  00A6               	movwf	(_moveDeg$687+2)^(0+128)
  2270                           
  2271                           ;motor.c: 75: stepsToMove = (char) round(-deg/(7.5/2.0));
  2272  02A6  0824               	movf	_moveDeg$687^(0+128),w
  2273  02A7  1283               	bcf	3,5	;RP0=0, select bank0
  2274  02A8  1303               	bcf	3,6	;RP1=0, select bank0
  2275  02A9  00C3               	movwf	___fttol@f1
  2276  02AA  1683               	bsf	3,5	;RP0=1, select bank1
  2277  02AB  1303               	bcf	3,6	;RP1=0, select bank1
  2278  02AC  0825               	movf	(_moveDeg$687+1)^(0+128),w
  2279  02AD  1283               	bcf	3,5	;RP0=0, select bank0
  2280  02AE  1303               	bcf	3,6	;RP1=0, select bank0
  2281  02AF  00C4               	movwf	___fttol@f1+1
  2282  02B0  1683               	bsf	3,5	;RP0=1, select bank1
  2283  02B1  1303               	bcf	3,6	;RP1=0, select bank1
  2284  02B2  0826               	movf	(_moveDeg$687+2)^(0+128),w
  2285  02B3  1283               	bcf	3,5	;RP0=0, select bank0
  2286  02B4  1303               	bcf	3,6	;RP1=0, select bank0
  2287  02B5  00C5               	movwf	___fttol@f1+2
  2288  02B6  120A  118A  26BD  120A  118A  	fcall	___fttol
  2289  02BB  1283               	bcf	3,5	;RP0=0, select bank0
  2290  02BC  1303               	bcf	3,6	;RP1=0, select bank0
  2291  02BD  0843               	movf	?___fttol,w
  2292  02BE  1683               	bsf	3,5	;RP0=1, select bank1
  2293  02BF  1303               	bcf	3,6	;RP1=0, select bank1
  2294  02C0  00A0               	movwf	??_moveDeg^(0+128)
  2295  02C1  0820               	movf	??_moveDeg^(0+128),w
  2296  02C2  00AA               	movwf	moveDeg@stepsToMove^(0+128)
  2297                           
  2298                           ;motor.c: 76: move(stepsToMove,0);
  2299  02C3  1283               	bcf	3,5	;RP0=0, select bank0
  2300  02C4  1303               	bcf	3,6	;RP1=0, select bank0
  2301  02C5  01B1               	clrf	move@direction
  2302  02C6  1683               	bsf	3,5	;RP0=1, select bank1
  2303  02C7  1303               	bcf	3,6	;RP1=0, select bank1
  2304  02C8  082A               	movf	moveDeg@stepsToMove^(0+128),w
  2305  02C9  120A  118A  2626   	fcall	_move
  2306                           
  2307                           ;motor.c: 77: }
  2308  02CC  0008               	return
  2309  02CD                     l2870:	
  2310                           
  2311                           ;motor.c: 78: else{
  2312                           ;motor.c: 79: stepsToMove = (char) round(deg/(7.5/2.0));
  2313  02CD  1283               	bcf	3,5	;RP0=0, select bank0
  2314  02CE  1303               	bcf	3,6	;RP1=0, select bank0
  2315  02CF  086D               	movf	moveDeg@deg,w
  2316  02D0  00B6               	movwf	___ftdiv@f1
  2317  02D1  086E               	movf	moveDeg@deg+1,w
  2318  02D2  00B7               	movwf	___ftdiv@f1+1
  2319  02D3  086F               	movf	moveDeg@deg+2,w
  2320  02D4  00B8               	movwf	___ftdiv@f1+2
  2321  02D5  3000               	movlw	0
  2322  02D6  00B3               	movwf	___ftdiv@f2
  2323  02D7  3070               	movlw	112
  2324  02D8  00B4               	movwf	___ftdiv@f2+1
  2325  02D9  3040               	movlw	64
  2326  02DA  00B5               	movwf	___ftdiv@f2+2
  2327  02DB  120A  118A  24CF  120A  118A  	fcall	___ftdiv
  2328  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  2329  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  2330  02E2  0833               	movf	?___ftdiv,w
  2331  02E3  00E7               	movwf	round@x
  2332  02E4  0834               	movf	?___ftdiv+1,w
  2333  02E5  00E8               	movwf	round@x+1
  2334  02E6  0835               	movf	?___ftdiv+2,w
  2335  02E7  00E9               	movwf	round@x+2
  2336  02E8  120A  158A  27A0  120A  118A  	fcall	_round
  2337  02ED  1283               	bcf	3,5	;RP0=0, select bank0
  2338  02EE  1303               	bcf	3,6	;RP1=0, select bank0
  2339  02EF  0867               	movf	?_round,w
  2340  02F0  1683               	bsf	3,5	;RP0=1, select bank1
  2341  02F1  1303               	bcf	3,6	;RP1=0, select bank1
  2342  02F2  00A7               	movwf	_moveDeg$688^(0+128)
  2343  02F3  1283               	bcf	3,5	;RP0=0, select bank0
  2344  02F4  1303               	bcf	3,6	;RP1=0, select bank0
  2345  02F5  0868               	movf	?_round+1,w
  2346  02F6  1683               	bsf	3,5	;RP0=1, select bank1
  2347  02F7  1303               	bcf	3,6	;RP1=0, select bank1
  2348  02F8  00A8               	movwf	(_moveDeg$688+1)^(0+128)
  2349  02F9  1283               	bcf	3,5	;RP0=0, select bank0
  2350  02FA  1303               	bcf	3,6	;RP1=0, select bank0
  2351  02FB  0869               	movf	?_round+2,w
  2352  02FC  1683               	bsf	3,5	;RP0=1, select bank1
  2353  02FD  1303               	bcf	3,6	;RP1=0, select bank1
  2354  02FE  00A9               	movwf	(_moveDeg$688+2)^(0+128)
  2355                           
  2356                           ;motor.c: 78: else{
  2357                           ;motor.c: 79: stepsToMove = (char) round(deg/(7.5/2.0));
  2358  02FF  0827               	movf	_moveDeg$688^(0+128),w
  2359  0300  1283               	bcf	3,5	;RP0=0, select bank0
  2360  0301  1303               	bcf	3,6	;RP1=0, select bank0
  2361  0302  00C3               	movwf	___fttol@f1
  2362  0303  1683               	bsf	3,5	;RP0=1, select bank1
  2363  0304  1303               	bcf	3,6	;RP1=0, select bank1
  2364  0305  0828               	movf	(_moveDeg$688+1)^(0+128),w
  2365  0306  1283               	bcf	3,5	;RP0=0, select bank0
  2366  0307  1303               	bcf	3,6	;RP1=0, select bank0
  2367  0308  00C4               	movwf	___fttol@f1+1
  2368  0309  1683               	bsf	3,5	;RP0=1, select bank1
  2369  030A  1303               	bcf	3,6	;RP1=0, select bank1
  2370  030B  0829               	movf	(_moveDeg$688+2)^(0+128),w
  2371  030C  1283               	bcf	3,5	;RP0=0, select bank0
  2372  030D  1303               	bcf	3,6	;RP1=0, select bank0
  2373  030E  00C5               	movwf	___fttol@f1+2
  2374  030F  120A  118A  26BD  120A  118A  	fcall	___fttol
  2375  0314  1283               	bcf	3,5	;RP0=0, select bank0
  2376  0315  1303               	bcf	3,6	;RP1=0, select bank0
  2377  0316  0843               	movf	?___fttol,w
  2378  0317  1683               	bsf	3,5	;RP0=1, select bank1
  2379  0318  1303               	bcf	3,6	;RP1=0, select bank1
  2380  0319  00A0               	movwf	??_moveDeg^(0+128)
  2381  031A  0820               	movf	??_moveDeg^(0+128),w
  2382  031B  00AA               	movwf	moveDeg@stepsToMove^(0+128)
  2383                           
  2384                           ;motor.c: 80: move(stepsToMove,1);
  2385  031C  1283               	bcf	3,5	;RP0=0, select bank0
  2386  031D  1303               	bcf	3,6	;RP1=0, select bank0
  2387  031E  01B1               	clrf	move@direction
  2388  031F  0AB1               	incf	move@direction,f
  2389  0320  1683               	bsf	3,5	;RP0=1, select bank1
  2390  0321  1303               	bcf	3,6	;RP1=0, select bank1
  2391  0322  082A               	movf	moveDeg@stepsToMove^(0+128),w
  2392  0323  120A  118A  2626   	fcall	_move
  2393  0326  0008               	return
  2394  0327                     __end_of_moveDeg:	
  2395                           
  2396                           	psect	text7
  2397  0FA0                     __ptext7:	
  2398 ;; *************** function _round *****************
  2399 ;; Defined at:
  2400 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\round.c"
  2401 ;; Parameters:    Size  Location     Type
  2402 ;;  x               3   71[BANK0 ] void 
  2403 ;; Auto vars:     Size  Location     Type
  2404 ;;  f               3   74[BANK0 ] void 
  2405 ;; Return value:  Size  Location     Type
  2406 ;;                  3   71[BANK0 ] void 
  2407 ;; Registers used:
  2408 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2409 ;; Tracked objects:
  2410 ;;		On entry : 0/0
  2411 ;;		On exit  : 0/0
  2412 ;;		Unchanged: 0/0
  2413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2414 ;;      Params:         0       3       0       0       0
  2415 ;;      Locals:         0       3       0       0       0
  2416 ;;      Temps:          0       0       0       0       0
  2417 ;;      Totals:         0       6       0       0       0
  2418 ;;Total ram usage:        6 bytes
  2419 ;; Hardware stack levels used:    1
  2420 ;; Hardware stack levels required when called:    5
  2421 ;; This function calls:
  2422 ;;		___ftadd
  2423 ;;		___ftneg
  2424 ;;		_trunc
  2425 ;; This function is called by:
  2426 ;;		_moveDeg
  2427 ;;		_readADCMeter
  2428 ;; This function uses a non-reentrant model
  2429 ;;
  2430                           
  2431                           
  2432                           ;psect for function _round
  2433  0FA0                     _round:	
  2434                           
  2435                           ;incstack = 0
  2436                           ; Regs used in _round: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2437  0FA0  1283               	bcf	3,5	;RP0=0, select bank0
  2438  0FA1  1303               	bcf	3,6	;RP1=0, select bank0
  2439  0FA2  0867               	movf	round@x,w
  2440  0FA3  00DA               	movwf	___ftadd@f1
  2441  0FA4  0868               	movf	round@x+1,w
  2442  0FA5  00DB               	movwf	___ftadd@f1+1
  2443  0FA6  0869               	movf	round@x+2,w
  2444  0FA7  00DC               	movwf	___ftadd@f1+2
  2445  0FA8  0867               	movf	round@x,w
  2446  0FA9  00D1               	movwf	trunc@x
  2447  0FAA  0868               	movf	round@x+1,w
  2448  0FAB  00D2               	movwf	trunc@x+1
  2449  0FAC  0869               	movf	round@x+2,w
  2450  0FAD  00D3               	movwf	trunc@x+2
  2451  0FAE  120A  158A  26A9  120A  158A  	fcall	_trunc
  2452  0FB3  1283               	bcf	3,5	;RP0=0, select bank0
  2453  0FB4  1303               	bcf	3,6	;RP1=0, select bank0
  2454  0FB5  0851               	movf	?_trunc,w
  2455  0FB6  00B0               	movwf	___ftneg@f1
  2456  0FB7  0852               	movf	?_trunc+1,w
  2457  0FB8  00B1               	movwf	___ftneg@f1+1
  2458  0FB9  0853               	movf	?_trunc+2,w
  2459  0FBA  00B2               	movwf	___ftneg@f1+2
  2460  0FBB  120A  158A  24B1  120A  158A  	fcall	___ftneg
  2461  0FC0  1283               	bcf	3,5	;RP0=0, select bank0
  2462  0FC1  1303               	bcf	3,6	;RP1=0, select bank0
  2463  0FC2  0830               	movf	?___ftneg,w
  2464  0FC3  00DD               	movwf	___ftadd@f2
  2465  0FC4  0831               	movf	?___ftneg+1,w
  2466  0FC5  00DE               	movwf	___ftadd@f2+1
  2467  0FC6  0832               	movf	?___ftneg+2,w
  2468  0FC7  00DF               	movwf	___ftadd@f2+2
  2469  0FC8  120A  118A  2035  120A  158A  	fcall	___ftadd
  2470  0FCD  1283               	bcf	3,5	;RP0=0, select bank0
  2471  0FCE  1303               	bcf	3,6	;RP1=0, select bank0
  2472  0FCF  085A               	movf	?___ftadd,w
  2473  0FD0  00EA               	movwf	round@f
  2474  0FD1  085B               	movf	?___ftadd+1,w
  2475  0FD2  00EB               	movwf	round@f+1
  2476  0FD3  085C               	movf	?___ftadd+2,w
  2477  0FD4  00EC               	movwf	round@f+2
  2478  0FD5  086A               	movf	round@f,w
  2479  0FD6  00DA               	movwf	___ftadd@f1
  2480  0FD7  086B               	movf	round@f+1,w
  2481  0FD8  00DB               	movwf	___ftadd@f1+1
  2482  0FD9  086C               	movf	round@f+2,w
  2483  0FDA  00DC               	movwf	___ftadd@f1+2
  2484  0FDB  0867               	movf	round@x,w
  2485  0FDC  00DD               	movwf	___ftadd@f2
  2486  0FDD  0868               	movf	round@x+1,w
  2487  0FDE  00DE               	movwf	___ftadd@f2+1
  2488  0FDF  0869               	movf	round@x+2,w
  2489  0FE0  00DF               	movwf	___ftadd@f2+2
  2490  0FE1  120A  118A  2035  120A  158A  	fcall	___ftadd
  2491  0FE6  1283               	bcf	3,5	;RP0=0, select bank0
  2492  0FE7  1303               	bcf	3,6	;RP1=0, select bank0
  2493  0FE8  085A               	movf	?___ftadd,w
  2494  0FE9  00E7               	movwf	round@x
  2495  0FEA  085B               	movf	?___ftadd+1,w
  2496  0FEB  00E8               	movwf	round@x+1
  2497  0FEC  085C               	movf	?___ftadd+2,w
  2498  0FED  00E9               	movwf	round@x+2
  2499  0FEE  0867               	movf	round@x,w
  2500  0FEF  00D1               	movwf	trunc@x
  2501  0FF0  0868               	movf	round@x+1,w
  2502  0FF1  00D2               	movwf	trunc@x+1
  2503  0FF2  0869               	movf	round@x+2,w
  2504  0FF3  00D3               	movwf	trunc@x+2
  2505  0FF4  120A  158A  26A9   	fcall	_trunc
  2506  0FF7  1283               	bcf	3,5	;RP0=0, select bank0
  2507  0FF8  1303               	bcf	3,6	;RP1=0, select bank0
  2508  0FF9  0851               	movf	?_trunc,w
  2509  0FFA  00E7               	movwf	?_round
  2510  0FFB  0852               	movf	?_trunc+1,w
  2511  0FFC  00E8               	movwf	?_round+1
  2512  0FFD  0853               	movf	?_trunc+2,w
  2513  0FFE  00E9               	movwf	?_round+2
  2514  0FFF  0008               	return
  2515  1000                     __end_of_round:	
  2516                           
  2517                           	psect	text8
  2518  0EA9                     __ptext8:	
  2519 ;; *************** function _trunc *****************
  2520 ;; Defined at:
  2521 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\trunc.c"
  2522 ;; Parameters:    Size  Location     Type
  2523 ;;  x               3   49[BANK0 ] void 
  2524 ;; Auto vars:     Size  Location     Type
  2525 ;;  i               3   53[BANK0 ] void 
  2526 ;;  expon           2   56[BANK0 ] int 
  2527 ;; Return value:  Size  Location     Type
  2528 ;;                  3   49[BANK0 ] int 
  2529 ;; Registers used:
  2530 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2531 ;; Tracked objects:
  2532 ;;		On entry : 0/0
  2533 ;;		On exit  : 0/0
  2534 ;;		Unchanged: 0/0
  2535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2536 ;;      Params:         0       3       0       0       0
  2537 ;;      Locals:         0       5       0       0       0
  2538 ;;      Temps:          0       1       0       0       0
  2539 ;;      Totals:         0       9       0       0       0
  2540 ;;Total ram usage:        9 bytes
  2541 ;; Hardware stack levels used:    1
  2542 ;; Hardware stack levels required when called:    4
  2543 ;; This function calls:
  2544 ;;		___altoft
  2545 ;;		___fttol
  2546 ;;		_frexp
  2547 ;; This function is called by:
  2548 ;;		_round
  2549 ;; This function uses a non-reentrant model
  2550 ;;
  2551                           
  2552                           
  2553                           ;psect for function _trunc
  2554  0EA9                     _trunc:	
  2555                           
  2556                           ;incstack = 0
  2557                           ; Regs used in _trunc: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2558  0EA9  1283               	bcf	3,5	;RP0=0, select bank0
  2559  0EAA  1303               	bcf	3,6	;RP1=0, select bank0
  2560  0EAB  0851               	movf	trunc@x,w
  2561  0EAC  00A0               	movwf	frexp@value
  2562  0EAD  0852               	movf	trunc@x+1,w
  2563  0EAE  00A1               	movwf	frexp@value+1
  2564  0EAF  0853               	movf	trunc@x+2,w
  2565  0EB0  00A2               	movwf	frexp@value+2
  2566  0EB1  3058               	movlw	(low (trunc@expon| 0))& (0+255)
  2567  0EB2  00D4               	movwf	??_trunc
  2568  0EB3  0854               	movf	??_trunc,w
  2569  0EB4  00A3               	movwf	frexp@eptr
  2570  0EB5  120A  158A  266D  120A  158A  	fcall	_frexp
  2571  0EBA  1283               	bcf	3,5	;RP0=0, select bank0
  2572  0EBB  1303               	bcf	3,6	;RP1=0, select bank0
  2573  0EBC  1FD9               	btfss	trunc@expon+1,7
  2574  0EBD  2EC5               	goto	l2582
  2575  0EBE  3000               	movlw	0
  2576  0EBF  00D1               	movwf	?_trunc
  2577  0EC0  3000               	movlw	0
  2578  0EC1  00D2               	movwf	?_trunc+1
  2579  0EC2  3000               	movlw	0
  2580  0EC3  00D3               	movwf	?_trunc+2
  2581  0EC4  0008               	return
  2582  0EC5                     l2582:	
  2583  0EC5  3000               	movlw	0
  2584  0EC6  0259               	subwf	trunc@expon+1,w
  2585  0EC7  3015               	movlw	21
  2586  0EC8  1903               	skipnz
  2587  0EC9  0258               	subwf	trunc@expon,w
  2588  0ECA  1803               	btfsc	3,0
  2589  0ECB  0008               	return
  2590  0ECC  0851               	movf	trunc@x,w
  2591  0ECD  00C3               	movwf	___fttol@f1
  2592  0ECE  0852               	movf	trunc@x+1,w
  2593  0ECF  00C4               	movwf	___fttol@f1+1
  2594  0ED0  0853               	movf	trunc@x+2,w
  2595  0ED1  00C5               	movwf	___fttol@f1+2
  2596  0ED2  120A  118A  26BD  120A  158A  	fcall	___fttol
  2597  0ED7  1283               	bcf	3,5	;RP0=0, select bank0
  2598  0ED8  1303               	bcf	3,6	;RP1=0, select bank0
  2599  0ED9  0846               	movf	?___fttol+3,w
  2600  0EDA  00AB               	movwf	___altoft@c+3
  2601  0EDB  0845               	movf	?___fttol+2,w
  2602  0EDC  00AA               	movwf	___altoft@c+2
  2603  0EDD  0844               	movf	?___fttol+1,w
  2604  0EDE  00A9               	movwf	___altoft@c+1
  2605  0EDF  0843               	movf	?___fttol,w
  2606  0EE0  00A8               	movwf	___altoft@c
  2607  0EE1  120A  118A  27B9   	fcall	___altoft
  2608  0EE4  1283               	bcf	3,5	;RP0=0, select bank0
  2609  0EE5  1303               	bcf	3,6	;RP1=0, select bank0
  2610  0EE6  0828               	movf	?___altoft,w
  2611  0EE7  00D5               	movwf	trunc@i
  2612  0EE8  0829               	movf	?___altoft+1,w
  2613  0EE9  00D6               	movwf	trunc@i+1
  2614  0EEA  082A               	movf	?___altoft+2,w
  2615  0EEB  00D7               	movwf	trunc@i+2
  2616  0EEC  0855               	movf	trunc@i,w
  2617  0EED  00D1               	movwf	?_trunc
  2618  0EEE  0856               	movf	trunc@i+1,w
  2619  0EEF  00D2               	movwf	?_trunc+1
  2620  0EF0  0857               	movf	trunc@i+2,w
  2621  0EF1  00D3               	movwf	?_trunc+2
  2622  0EF2  0008               	return
  2623  0EF3                     __end_of_trunc:	
  2624                           
  2625                           	psect	text9
  2626  0E6D                     __ptext9:	
  2627 ;; *************** function _frexp *****************
  2628 ;; Defined at:
  2629 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
  2630 ;; Parameters:    Size  Location     Type
  2631 ;;  value           3    0[BANK0 ] int 
  2632 ;;  eptr            1    3[BANK0 ] PTR int 
  2633 ;;		 -> trunc@expon(2), 
  2634 ;; Auto vars:     Size  Location     Type
  2635 ;;		None
  2636 ;; Return value:  Size  Location     Type
  2637 ;;                  3    0[BANK0 ] PTR int 
  2638 ;; Registers used:
  2639 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2640 ;; Tracked objects:
  2641 ;;		On entry : 0/0
  2642 ;;		On exit  : 0/0
  2643 ;;		Unchanged: 0/0
  2644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2645 ;;      Params:         0       4       0       0       0
  2646 ;;      Locals:         0       0       0       0       0
  2647 ;;      Temps:          0       2       0       0       0
  2648 ;;      Totals:         0       6       0       0       0
  2649 ;;Total ram usage:        6 bytes
  2650 ;; Hardware stack levels used:    1
  2651 ;; Hardware stack levels required when called:    2
  2652 ;; This function calls:
  2653 ;;		Nothing
  2654 ;; This function is called by:
  2655 ;;		_trunc
  2656 ;; This function uses a non-reentrant model
  2657 ;;
  2658                           
  2659                           
  2660                           ;psect for function _frexp
  2661  0E6D                     _frexp:	
  2662                           
  2663                           ;incstack = 0
  2664                           ; Regs used in _frexp: [wreg-fsr0h+status,2+status,0+btemp+1]
  2665  0E6D  1283               	bcf	3,5	;RP0=0, select bank0
  2666  0E6E  1303               	bcf	3,6	;RP1=0, select bank0
  2667  0E6F  0822               	movf	frexp@value+2,w
  2668  0E70  0421               	iorwf	frexp@value+1,w
  2669  0E71  0420               	iorwf	frexp@value,w
  2670  0E72  1D03               	skipz
  2671  0E73  2E7B               	goto	l2426
  2672  0E74  0823               	movf	frexp@eptr,w
  2673  0E75  0084               	movwf	4
  2674  0E76  1383               	bcf	3,7	;select IRP bank0
  2675  0E77  0180               	clrf	0
  2676  0E78  0A84               	incf	4,f
  2677  0E79  0180               	clrf	0
  2678                           
  2679                           ;	Return value of _frexp is never used
  2680  0E7A  0008               	return
  2681  0E7B                     l2426:	
  2682  0E7B  0822               	movf	frexp@value+2,w
  2683  0E7C  397F               	andlw	127
  2684  0E7D  00A4               	movwf	??_frexp
  2685  0E7E  01A5               	clrf	??_frexp+1
  2686  0E7F  1003               	clrc
  2687  0E80  0DA4               	rlf	??_frexp,f
  2688  0E81  0DA5               	rlf	??_frexp+1,f
  2689  0E82  0823               	movf	frexp@eptr,w
  2690  0E83  0084               	movwf	4
  2691  0E84  0824               	movf	??_frexp,w
  2692  0E85  1383               	bcf	3,7	;select IRP bank0
  2693  0E86  0080               	movwf	0
  2694  0E87  0A84               	incf	4,f
  2695  0E88  0825               	movf	??_frexp+1,w
  2696  0E89  0080               	movwf	0
  2697  0E8A  0D21               	rlf	frexp@value+1,w
  2698  0E8B  0D21               	rlf	frexp@value+1,w
  2699  0E8C  3901               	andlw	1
  2700  0E8D  00A4               	movwf	??_frexp
  2701  0E8E  01A5               	clrf	??_frexp+1
  2702  0E8F  0823               	movf	frexp@eptr,w
  2703  0E90  0084               	movwf	4
  2704  0E91  0824               	movf	??_frexp,w
  2705  0E92  0480               	iorwf	0,f
  2706  0E93  0A84               	incf	4,f
  2707  0E94  0825               	movf	??_frexp+1,w
  2708  0E95  0480               	iorwf	0,f
  2709  0E96  0823               	movf	frexp@eptr,w
  2710  0E97  0084               	movwf	4
  2711  0E98  3082               	movlw	130
  2712  0E99  0780               	addwf	0,f
  2713  0E9A  0F84               	incfsz	4,f
  2714  0E9B  0800               	movf	0,w
  2715  0E9C  1803               	skipnc
  2716  0E9D  0A00               	incf	0,w
  2717  0E9E  00FF               	movwf	127
  2718  0E9F  30FF               	movlw	255
  2719  0EA0  077F               	addwf	127,w
  2720  0EA1  0080               	movwf	0
  2721  0EA2  0384               	decf	4,f
  2722  0EA3  0822               	movf	frexp@value+2,w
  2723  0EA4  3980               	andlw	-128
  2724  0EA5  383F               	iorlw	63
  2725  0EA6  00A2               	movwf	frexp@value+2
  2726  0EA7  13A1               	bcf	frexp@value+1,7
  2727  0EA8  0008               	return
  2728  0EA9                     __end_of_frexp:	
  2729                           ;	Return value of _frexp is never used
  2730                           
  2731                           
  2732                           	psect	text10
  2733  06BD                     __ptext10:	
  2734 ;; *************** function ___fttol *****************
  2735 ;; Defined at:
  2736 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  2737 ;; Parameters:    Size  Location     Type
  2738 ;;  f1              3   35[BANK0 ] float 
  2739 ;; Auto vars:     Size  Location     Type
  2740 ;;  lval            4   44[BANK0 ] unsigned long 
  2741 ;;  exp1            1   48[BANK0 ] unsigned char 
  2742 ;;  sign1           1   43[BANK0 ] unsigned char 
  2743 ;; Return value:  Size  Location     Type
  2744 ;;                  4   35[BANK0 ] long 
  2745 ;; Registers used:
  2746 ;;		wreg, status,2, status,0
  2747 ;; Tracked objects:
  2748 ;;		On entry : 0/0
  2749 ;;		On exit  : 0/0
  2750 ;;		Unchanged: 0/0
  2751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2752 ;;      Params:         0       4       0       0       0
  2753 ;;      Locals:         0       6       0       0       0
  2754 ;;      Temps:          0       4       0       0       0
  2755 ;;      Totals:         0      14       0       0       0
  2756 ;;Total ram usage:       14 bytes
  2757 ;; Hardware stack levels used:    1
  2758 ;; Hardware stack levels required when called:    2
  2759 ;; This function calls:
  2760 ;;		Nothing
  2761 ;; This function is called by:
  2762 ;;		_moveDeg
  2763 ;;		_readADCMeter
  2764 ;;		_trunc
  2765 ;; This function uses a non-reentrant model
  2766 ;;
  2767                           
  2768                           
  2769                           ;psect for function ___fttol
  2770  06BD                     ___fttol:	
  2771                           
  2772                           ;incstack = 0
  2773                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  2774  06BD  1283               	bcf	3,5	;RP0=0, select bank0
  2775  06BE  1303               	bcf	3,6	;RP1=0, select bank0
  2776  06BF  0843               	movf	___fttol@f1,w
  2777  06C0  00C7               	movwf	??___fttol
  2778  06C1  0844               	movf	___fttol@f1+1,w
  2779  06C2  00C8               	movwf	??___fttol+1
  2780  06C3  0845               	movf	___fttol@f1+2,w
  2781  06C4  00C9               	movwf	??___fttol+2
  2782  06C5  1003               	clrc
  2783  06C6  0D48               	rlf	??___fttol+1,w
  2784  06C7  0D49               	rlf	??___fttol+2,w
  2785  06C8  00CA               	movwf	??___fttol+3
  2786  06C9  084A               	movf	??___fttol+3,w
  2787  06CA  00D0               	movwf	___fttol@exp1
  2788  06CB  0850               	movf	___fttol@exp1,w
  2789  06CC  1D03               	btfss	3,2
  2790  06CD  2ED7               	goto	l1682
  2791  06CE  3000               	movlw	0
  2792  06CF  00C6               	movwf	?___fttol+3
  2793  06D0  3000               	movlw	0
  2794  06D1  00C5               	movwf	?___fttol+2
  2795  06D2  3000               	movlw	0
  2796  06D3  00C4               	movwf	?___fttol+1
  2797  06D4  3000               	movlw	0
  2798  06D5  00C3               	movwf	?___fttol
  2799  06D6  0008               	return
  2800  06D7                     l1682:	
  2801  06D7  0843               	movf	___fttol@f1,w
  2802  06D8  00C7               	movwf	??___fttol
  2803  06D9  0844               	movf	___fttol@f1+1,w
  2804  06DA  00C8               	movwf	??___fttol+1
  2805  06DB  0845               	movf	___fttol@f1+2,w
  2806  06DC  00C9               	movwf	??___fttol+2
  2807  06DD  3017               	movlw	23
  2808  06DE                     u1525:	
  2809  06DE  1003               	clrc
  2810  06DF  0CC9               	rrf	??___fttol+2,f
  2811  06E0  0CC8               	rrf	??___fttol+1,f
  2812  06E1  0CC7               	rrf	??___fttol,f
  2813  06E2  3EFF               	addlw	-1
  2814  06E3  1D03               	skipz
  2815  06E4  2EDE               	goto	u1525
  2816  06E5  0847               	movf	??___fttol,w
  2817  06E6  00CA               	movwf	??___fttol+3
  2818  06E7  084A               	movf	??___fttol+3,w
  2819  06E8  00CB               	movwf	___fttol@sign1
  2820  06E9  17C4               	bsf	___fttol@f1+1,7
  2821  06EA  30FF               	movlw	255
  2822  06EB  05C3               	andwf	___fttol@f1,f
  2823  06EC  30FF               	movlw	255
  2824  06ED  05C4               	andwf	___fttol@f1+1,f
  2825  06EE  3000               	movlw	0
  2826  06EF  05C5               	andwf	___fttol@f1+2,f
  2827  06F0  0843               	movf	___fttol@f1,w
  2828  06F1  00CC               	movwf	___fttol@lval
  2829  06F2  0844               	movf	___fttol@f1+1,w
  2830  06F3  00CD               	movwf	___fttol@lval+1
  2831  06F4  0845               	movf	___fttol@f1+2,w
  2832  06F5  00CE               	movwf	___fttol@lval+2
  2833  06F6  01CF               	clrf	___fttol@lval+3
  2834  06F7  308E               	movlw	142
  2835  06F8  02D0               	subwf	___fttol@exp1,f
  2836  06F9  1FD0               	btfss	___fttol@exp1,7
  2837  06FA  2F19               	goto	l1702
  2838  06FB  0850               	movf	___fttol@exp1,w
  2839  06FC  3A80               	xorlw	128
  2840  06FD  3E8F               	addlw	143
  2841  06FE  1803               	skipnc
  2842  06FF  2F09               	goto	l1700
  2843  0700  3000               	movlw	0
  2844  0701  00C6               	movwf	?___fttol+3
  2845  0702  3000               	movlw	0
  2846  0703  00C5               	movwf	?___fttol+2
  2847  0704  3000               	movlw	0
  2848  0705  00C4               	movwf	?___fttol+1
  2849  0706  3000               	movlw	0
  2850  0707  00C3               	movwf	?___fttol
  2851  0708  0008               	return
  2852  0709                     l1700:	
  2853  0709  3001               	movlw	1
  2854  070A                     u1555:	
  2855  070A  1003               	clrc
  2856  070B  0CCF               	rrf	___fttol@lval+3,f
  2857  070C  0CCE               	rrf	___fttol@lval+2,f
  2858  070D  0CCD               	rrf	___fttol@lval+1,f
  2859  070E  0CCC               	rrf	___fttol@lval,f
  2860  070F  3EFF               	addlw	-1
  2861  0710  1D03               	skipz
  2862  0711  2F0A               	goto	u1555
  2863  0712  3001               	movlw	1
  2864  0713  00C7               	movwf	??___fttol
  2865  0714  0847               	movf	??___fttol,w
  2866  0715  07D0               	addwf	___fttol@exp1,f
  2867  0716  1903               	btfsc	3,2
  2868  0717  2F34               	goto	l1710
  2869  0718  2F09               	goto	l1700
  2870  0719                     l1702:	
  2871  0719  3018               	movlw	24
  2872  071A  0250               	subwf	___fttol@exp1,w
  2873  071B  1C03               	skipc
  2874  071C  2F31               	goto	l676
  2875  071D  3000               	movlw	0
  2876  071E  00C6               	movwf	?___fttol+3
  2877  071F  3000               	movlw	0
  2878  0720  00C5               	movwf	?___fttol+2
  2879  0721  3000               	movlw	0
  2880  0722  00C4               	movwf	?___fttol+1
  2881  0723  3000               	movlw	0
  2882  0724  00C3               	movwf	?___fttol
  2883  0725  0008               	return
  2884  0726                     l1708:	
  2885  0726  3001               	movlw	1
  2886  0727  00C7               	movwf	??___fttol
  2887  0728                     u1585:	
  2888  0728  1003               	clrc
  2889  0729  0DCC               	rlf	___fttol@lval,f
  2890  072A  0DCD               	rlf	___fttol@lval+1,f
  2891  072B  0DCE               	rlf	___fttol@lval+2,f
  2892  072C  0DCF               	rlf	___fttol@lval+3,f
  2893  072D  0BC7               	decfsz	??___fttol,f
  2894  072E  2F28               	goto	u1585
  2895  072F  3001               	movlw	1
  2896  0730  02D0               	subwf	___fttol@exp1,f
  2897  0731                     l676:	
  2898  0731  0850               	movf	___fttol@exp1,w
  2899  0732  1D03               	btfss	3,2
  2900  0733  2F26               	goto	l1708
  2901  0734                     l1710:	
  2902  0734  084B               	movf	___fttol@sign1,w
  2903  0735  1903               	btfsc	3,2
  2904  0736  2F42               	goto	l1714
  2905  0737  09CC               	comf	___fttol@lval,f
  2906  0738  09CD               	comf	___fttol@lval+1,f
  2907  0739  09CE               	comf	___fttol@lval+2,f
  2908  073A  09CF               	comf	___fttol@lval+3,f
  2909  073B  0ACC               	incf	___fttol@lval,f
  2910  073C  1903               	skipnz
  2911  073D  0ACD               	incf	___fttol@lval+1,f
  2912  073E  1903               	skipnz
  2913  073F  0ACE               	incf	___fttol@lval+2,f
  2914  0740  1903               	skipnz
  2915  0741  0ACF               	incf	___fttol@lval+3,f
  2916  0742                     l1714:	
  2917  0742  084F               	movf	___fttol@lval+3,w
  2918  0743  00C6               	movwf	?___fttol+3
  2919  0744  084E               	movf	___fttol@lval+2,w
  2920  0745  00C5               	movwf	?___fttol+2
  2921  0746  084D               	movf	___fttol@lval+1,w
  2922  0747  00C4               	movwf	?___fttol+1
  2923  0748  084C               	movf	___fttol@lval,w
  2924  0749  00C3               	movwf	?___fttol
  2925  074A  0008               	return
  2926  074B                     __end_of___fttol:	
  2927                           
  2928                           	psect	text11
  2929  07B9                     __ptext11:	
  2930 ;; *************** function ___altoft *****************
  2931 ;; Defined at:
  2932 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
  2933 ;; Parameters:    Size  Location     Type
  2934 ;;  c               4    8[BANK0 ] long 
  2935 ;; Auto vars:     Size  Location     Type
  2936 ;;  sign            1   15[BANK0 ] unsigned char 
  2937 ;;  exp             1   14[BANK0 ] unsigned char 
  2938 ;; Return value:  Size  Location     Type
  2939 ;;                  3    8[BANK0 ] float 
  2940 ;; Registers used:
  2941 ;;		wreg, status,2, status,0, pclath, cstack
  2942 ;; Tracked objects:
  2943 ;;		On entry : 0/0
  2944 ;;		On exit  : 0/0
  2945 ;;		Unchanged: 0/0
  2946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2947 ;;      Params:         0       4       0       0       0
  2948 ;;      Locals:         0       2       0       0       0
  2949 ;;      Temps:          0       2       0       0       0
  2950 ;;      Totals:         0       8       0       0       0
  2951 ;;Total ram usage:        8 bytes
  2952 ;; Hardware stack levels used:    1
  2953 ;; Hardware stack levels required when called:    3
  2954 ;; This function calls:
  2955 ;;		___ftpack
  2956 ;; This function is called by:
  2957 ;;		_trunc
  2958 ;; This function uses a non-reentrant model
  2959 ;;
  2960                           
  2961                           
  2962                           ;psect for function ___altoft
  2963  07B9                     ___altoft:	
  2964                           
  2965                           ;incstack = 0
  2966                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  2967  07B9  1283               	bcf	3,5	;RP0=0, select bank0
  2968  07BA  1303               	bcf	3,6	;RP1=0, select bank0
  2969  07BB  01AF               	clrf	___altoft@sign
  2970  07BC  308E               	movlw	142
  2971  07BD  00AC               	movwf	??___altoft
  2972  07BE  082C               	movf	??___altoft,w
  2973  07BF  00AE               	movwf	___altoft@exp
  2974  07C0  1FAB               	btfss	___altoft@c+3,7
  2975  07C1  2FCF               	goto	l2414
  2976  07C2  09A8               	comf	___altoft@c,f
  2977  07C3  09A9               	comf	___altoft@c+1,f
  2978  07C4  09AA               	comf	___altoft@c+2,f
  2979  07C5  09AB               	comf	___altoft@c+3,f
  2980  07C6  0AA8               	incf	___altoft@c,f
  2981  07C7  1903               	skipnz
  2982  07C8  0AA9               	incf	___altoft@c+1,f
  2983  07C9  1903               	skipnz
  2984  07CA  0AAA               	incf	___altoft@c+2,f
  2985  07CB  1903               	skipnz
  2986  07CC  0AAB               	incf	___altoft@c+3,f
  2987  07CD  01AF               	clrf	___altoft@sign
  2988  07CE  0AAF               	incf	___altoft@sign,f
  2989  07CF                     l2414:	
  2990  07CF  30FF               	movlw	255
  2991  07D0  052B               	andwf	___altoft@c+3,w
  2992  07D1  1903               	btfsc	3,2
  2993  07D2  2FE1               	goto	l2416
  2994  07D3  3001               	movlw	1
  2995  07D4                     u2805:	
  2996  07D4  1003               	clrc
  2997  07D5  0CAB               	rrf	___altoft@c+3,f
  2998  07D6  0CAA               	rrf	___altoft@c+2,f
  2999  07D7  0CA9               	rrf	___altoft@c+1,f
  3000  07D8  0CA8               	rrf	___altoft@c,f
  3001  07D9  3EFF               	addlw	-1
  3002  07DA  1D03               	skipz
  3003  07DB  2FD4               	goto	u2805
  3004  07DC  3001               	movlw	1
  3005  07DD  00AC               	movwf	??___altoft
  3006  07DE  082C               	movf	??___altoft,w
  3007  07DF  07AE               	addwf	___altoft@exp,f
  3008  07E0  2FCF               	goto	l2414
  3009  07E1                     l2416:	
  3010  07E1  0828               	movf	___altoft@c,w
  3011  07E2  00A0               	movwf	___ftpack@arg
  3012  07E3  0829               	movf	___altoft@c+1,w
  3013  07E4  00A1               	movwf	___ftpack@arg+1
  3014  07E5  082A               	movf	___altoft@c+2,w
  3015  07E6  00A2               	movwf	___ftpack@arg+2
  3016  07E7  082E               	movf	___altoft@exp,w
  3017  07E8  00AC               	movwf	??___altoft
  3018  07E9  082C               	movf	??___altoft,w
  3019  07EA  00A3               	movwf	___ftpack@exp
  3020  07EB  082F               	movf	___altoft@sign,w
  3021  07EC  00AD               	movwf	??___altoft+1
  3022  07ED  082D               	movf	??___altoft+1,w
  3023  07EE  00A4               	movwf	___ftpack@sign
  3024  07EF  120A  118A  274B   	fcall	___ftpack
  3025  07F2  1283               	bcf	3,5	;RP0=0, select bank0
  3026  07F3  1303               	bcf	3,6	;RP1=0, select bank0
  3027  07F4  0820               	movf	?___ftpack,w
  3028  07F5  00A8               	movwf	?___altoft
  3029  07F6  0821               	movf	?___ftpack+1,w
  3030  07F7  00A9               	movwf	?___altoft+1
  3031  07F8  0822               	movf	?___ftpack+2,w
  3032  07F9  00AA               	movwf	?___altoft+2
  3033  07FA  0008               	return
  3034  07FB                     __end_of___altoft:	
  3035                           
  3036                           	psect	text12
  3037  0CB1                     __ptext12:	
  3038 ;; *************** function ___ftneg *****************
  3039 ;; Defined at:
  3040 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
  3041 ;; Parameters:    Size  Location     Type
  3042 ;;  f1              3   16[BANK0 ] float 
  3043 ;; Auto vars:     Size  Location     Type
  3044 ;;		None
  3045 ;; Return value:  Size  Location     Type
  3046 ;;                  3   16[BANK0 ] float 
  3047 ;; Registers used:
  3048 ;;		wreg
  3049 ;; Tracked objects:
  3050 ;;		On entry : 0/0
  3051 ;;		On exit  : 0/0
  3052 ;;		Unchanged: 0/0
  3053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3054 ;;      Params:         0       3       0       0       0
  3055 ;;      Locals:         0       0       0       0       0
  3056 ;;      Temps:          0       0       0       0       0
  3057 ;;      Totals:         0       3       0       0       0
  3058 ;;Total ram usage:        3 bytes
  3059 ;; Hardware stack levels used:    1
  3060 ;; Hardware stack levels required when called:    2
  3061 ;; This function calls:
  3062 ;;		Nothing
  3063 ;; This function is called by:
  3064 ;;		_moveDeg
  3065 ;;		_round
  3066 ;; This function uses a non-reentrant model
  3067 ;;
  3068                           
  3069                           
  3070                           ;psect for function ___ftneg
  3071  0CB1                     ___ftneg:	
  3072                           
  3073                           ;incstack = 0
  3074                           ; Regs used in ___ftneg: [wreg]
  3075  0CB1  1283               	bcf	3,5	;RP0=0, select bank0
  3076  0CB2  1303               	bcf	3,6	;RP1=0, select bank0
  3077  0CB3  0832               	movf	___ftneg@f1+2,w
  3078  0CB4  0431               	iorwf	___ftneg@f1+1,w
  3079  0CB5  0430               	iorwf	___ftneg@f1,w
  3080  0CB6  1903               	skipnz
  3081  0CB7  0008               	return
  3082  0CB8  3080               	movlw	128
  3083  0CB9  06B2               	xorwf	___ftneg@f1+2,f
  3084  0CBA  0008               	return
  3085  0CBB                     __end_of___ftneg:	
  3086                           
  3087                           	psect	text13
  3088  0035                     __ptext13:	
  3089 ;; *************** function ___ftadd *****************
  3090 ;; Defined at:
  3091 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
  3092 ;; Parameters:    Size  Location     Type
  3093 ;;  f1              3   58[BANK0 ] float 
  3094 ;;  f2              3   61[BANK0 ] float 
  3095 ;; Auto vars:     Size  Location     Type
  3096 ;;  exp1            1   70[BANK0 ] unsigned char 
  3097 ;;  exp2            1   69[BANK0 ] unsigned char 
  3098 ;;  sign            1   68[BANK0 ] unsigned char 
  3099 ;; Return value:  Size  Location     Type
  3100 ;;                  3   58[BANK0 ] float 
  3101 ;; Registers used:
  3102 ;;		wreg, status,2, status,0, pclath, cstack
  3103 ;; Tracked objects:
  3104 ;;		On entry : 0/0
  3105 ;;		On exit  : 0/0
  3106 ;;		Unchanged: 0/0
  3107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3108 ;;      Params:         0       6       0       0       0
  3109 ;;      Locals:         0       3       0       0       0
  3110 ;;      Temps:          0       4       0       0       0
  3111 ;;      Totals:         0      13       0       0       0
  3112 ;;Total ram usage:       13 bytes
  3113 ;; Hardware stack levels used:    1
  3114 ;; Hardware stack levels required when called:    3
  3115 ;; This function calls:
  3116 ;;		___ftpack
  3117 ;; This function is called by:
  3118 ;;		_readADCMeter
  3119 ;;		_round
  3120 ;; This function uses a non-reentrant model
  3121 ;;
  3122                           
  3123                           
  3124                           ;psect for function ___ftadd
  3125  0035                     ___ftadd:	
  3126                           
  3127                           ;incstack = 0
  3128                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  3129  0035  1283               	bcf	3,5	;RP0=0, select bank0
  3130  0036  1303               	bcf	3,6	;RP1=0, select bank0
  3131  0037  085A               	movf	___ftadd@f1,w
  3132  0038  00E0               	movwf	??___ftadd
  3133  0039  085B               	movf	___ftadd@f1+1,w
  3134  003A  00E1               	movwf	??___ftadd+1
  3135  003B  085C               	movf	___ftadd@f1+2,w
  3136  003C  00E2               	movwf	??___ftadd+2
  3137  003D  1003               	clrc
  3138  003E  0D61               	rlf	??___ftadd+1,w
  3139  003F  0D62               	rlf	??___ftadd+2,w
  3140  0040  00E3               	movwf	??___ftadd+3
  3141  0041  0863               	movf	??___ftadd+3,w
  3142  0042  00E6               	movwf	___ftadd@exp1
  3143  0043  085D               	movf	___ftadd@f2,w
  3144  0044  00E0               	movwf	??___ftadd
  3145  0045  085E               	movf	___ftadd@f2+1,w
  3146  0046  00E1               	movwf	??___ftadd+1
  3147  0047  085F               	movf	___ftadd@f2+2,w
  3148  0048  00E2               	movwf	??___ftadd+2
  3149  0049  1003               	clrc
  3150  004A  0D61               	rlf	??___ftadd+1,w
  3151  004B  0D62               	rlf	??___ftadd+2,w
  3152  004C  00E3               	movwf	??___ftadd+3
  3153  004D  0863               	movf	??___ftadd+3,w
  3154  004E  00E5               	movwf	___ftadd@exp2
  3155  004F  0866               	movf	___ftadd@exp1,w
  3156  0050  1903               	btfsc	3,2
  3157  0051  285E               	goto	l2502
  3158  0052  0865               	movf	___ftadd@exp2,w
  3159  0053  0266               	subwf	___ftadd@exp1,w
  3160  0054  1803               	skipnc
  3161  0055  2865               	goto	l2506
  3162  0056  0366               	decf	___ftadd@exp1,w
  3163  0057  3AFF               	xorlw	255
  3164  0058  0765               	addwf	___ftadd@exp2,w
  3165  0059  00E0               	movwf	??___ftadd
  3166  005A  3019               	movlw	25
  3167  005B  0260               	subwf	??___ftadd,w
  3168  005C  1C03               	skipc
  3169  005D  2865               	goto	l2506
  3170  005E                     l2502:	
  3171  005E  085D               	movf	___ftadd@f2,w
  3172  005F  00DA               	movwf	?___ftadd
  3173  0060  085E               	movf	___ftadd@f2+1,w
  3174  0061  00DB               	movwf	?___ftadd+1
  3175  0062  085F               	movf	___ftadd@f2+2,w
  3176  0063  00DC               	movwf	?___ftadd+2
  3177  0064  0008               	return
  3178  0065                     l2506:	
  3179  0065  0865               	movf	___ftadd@exp2,w
  3180  0066  1903               	btfsc	3,2
  3181  0067  0008               	return
  3182  0068  0866               	movf	___ftadd@exp1,w
  3183  0069  0265               	subwf	___ftadd@exp2,w
  3184  006A  1803               	skipnc
  3185  006B  2874               	goto	l2512
  3186  006C  0365               	decf	___ftadd@exp2,w
  3187  006D  3AFF               	xorlw	255
  3188  006E  0766               	addwf	___ftadd@exp1,w
  3189  006F  00E0               	movwf	??___ftadd
  3190  0070  3019               	movlw	25
  3191  0071  0260               	subwf	??___ftadd,w
  3192  0072  1803               	btfsc	3,0
  3193  0073  0008               	return
  3194  0074                     l2512:	
  3195  0074  3006               	movlw	6
  3196  0075  00E0               	movwf	??___ftadd
  3197  0076  0860               	movf	??___ftadd,w
  3198  0077  00E4               	movwf	___ftadd@sign
  3199  0078  1BDC               	btfsc	___ftadd@f1+2,7
  3200  0079  17E4               	bsf	___ftadd@sign,7
  3201  007A  1BDF               	btfsc	___ftadd@f2+2,7
  3202  007B  1764               	bsf	___ftadd@sign,6
  3203  007C  17DB               	bsf	___ftadd@f1+1,7
  3204  007D  30FF               	movlw	255
  3205  007E  05DA               	andwf	___ftadd@f1,f
  3206  007F  30FF               	movlw	255
  3207  0080  05DB               	andwf	___ftadd@f1+1,f
  3208  0081  3000               	movlw	0
  3209  0082  05DC               	andwf	___ftadd@f1+2,f
  3210  0083  17DE               	bsf	___ftadd@f2+1,7
  3211  0084  30FF               	movlw	255
  3212  0085  05DD               	andwf	___ftadd@f2,f
  3213  0086  30FF               	movlw	255
  3214  0087  05DE               	andwf	___ftadd@f2+1,f
  3215  0088  3000               	movlw	0
  3216  0089  05DF               	andwf	___ftadd@f2+2,f
  3217  008A  0865               	movf	___ftadd@exp2,w
  3218  008B  0266               	subwf	___ftadd@exp1,w
  3219  008C  1803               	skipnc
  3220  008D  28B4               	goto	l2534
  3221  008E                     l2524:	
  3222  008E  3001               	movlw	1
  3223  008F                     u3045:	
  3224  008F  1003               	clrc
  3225  0090  0DDD               	rlf	___ftadd@f2,f
  3226  0091  0DDE               	rlf	___ftadd@f2+1,f
  3227  0092  0DDF               	rlf	___ftadd@f2+2,f
  3228  0093  3EFF               	addlw	-1
  3229  0094  1D03               	skipz
  3230  0095  288F               	goto	u3045
  3231  0096  3001               	movlw	1
  3232  0097  02E5               	subwf	___ftadd@exp2,f
  3233  0098  0865               	movf	___ftadd@exp2,w
  3234  0099  0666               	xorwf	___ftadd@exp1,w
  3235  009A  1903               	skipnz
  3236  009B  28AF               	goto	l2532
  3237  009C  3001               	movlw	1
  3238  009D  02E4               	subwf	___ftadd@sign,f
  3239  009E  0864               	movf	___ftadd@sign,w
  3240  009F  3907               	andlw	7
  3241  00A0  1903               	btfsc	3,2
  3242  00A1  28AF               	goto	l2532
  3243  00A2  288E               	goto	l2524
  3244  00A3                     l2530:	
  3245  00A3  3001               	movlw	1
  3246  00A4                     u3075:	
  3247  00A4  1003               	clrc
  3248  00A5  0CDC               	rrf	___ftadd@f1+2,f
  3249  00A6  0CDB               	rrf	___ftadd@f1+1,f
  3250  00A7  0CDA               	rrf	___ftadd@f1,f
  3251  00A8  3EFF               	addlw	-1
  3252  00A9  1D03               	skipz
  3253  00AA  28A4               	goto	u3075
  3254  00AB  3001               	movlw	1
  3255  00AC  00E0               	movwf	??___ftadd
  3256  00AD  0860               	movf	??___ftadd,w
  3257  00AE  07E6               	addwf	___ftadd@exp1,f
  3258  00AF                     l2532:	
  3259  00AF  0866               	movf	___ftadd@exp1,w
  3260  00B0  0665               	xorwf	___ftadd@exp2,w
  3261  00B1  1903               	btfsc	3,2
  3262  00B2  28DD               	goto	l616
  3263  00B3  28A3               	goto	l2530
  3264  00B4                     l2534:	
  3265  00B4  0866               	movf	___ftadd@exp1,w
  3266  00B5  0265               	subwf	___ftadd@exp2,w
  3267  00B6  1803               	skipnc
  3268  00B7  28DD               	goto	l616
  3269  00B8                     l2536:	
  3270  00B8  3001               	movlw	1
  3271  00B9                     u3105:	
  3272  00B9  1003               	clrc
  3273  00BA  0DDA               	rlf	___ftadd@f1,f
  3274  00BB  0DDB               	rlf	___ftadd@f1+1,f
  3275  00BC  0DDC               	rlf	___ftadd@f1+2,f
  3276  00BD  3EFF               	addlw	-1
  3277  00BE  1D03               	skipz
  3278  00BF  28B9               	goto	u3105
  3279  00C0  3001               	movlw	1
  3280  00C1  02E6               	subwf	___ftadd@exp1,f
  3281  00C2  0865               	movf	___ftadd@exp2,w
  3282  00C3  0666               	xorwf	___ftadd@exp1,w
  3283  00C4  1903               	skipnz
  3284  00C5  28D9               	goto	l2544
  3285  00C6  3001               	movlw	1
  3286  00C7  02E4               	subwf	___ftadd@sign,f
  3287  00C8  0864               	movf	___ftadd@sign,w
  3288  00C9  3907               	andlw	7
  3289  00CA  1903               	btfsc	3,2
  3290  00CB  28D9               	goto	l2544
  3291  00CC  28B8               	goto	l2536
  3292  00CD                     l2542:	
  3293  00CD  3001               	movlw	1
  3294  00CE                     u3135:	
  3295  00CE  1003               	clrc
  3296  00CF  0CDF               	rrf	___ftadd@f2+2,f
  3297  00D0  0CDE               	rrf	___ftadd@f2+1,f
  3298  00D1  0CDD               	rrf	___ftadd@f2,f
  3299  00D2  3EFF               	addlw	-1
  3300  00D3  1D03               	skipz
  3301  00D4  28CE               	goto	u3135
  3302  00D5  3001               	movlw	1
  3303  00D6  00E0               	movwf	??___ftadd
  3304  00D7  0860               	movf	??___ftadd,w
  3305  00D8  07E5               	addwf	___ftadd@exp2,f
  3306  00D9                     l2544:	
  3307  00D9  0866               	movf	___ftadd@exp1,w
  3308  00DA  0665               	xorwf	___ftadd@exp2,w
  3309  00DB  1D03               	skipz
  3310  00DC  28CD               	goto	l2542
  3311  00DD                     l616:	
  3312  00DD  1FE4               	btfss	___ftadd@sign,7
  3313  00DE  28EF               	goto	l2548
  3314  00DF  30FF               	movlw	255
  3315  00E0  06DA               	xorwf	___ftadd@f1,f
  3316  00E1  30FF               	movlw	255
  3317  00E2  06DB               	xorwf	___ftadd@f1+1,f
  3318  00E3  30FF               	movlw	255
  3319  00E4  06DC               	xorwf	___ftadd@f1+2,f
  3320  00E5  3001               	movlw	1
  3321  00E6  07DA               	addwf	___ftadd@f1,f
  3322  00E7  3000               	movlw	0
  3323  00E8  1803               	skipnc
  3324  00E9  3001               	movlw	1
  3325  00EA  07DB               	addwf	___ftadd@f1+1,f
  3326  00EB  3000               	movlw	0
  3327  00EC  1803               	skipnc
  3328  00ED  3001               	movlw	1
  3329  00EE  07DC               	addwf	___ftadd@f1+2,f
  3330  00EF                     l2548:	
  3331  00EF  1F64               	btfss	___ftadd@sign,6
  3332  00F0  2901               	goto	l2552
  3333  00F1  30FF               	movlw	255
  3334  00F2  06DD               	xorwf	___ftadd@f2,f
  3335  00F3  30FF               	movlw	255
  3336  00F4  06DE               	xorwf	___ftadd@f2+1,f
  3337  00F5  30FF               	movlw	255
  3338  00F6  06DF               	xorwf	___ftadd@f2+2,f
  3339  00F7  3001               	movlw	1
  3340  00F8  07DD               	addwf	___ftadd@f2,f
  3341  00F9  3000               	movlw	0
  3342  00FA  1803               	skipnc
  3343  00FB  3001               	movlw	1
  3344  00FC  07DE               	addwf	___ftadd@f2+1,f
  3345  00FD  3000               	movlw	0
  3346  00FE  1803               	skipnc
  3347  00FF  3001               	movlw	1
  3348  0100  07DF               	addwf	___ftadd@f2+2,f
  3349  0101                     l2552:	
  3350  0101  01E4               	clrf	___ftadd@sign
  3351  0102  085A               	movf	___ftadd@f1,w
  3352  0103  07DD               	addwf	___ftadd@f2,f
  3353  0104  085B               	movf	___ftadd@f1+1,w
  3354  0105  1103               	clrz
  3355  0106  1803               	skipnc
  3356  0107  0A5B               	incf	___ftadd@f1+1,w
  3357  0108  1D03               	btfss	3,2
  3358  0109  07DE               	addwf	___ftadd@f2+1,f
  3359  010A  085C               	movf	___ftadd@f1+2,w
  3360  010B  1103               	clrz
  3361  010C  1803               	skipnc
  3362  010D  0A5C               	incf	___ftadd@f1+2,w
  3363  010E  1D03               	btfss	3,2
  3364  010F  07DF               	addwf	___ftadd@f2+2,f
  3365  0110  1FDF               	btfss	___ftadd@f2+2,7
  3366  0111  2924               	goto	l2562
  3367  0112  30FF               	movlw	255
  3368  0113  06DD               	xorwf	___ftadd@f2,f
  3369  0114  30FF               	movlw	255
  3370  0115  06DE               	xorwf	___ftadd@f2+1,f
  3371  0116  30FF               	movlw	255
  3372  0117  06DF               	xorwf	___ftadd@f2+2,f
  3373  0118  3001               	movlw	1
  3374  0119  07DD               	addwf	___ftadd@f2,f
  3375  011A  3000               	movlw	0
  3376  011B  1803               	skipnc
  3377  011C  3001               	movlw	1
  3378  011D  07DE               	addwf	___ftadd@f2+1,f
  3379  011E  3000               	movlw	0
  3380  011F  1803               	skipnc
  3381  0120  3001               	movlw	1
  3382  0121  07DF               	addwf	___ftadd@f2+2,f
  3383  0122  01E4               	clrf	___ftadd@sign
  3384  0123  0AE4               	incf	___ftadd@sign,f
  3385  0124                     l2562:	
  3386  0124  085D               	movf	___ftadd@f2,w
  3387  0125  00A0               	movwf	___ftpack@arg
  3388  0126  085E               	movf	___ftadd@f2+1,w
  3389  0127  00A1               	movwf	___ftpack@arg+1
  3390  0128  085F               	movf	___ftadd@f2+2,w
  3391  0129  00A2               	movwf	___ftpack@arg+2
  3392  012A  0866               	movf	___ftadd@exp1,w
  3393  012B  00E0               	movwf	??___ftadd
  3394  012C  0860               	movf	??___ftadd,w
  3395  012D  00A3               	movwf	___ftpack@exp
  3396  012E  0864               	movf	___ftadd@sign,w
  3397  012F  00E1               	movwf	??___ftadd+1
  3398  0130  0861               	movf	??___ftadd+1,w
  3399  0131  00A4               	movwf	___ftpack@sign
  3400  0132  120A  118A  274B   	fcall	___ftpack
  3401  0135  1283               	bcf	3,5	;RP0=0, select bank0
  3402  0136  1303               	bcf	3,6	;RP1=0, select bank0
  3403  0137  0820               	movf	?___ftpack,w
  3404  0138  00DA               	movwf	?___ftadd
  3405  0139  0821               	movf	?___ftpack+1,w
  3406  013A  00DB               	movwf	?___ftadd+1
  3407  013B  0822               	movf	?___ftpack+2,w
  3408  013C  00DC               	movwf	?___ftadd+2
  3409  013D  0008               	return
  3410  013E                     __end_of___ftadd:	
  3411                           
  3412                           	psect	text14
  3413  0626                     __ptext14:	
  3414 ;; *************** function _move *****************
  3415 ;; Defined at:
  3416 ;;		line 28 in file "motor.c"
  3417 ;; Parameters:    Size  Location     Type
  3418 ;;  steps           1    wreg     unsigned char 
  3419 ;;  direction       1   17[BANK0 ] unsigned char 
  3420 ;; Auto vars:     Size  Location     Type
  3421 ;;  steps           1   20[BANK0 ] unsigned char 
  3422 ;;  i               1   21[BANK0 ] unsigned char 
  3423 ;; Return value:  Size  Location     Type
  3424 ;;                  1    wreg      void 
  3425 ;; Registers used:
  3426 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3427 ;; Tracked objects:
  3428 ;;		On entry : 0/0
  3429 ;;		On exit  : 0/0
  3430 ;;		Unchanged: 0/0
  3431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3432 ;;      Params:         0       1       0       0       0
  3433 ;;      Locals:         0       2       0       0       0
  3434 ;;      Temps:          0       2       0       0       0
  3435 ;;      Totals:         0       5       0       0       0
  3436 ;;Total ram usage:        5 bytes
  3437 ;; Hardware stack levels used:    1
  3438 ;; Hardware stack levels required when called:    4
  3439 ;; This function calls:
  3440 ;;		_lcdSetCursor
  3441 ;;		_lcdWriteString
  3442 ;;		_lcdWriteToDigitBCD
  3443 ;; This function is called by:
  3444 ;;		_main
  3445 ;;		_moveDeg
  3446 ;; This function uses a non-reentrant model
  3447 ;;
  3448                           
  3449                           
  3450                           ;psect for function _move
  3451  0626                     _move:	
  3452                           
  3453                           ;incstack = 0
  3454                           ; Regs used in _move: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3455                           ;move@steps stored from wreg
  3456  0626  1283               	bcf	3,5	;RP0=0, select bank0
  3457  0627  1303               	bcf	3,6	;RP1=0, select bank0
  3458  0628  00B4               	movwf	move@steps
  3459                           
  3460                           ;motor.c: 29: for(char i = 0; i<steps; i++){
  3461  0629  01B5               	clrf	move@i
  3462  062A                     l2708:	
  3463  062A  0834               	movf	move@steps,w
  3464  062B  0235               	subwf	move@i,w
  3465  062C  1803               	btfsc	3,0
  3466  062D  0008               	return
  3467                           
  3468                           ;motor.c: 31: if(cstep == 7 && direction == 1){
  3469  062E  3007               	movlw	7
  3470  062F  0677               	xorwf	_cstep,w
  3471  0630  1D03               	btfss	3,2
  3472  0631  2E3D               	goto	l2668
  3473  0632  0331               	decf	move@direction,w
  3474  0633  1D03               	btfss	3,2
  3475  0634  2E3D               	goto	l2668
  3476                           
  3477                           ;motor.c: 32: PORTC = halfSteps[0];
  3478  0635  1683               	bsf	3,5	;RP0=1, select bank1
  3479  0636  1303               	bcf	3,6	;RP1=0, select bank1
  3480  0637  0839               	movf	_halfSteps^(0+128),w
  3481  0638  1283               	bcf	3,5	;RP0=0, select bank0
  3482  0639  1303               	bcf	3,6	;RP1=0, select bank0
  3483  063A  0087               	movwf	7	;volatile
  3484                           
  3485                           ;motor.c: 33: cstep = 0;
  3486  063B  01F7               	clrf	_cstep
  3487                           
  3488                           ;motor.c: 34: }
  3489  063C  2E75               	goto	l2690
  3490  063D                     l2668:	
  3491                           
  3492                           ;motor.c: 36: else if(cstep == 0 && direction == 0){
  3493  063D  0877               	movf	_cstep,w
  3494  063E  1D03               	btfss	3,2
  3495  063F  2E4E               	goto	l140
  3496  0640  0831               	movf	move@direction,w
  3497  0641  1D03               	btfss	3,2
  3498  0642  2E4E               	goto	l140
  3499                           
  3500                           ;motor.c: 37: PORTC = halfSteps[7];
  3501  0643  1683               	bsf	3,5	;RP0=1, select bank1
  3502  0644  1303               	bcf	3,6	;RP1=0, select bank1
  3503  0645  0847               	movf	(_halfSteps^(0+128)+14),w
  3504  0646  1283               	bcf	3,5	;RP0=0, select bank0
  3505  0647  1303               	bcf	3,6	;RP1=0, select bank0
  3506  0648  0087               	movwf	7	;volatile
  3507                           
  3508                           ;motor.c: 38: cstep = 7;
  3509  0649  3007               	movlw	7
  3510  064A  00B2               	movwf	??_move
  3511  064B  0832               	movf	??_move,w
  3512  064C  00F7               	movwf	_cstep
  3513                           
  3514                           ;motor.c: 39: }
  3515  064D  2E75               	goto	l2690
  3516  064E                     l140:	
  3517                           
  3518                           ;motor.c: 41: else if (cstep >= 0 && cstep <= 7){
  3519  064E  1BF7               	btfsc	_cstep,7
  3520  064F  2E74               	goto	l2688
  3521  0650  0877               	movf	_cstep,w
  3522  0651  3A80               	xorlw	128
  3523  0652  3E78               	addlw	-136
  3524  0653  1803               	skipnc
  3525  0654  2E74               	goto	l2688
  3526                           
  3527                           ;motor.c: 42: if(direction == 1){
  3528  0655  0331               	decf	move@direction,w
  3529  0656  1D03               	btfss	3,2
  3530  0657  2E63               	goto	l2682
  3531                           
  3532                           ;motor.c: 43: PORTC = halfSteps[cstep+1];
  3533  0658  0877               	movf	_cstep,w
  3534  0659  00B2               	movwf	??_move
  3535  065A  0732               	addwf	??_move,w
  3536  065B  3E02               	addlw	2
  3537  065C  3EB9               	addlw	(low (_halfSteps| 0))& (0+255)
  3538  065D  0084               	movwf	4
  3539  065E  1383               	bcf	3,7	;select IRP bank1
  3540  065F  0800               	movf	0,w
  3541  0660  0087               	movwf	7	;volatile
  3542                           
  3543                           ;motor.c: 44: cstep++;
  3544  0661  3001               	movlw	1
  3545  0662  2E70               	goto	L2
  3546  0663                     l2682:	
  3547                           ;motor.c: 45: }
  3548                           
  3549                           
  3550                           ;motor.c: 46: else if(direction == 0){
  3551  0663  0831               	movf	move@direction,w
  3552  0664  1D03               	btfss	3,2
  3553  0665  2E75               	goto	l2690
  3554                           
  3555                           ;motor.c: 47: PORTC = halfSteps[cstep-1];
  3556  0666  0877               	movf	_cstep,w
  3557  0667  00B2               	movwf	??_move
  3558  0668  0732               	addwf	??_move,w
  3559  0669  3EFE               	addlw	254
  3560  066A  3EB9               	addlw	(low (_halfSteps| 0))& (0+255)
  3561  066B  0084               	movwf	4
  3562  066C  1383               	bcf	3,7	;select IRP bank1
  3563  066D  0800               	movf	0,w
  3564  066E  0087               	movwf	7	;volatile
  3565                           
  3566                           ;motor.c: 48: cstep--;
  3567  066F  30FF               	movlw	255
  3568  0670                     L2:	
  3569  0670  00B2               	movwf	??_move
  3570  0671  0832               	movf	??_move,w
  3571  0672  07F7               	addwf	_cstep,f
  3572                           
  3573                           ;motor.c: 49: }
  3574                           ;motor.c: 51: }
  3575  0673  2E75               	goto	l2690
  3576  0674                     l2688:	
  3577                           
  3578                           ;motor.c: 52: else{
  3579                           ;motor.c: 53: PORTC = 0x00;
  3580  0674  0187               	clrf	7	;volatile
  3581  0675                     l2690:	
  3582                           
  3583                           ;motor.c: 54: }
  3584                           ;motor.c: 57: lcdSetCursor(0x40);
  3585  0675  3040               	movlw	64
  3586  0676  120A  158A  24A8  120A  118A  	fcall	_lcdSetCursor
  3587                           
  3588                           ;motor.c: 58: lcdWriteString("steps:");
  3589  067B  3008               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  3590  067C  120A  158A  258D  120A  118A  	fcall	_lcdWriteString
  3591                           
  3592                           ;motor.c: 59: if(direction==1){
  3593  0681  1283               	bcf	3,5	;RP0=0, select bank0
  3594  0682  1303               	bcf	3,6	;RP1=0, select bank0
  3595  0683  0331               	decf	move@direction,w
  3596  0684  1D03               	btfss	3,2
  3597  0685  2E8E               	goto	l2700
  3598                           
  3599                           ;motor.c: 60: nrOfSteps++;
  3600  0686  3001               	movlw	1
  3601  0687  1683               	bsf	3,5	;RP0=1, select bank1
  3602  0688  1303               	bcf	3,6	;RP1=0, select bank1
  3603  0689  07D3               	addwf	_nrOfSteps^(0+128),f
  3604  068A  1803               	skipnc
  3605  068B  0AD4               	incf	(_nrOfSteps+1)^(0+128),f
  3606  068C  3000               	movlw	0
  3607  068D  2E95               	goto	L3
  3608  068E                     l2700:	
  3609                           ;motor.c: 62: }
  3610                           
  3611                           ;motor.c: 61: lcdWriteToDigitBCD(nrOfSteps,4,1);
  3612                           
  3613                           
  3614                           ;motor.c: 63: else{
  3615                           ;motor.c: 64: nrOfSteps--;
  3616  068E  30FF               	movlw	255
  3617  068F  1683               	bsf	3,5	;RP0=1, select bank1
  3618  0690  1303               	bcf	3,6	;RP1=0, select bank1
  3619  0691  07D3               	addwf	_nrOfSteps^(0+128),f
  3620  0692  1803               	skipnc
  3621  0693  0AD4               	incf	(_nrOfSteps+1)^(0+128),f
  3622  0694  30FF               	movlw	255
  3623  0695                     L3:	
  3624  0695  07D4               	addwf	(_nrOfSteps+1)^(0+128),f
  3625                           
  3626                           ;motor.c: 65: lcdWriteToDigitBCD(nrOfSteps,4,1);
  3627  0696  0854               	movf	(_nrOfSteps+1)^(0+128),w
  3628  0697  1283               	bcf	3,5	;RP0=0, select bank0
  3629  0698  1303               	bcf	3,6	;RP1=0, select bank0
  3630  0699  00A7               	movwf	lcdWriteToDigitBCD@data+1
  3631  069A  1683               	bsf	3,5	;RP0=1, select bank1
  3632  069B  1303               	bcf	3,6	;RP1=0, select bank1
  3633  069C  0853               	movf	_nrOfSteps^(0+128),w
  3634  069D  1283               	bcf	3,5	;RP0=0, select bank0
  3635  069E  1303               	bcf	3,6	;RP1=0, select bank0
  3636  069F  00A6               	movwf	lcdWriteToDigitBCD@data
  3637  06A0  3004               	movlw	4
  3638  06A1  00B2               	movwf	??_move
  3639  06A2  0832               	movf	??_move,w
  3640  06A3  00A8               	movwf	lcdWriteToDigitBCD@digits
  3641  06A4  01A9               	clrf	lcdWriteToDigitBCD@showSign
  3642  06A5  0AA9               	incf	lcdWriteToDigitBCD@showSign,f
  3643  06A6  120A  118A  2587  120A  118A  	fcall	_lcdWriteToDigitBCD
  3644                           
  3645                           ;motor.c: 66: }
  3646                           ;motor.c: 67: _delay((unsigned long)((20)*(20000000/4000.0)));
  3647  06AB  3082               	movlw	130
  3648  06AC  1283               	bcf	3,5	;RP0=0, select bank0
  3649  06AD  1303               	bcf	3,6	;RP1=0, select bank0
  3650  06AE  00B3               	movwf	??_move+1
  3651  06AF  30DD               	movlw	221
  3652  06B0  00B2               	movwf	??_move
  3653  06B1                     u3657:	
  3654  06B1  0BB2               	decfsz	??_move,f
  3655  06B2  2EB1               	goto	u3657
  3656  06B3  0BB3               	decfsz	??_move+1,f
  3657  06B4  2EB1               	goto	u3657
  3658  06B5  2EB6               	nop2
  3659  06B6  3001               	movlw	1
  3660  06B7  1283               	bcf	3,5	;RP0=0, select bank0
  3661  06B8  1303               	bcf	3,6	;RP1=0, select bank0
  3662  06B9  00B2               	movwf	??_move
  3663  06BA  0832               	movf	??_move,w
  3664  06BB  07B5               	addwf	move@i,f
  3665  06BC  2E2A               	goto	l2708
  3666  06BD                     __end_of_move:	
  3667                           
  3668                           	psect	text15
  3669  0F41                     __ptext15:	
  3670 ;; *************** function ___ftge *****************
  3671 ;; Defined at:
  3672 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
  3673 ;; Parameters:    Size  Location     Type
  3674 ;;  ff1             3    0[BANK0 ] float 
  3675 ;;  ff2             3    3[BANK0 ] float 
  3676 ;; Auto vars:     Size  Location     Type
  3677 ;;		None
  3678 ;; Return value:  Size  Location     Type
  3679 ;;		None               void
  3680 ;; Registers used:
  3681 ;;		wreg, status,2, status,0
  3682 ;; Tracked objects:
  3683 ;;		On entry : 0/0
  3684 ;;		On exit  : 0/0
  3685 ;;		Unchanged: 0/0
  3686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3687 ;;      Params:         0       6       0       0       0
  3688 ;;      Locals:         0       0       0       0       0
  3689 ;;      Temps:          0       6       0       0       0
  3690 ;;      Totals:         0      12       0       0       0
  3691 ;;Total ram usage:       12 bytes
  3692 ;; Hardware stack levels used:    1
  3693 ;; Hardware stack levels required when called:    2
  3694 ;; This function calls:
  3695 ;;		Nothing
  3696 ;; This function is called by:
  3697 ;;		_moveDeg
  3698 ;; This function uses a non-reentrant model
  3699 ;;
  3700                           
  3701                           
  3702                           ;psect for function ___ftge
  3703  0F41                     ___ftge:	
  3704                           
  3705                           ;incstack = 0
  3706                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  3707  0F41  1283               	bcf	3,5	;RP0=0, select bank0
  3708  0F42  1303               	bcf	3,6	;RP1=0, select bank0
  3709  0F43  1FA2               	btfss	___ftge@ff1+2,7
  3710  0F44  2F6A               	goto	l2074
  3711  0F45  3000               	movlw	0
  3712  0F46  00A6               	movwf	??___ftge
  3713  0F47  3000               	movlw	0
  3714  0F48  00A7               	movwf	??___ftge+1
  3715  0F49  3080               	movlw	128
  3716  0F4A  00A8               	movwf	??___ftge+2
  3717  0F4B  0920               	comf	___ftge@ff1,w
  3718  0F4C  00A9               	movwf	??___ftge+3
  3719  0F4D  0921               	comf	___ftge@ff1+1,w
  3720  0F4E  00AA               	movwf	??___ftge+4
  3721  0F4F  0922               	comf	___ftge@ff1+2,w
  3722  0F50  00AB               	movwf	??___ftge+5
  3723  0F51  0AA9               	incf	??___ftge+3,f
  3724  0F52  1903               	skipnz
  3725  0F53  0AAA               	incf	??___ftge+4,f
  3726  0F54  1903               	skipnz
  3727  0F55  0AAB               	incf	??___ftge+5,f
  3728  0F56  0829               	movf	??___ftge+3,w
  3729  0F57  07A6               	addwf	??___ftge,f
  3730  0F58  082A               	movf	??___ftge+4,w
  3731  0F59  1803               	skipnc
  3732  0F5A  0F2A               	incfsz	??___ftge+4,w
  3733  0F5B  2F5D               	goto	u2211
  3734  0F5C  2F5E               	goto	u2212
  3735  0F5D                     u2211:	
  3736  0F5D  07A7               	addwf	??___ftge+1,f
  3737  0F5E                     u2212:	
  3738  0F5E  082B               	movf	??___ftge+5,w
  3739  0F5F  1803               	skipnc
  3740  0F60  0F2B               	incfsz	??___ftge+5,w
  3741  0F61  2F63               	goto	u2213
  3742  0F62  2F64               	goto	u2214
  3743  0F63                     u2213:	
  3744  0F63  07A8               	addwf	??___ftge+2,f
  3745  0F64                     u2214:	
  3746  0F64  0826               	movf	??___ftge,w
  3747  0F65  00A0               	movwf	___ftge@ff1
  3748  0F66  0827               	movf	??___ftge+1,w
  3749  0F67  00A1               	movwf	___ftge@ff1+1
  3750  0F68  0828               	movf	??___ftge+2,w
  3751  0F69  00A2               	movwf	___ftge@ff1+2
  3752  0F6A                     l2074:	
  3753  0F6A  1FA5               	btfss	___ftge@ff2+2,7
  3754  0F6B  2F91               	goto	l2078
  3755  0F6C  3000               	movlw	0
  3756  0F6D  00A6               	movwf	??___ftge
  3757  0F6E  3000               	movlw	0
  3758  0F6F  00A7               	movwf	??___ftge+1
  3759  0F70  3080               	movlw	128
  3760  0F71  00A8               	movwf	??___ftge+2
  3761  0F72  0923               	comf	___ftge@ff2,w
  3762  0F73  00A9               	movwf	??___ftge+3
  3763  0F74  0924               	comf	___ftge@ff2+1,w
  3764  0F75  00AA               	movwf	??___ftge+4
  3765  0F76  0925               	comf	___ftge@ff2+2,w
  3766  0F77  00AB               	movwf	??___ftge+5
  3767  0F78  0AA9               	incf	??___ftge+3,f
  3768  0F79  1903               	skipnz
  3769  0F7A  0AAA               	incf	??___ftge+4,f
  3770  0F7B  1903               	skipnz
  3771  0F7C  0AAB               	incf	??___ftge+5,f
  3772  0F7D  0829               	movf	??___ftge+3,w
  3773  0F7E  07A6               	addwf	??___ftge,f
  3774  0F7F  082A               	movf	??___ftge+4,w
  3775  0F80  1803               	skipnc
  3776  0F81  0F2A               	incfsz	??___ftge+4,w
  3777  0F82  2F84               	goto	u2231
  3778  0F83  2F85               	goto	u2232
  3779  0F84                     u2231:	
  3780  0F84  07A7               	addwf	??___ftge+1,f
  3781  0F85                     u2232:	
  3782  0F85  082B               	movf	??___ftge+5,w
  3783  0F86  1803               	skipnc
  3784  0F87  0F2B               	incfsz	??___ftge+5,w
  3785  0F88  2F8A               	goto	u2233
  3786  0F89  2F8B               	goto	u2234
  3787  0F8A                     u2233:	
  3788  0F8A  07A8               	addwf	??___ftge+2,f
  3789  0F8B                     u2234:	
  3790  0F8B  0826               	movf	??___ftge,w
  3791  0F8C  00A3               	movwf	___ftge@ff2
  3792  0F8D  0827               	movf	??___ftge+1,w
  3793  0F8E  00A4               	movwf	___ftge@ff2+1
  3794  0F8F  0828               	movf	??___ftge+2,w
  3795  0F90  00A5               	movwf	___ftge@ff2+2
  3796  0F91                     l2078:	
  3797  0F91  3080               	movlw	128
  3798  0F92  06A2               	xorwf	___ftge@ff1+2,f
  3799  0F93  3080               	movlw	128
  3800  0F94  06A5               	xorwf	___ftge@ff2+2,f
  3801  0F95  0825               	movf	___ftge@ff2+2,w
  3802  0F96  0222               	subwf	___ftge@ff1+2,w
  3803  0F97  1D03               	skipz
  3804  0F98  0008               	return
  3805  0F99  0824               	movf	___ftge@ff2+1,w
  3806  0F9A  0221               	subwf	___ftge@ff1+1,w
  3807  0F9B  1D03               	skipz
  3808  0F9C  0008               	return
  3809  0F9D  0823               	movf	___ftge@ff2,w
  3810  0F9E  0220               	subwf	___ftge@ff1,w
  3811  0F9F  0008               	return
  3812  0FA0                     __end_of___ftge:	
  3813                           
  3814                           	psect	text16
  3815  04CF                     __ptext16:	
  3816 ;; *************** function ___ftdiv *****************
  3817 ;; Defined at:
  3818 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
  3819 ;; Parameters:    Size  Location     Type
  3820 ;;  f2              3   19[BANK0 ] float 
  3821 ;;  f1              3   22[BANK0 ] float 
  3822 ;; Auto vars:     Size  Location     Type
  3823 ;;  f3              3   30[BANK0 ] float 
  3824 ;;  sign            1   34[BANK0 ] unsigned char 
  3825 ;;  exp             1   33[BANK0 ] unsigned char 
  3826 ;;  cntr            1   29[BANK0 ] unsigned char 
  3827 ;; Return value:  Size  Location     Type
  3828 ;;                  3   19[BANK0 ] float 
  3829 ;; Registers used:
  3830 ;;		wreg, status,2, status,0, pclath, cstack
  3831 ;; Tracked objects:
  3832 ;;		On entry : 0/0
  3833 ;;		On exit  : 0/0
  3834 ;;		Unchanged: 0/0
  3835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3836 ;;      Params:         0       6       0       0       0
  3837 ;;      Locals:         0       6       0       0       0
  3838 ;;      Temps:          0       4       0       0       0
  3839 ;;      Totals:         0      16       0       0       0
  3840 ;;Total ram usage:       16 bytes
  3841 ;; Hardware stack levels used:    1
  3842 ;; Hardware stack levels required when called:    3
  3843 ;; This function calls:
  3844 ;;		___ftpack
  3845 ;; This function is called by:
  3846 ;;		_moveDeg
  3847 ;;		_readADCMeter
  3848 ;; This function uses a non-reentrant model
  3849 ;;
  3850                           
  3851                           
  3852                           ;psect for function ___ftdiv
  3853  04CF                     ___ftdiv:	
  3854                           
  3855                           ;incstack = 0
  3856                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  3857  04CF  1283               	bcf	3,5	;RP0=0, select bank0
  3858  04D0  1303               	bcf	3,6	;RP1=0, select bank0
  3859  04D1  0836               	movf	___ftdiv@f1,w
  3860  04D2  00B9               	movwf	??___ftdiv
  3861  04D3  0837               	movf	___ftdiv@f1+1,w
  3862  04D4  00BA               	movwf	??___ftdiv+1
  3863  04D5  0838               	movf	___ftdiv@f1+2,w
  3864  04D6  00BB               	movwf	??___ftdiv+2
  3865  04D7  1003               	clrc
  3866  04D8  0D3A               	rlf	??___ftdiv+1,w
  3867  04D9  0D3B               	rlf	??___ftdiv+2,w
  3868  04DA  00BC               	movwf	??___ftdiv+3
  3869  04DB  083C               	movf	??___ftdiv+3,w
  3870  04DC  00C1               	movwf	___ftdiv@exp
  3871  04DD  0841               	movf	___ftdiv@exp,w
  3872  04DE  1D03               	btfss	3,2
  3873  04DF  2CE7               	goto	l2736
  3874  04E0  3000               	movlw	0
  3875  04E1  00B3               	movwf	?___ftdiv
  3876  04E2  3000               	movlw	0
  3877  04E3  00B4               	movwf	?___ftdiv+1
  3878  04E4  3000               	movlw	0
  3879  04E5  00B5               	movwf	?___ftdiv+2
  3880  04E6  0008               	return
  3881  04E7                     l2736:	
  3882  04E7  0833               	movf	___ftdiv@f2,w
  3883  04E8  00B9               	movwf	??___ftdiv
  3884  04E9  0834               	movf	___ftdiv@f2+1,w
  3885  04EA  00BA               	movwf	??___ftdiv+1
  3886  04EB  0835               	movf	___ftdiv@f2+2,w
  3887  04EC  00BB               	movwf	??___ftdiv+2
  3888  04ED  1003               	clrc
  3889  04EE  0D3A               	rlf	??___ftdiv+1,w
  3890  04EF  0D3B               	rlf	??___ftdiv+2,w
  3891  04F0  00BC               	movwf	??___ftdiv+3
  3892  04F1  083C               	movf	??___ftdiv+3,w
  3893  04F2  00C2               	movwf	___ftdiv@sign
  3894  04F3  0842               	movf	___ftdiv@sign,w
  3895  04F4  1D03               	btfss	3,2
  3896  04F5  2CFD               	goto	l2742
  3897  04F6  3000               	movlw	0
  3898  04F7  00B3               	movwf	?___ftdiv
  3899  04F8  3000               	movlw	0
  3900  04F9  00B4               	movwf	?___ftdiv+1
  3901  04FA  3000               	movlw	0
  3902  04FB  00B5               	movwf	?___ftdiv+2
  3903  04FC  0008               	return
  3904  04FD                     l2742:	
  3905  04FD  3000               	movlw	0
  3906  04FE  00BE               	movwf	___ftdiv@f3
  3907  04FF  3000               	movlw	0
  3908  0500  00BF               	movwf	___ftdiv@f3+1
  3909  0501  3000               	movlw	0
  3910  0502  00C0               	movwf	___ftdiv@f3+2
  3911  0503  3089               	movlw	137
  3912  0504  0742               	addwf	___ftdiv@sign,w
  3913  0505  00B9               	movwf	??___ftdiv
  3914  0506  0839               	movf	??___ftdiv,w
  3915  0507  02C1               	subwf	___ftdiv@exp,f
  3916  0508  0836               	movf	___ftdiv@f1,w
  3917  0509  00B9               	movwf	??___ftdiv
  3918  050A  0837               	movf	___ftdiv@f1+1,w
  3919  050B  00BA               	movwf	??___ftdiv+1
  3920  050C  0838               	movf	___ftdiv@f1+2,w
  3921  050D  00BB               	movwf	??___ftdiv+2
  3922  050E  3010               	movlw	16
  3923  050F                     u3355:	
  3924  050F  1003               	clrc
  3925  0510  0CBB               	rrf	??___ftdiv+2,f
  3926  0511  0CBA               	rrf	??___ftdiv+1,f
  3927  0512  0CB9               	rrf	??___ftdiv,f
  3928  0513  3EFF               	addlw	-1
  3929  0514  1D03               	skipz
  3930  0515  2D0F               	goto	u3355
  3931  0516  0839               	movf	??___ftdiv,w
  3932  0517  00BC               	movwf	??___ftdiv+3
  3933  0518  083C               	movf	??___ftdiv+3,w
  3934  0519  00C2               	movwf	___ftdiv@sign
  3935  051A  0833               	movf	___ftdiv@f2,w
  3936  051B  00B9               	movwf	??___ftdiv
  3937  051C  0834               	movf	___ftdiv@f2+1,w
  3938  051D  00BA               	movwf	??___ftdiv+1
  3939  051E  0835               	movf	___ftdiv@f2+2,w
  3940  051F  00BB               	movwf	??___ftdiv+2
  3941  0520  3010               	movlw	16
  3942  0521                     u3365:	
  3943  0521  1003               	clrc
  3944  0522  0CBB               	rrf	??___ftdiv+2,f
  3945  0523  0CBA               	rrf	??___ftdiv+1,f
  3946  0524  0CB9               	rrf	??___ftdiv,f
  3947  0525  3EFF               	addlw	-1
  3948  0526  1D03               	skipz
  3949  0527  2D21               	goto	u3365
  3950  0528  0839               	movf	??___ftdiv,w
  3951  0529  00BC               	movwf	??___ftdiv+3
  3952  052A  083C               	movf	??___ftdiv+3,w
  3953  052B  06C2               	xorwf	___ftdiv@sign,f
  3954  052C  3080               	movlw	128
  3955  052D  00B9               	movwf	??___ftdiv
  3956  052E  0839               	movf	??___ftdiv,w
  3957  052F  05C2               	andwf	___ftdiv@sign,f
  3958  0530  17B7               	bsf	___ftdiv@f1+1,7
  3959  0531  30FF               	movlw	255
  3960  0532  05B6               	andwf	___ftdiv@f1,f
  3961  0533  30FF               	movlw	255
  3962  0534  05B7               	andwf	___ftdiv@f1+1,f
  3963  0535  3000               	movlw	0
  3964  0536  05B8               	andwf	___ftdiv@f1+2,f
  3965  0537  17B4               	bsf	___ftdiv@f2+1,7
  3966  0538  30FF               	movlw	255
  3967  0539  05B3               	andwf	___ftdiv@f2,f
  3968  053A  30FF               	movlw	255
  3969  053B  05B4               	andwf	___ftdiv@f2+1,f
  3970  053C  3000               	movlw	0
  3971  053D  05B5               	andwf	___ftdiv@f2+2,f
  3972  053E  3018               	movlw	24
  3973  053F  00B9               	movwf	??___ftdiv
  3974  0540  0839               	movf	??___ftdiv,w
  3975  0541  00BD               	movwf	___ftdiv@cntr
  3976  0542                     l2756:	
  3977  0542  3001               	movlw	1
  3978  0543                     u3375:	
  3979  0543  1003               	clrc
  3980  0544  0DBE               	rlf	___ftdiv@f3,f
  3981  0545  0DBF               	rlf	___ftdiv@f3+1,f
  3982  0546  0DC0               	rlf	___ftdiv@f3+2,f
  3983  0547  3EFF               	addlw	-1
  3984  0548  1D03               	skipz
  3985  0549  2D43               	goto	u3375
  3986  054A  0835               	movf	___ftdiv@f2+2,w
  3987  054B  0238               	subwf	___ftdiv@f1+2,w
  3988  054C  1D03               	skipz
  3989  054D  2D54               	goto	u3385
  3990  054E  0834               	movf	___ftdiv@f2+1,w
  3991  054F  0237               	subwf	___ftdiv@f1+1,w
  3992  0550  1D03               	skipz
  3993  0551  2D54               	goto	u3385
  3994  0552  0833               	movf	___ftdiv@f2,w
  3995  0553  0236               	subwf	___ftdiv@f1,w
  3996  0554                     u3385:	
  3997  0554  1C03               	skipc
  3998  0555  2D61               	goto	l2764
  3999  0556  0833               	movf	___ftdiv@f2,w
  4000  0557  02B6               	subwf	___ftdiv@f1,f
  4001  0558  0834               	movf	___ftdiv@f2+1,w
  4002  0559  1C03               	skipc
  4003  055A  0F34               	incfsz	___ftdiv@f2+1,w
  4004  055B  02B7               	subwf	___ftdiv@f1+1,f
  4005  055C  0835               	movf	___ftdiv@f2+2,w
  4006  055D  1C03               	skipc
  4007  055E  0A35               	incf	___ftdiv@f2+2,w
  4008  055F  02B8               	subwf	___ftdiv@f1+2,f
  4009  0560  143E               	bsf	___ftdiv@f3,0
  4010  0561                     l2764:	
  4011  0561  3001               	movlw	1
  4012  0562                     u3395:	
  4013  0562  1003               	clrc
  4014  0563  0DB6               	rlf	___ftdiv@f1,f
  4015  0564  0DB7               	rlf	___ftdiv@f1+1,f
  4016  0565  0DB8               	rlf	___ftdiv@f1+2,f
  4017  0566  3EFF               	addlw	-1
  4018  0567  1D03               	skipz
  4019  0568  2D62               	goto	u3395
  4020  0569  3001               	movlw	1
  4021  056A  02BD               	subwf	___ftdiv@cntr,f
  4022  056B  1D03               	btfss	3,2
  4023  056C  2D42               	goto	l2756
  4024  056D  083E               	movf	___ftdiv@f3,w
  4025  056E  00A0               	movwf	___ftpack@arg
  4026  056F  083F               	movf	___ftdiv@f3+1,w
  4027  0570  00A1               	movwf	___ftpack@arg+1
  4028  0571  0840               	movf	___ftdiv@f3+2,w
  4029  0572  00A2               	movwf	___ftpack@arg+2
  4030  0573  0841               	movf	___ftdiv@exp,w
  4031  0574  00B9               	movwf	??___ftdiv
  4032  0575  0839               	movf	??___ftdiv,w
  4033  0576  00A3               	movwf	___ftpack@exp
  4034  0577  0842               	movf	___ftdiv@sign,w
  4035  0578  00BA               	movwf	??___ftdiv+1
  4036  0579  083A               	movf	??___ftdiv+1,w
  4037  057A  00A4               	movwf	___ftpack@sign
  4038  057B  120A  118A  274B   	fcall	___ftpack
  4039  057E  1283               	bcf	3,5	;RP0=0, select bank0
  4040  057F  1303               	bcf	3,6	;RP1=0, select bank0
  4041  0580  0820               	movf	?___ftpack,w
  4042  0581  00B3               	movwf	?___ftdiv
  4043  0582  0821               	movf	?___ftpack+1,w
  4044  0583  00B4               	movwf	?___ftdiv+1
  4045  0584  0822               	movf	?___ftpack+2,w
  4046  0585  00B5               	movwf	?___ftdiv+2
  4047  0586  0008               	return
  4048  0587                     __end_of___ftdiv:	
  4049                           
  4050                           	psect	text17
  4051  074B                     __ptext17:	
  4052 ;; *************** function ___ftpack *****************
  4053 ;; Defined at:
  4054 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
  4055 ;; Parameters:    Size  Location     Type
  4056 ;;  arg             3    0[BANK0 ] unsigned um
  4057 ;;  exp             1    3[BANK0 ] unsigned char 
  4058 ;;  sign            1    4[BANK0 ] unsigned char 
  4059 ;; Auto vars:     Size  Location     Type
  4060 ;;		None
  4061 ;; Return value:  Size  Location     Type
  4062 ;;                  3    0[BANK0 ] float 
  4063 ;; Registers used:
  4064 ;;		wreg, status,2, status,0
  4065 ;; Tracked objects:
  4066 ;;		On entry : 0/0
  4067 ;;		On exit  : 0/0
  4068 ;;		Unchanged: 0/0
  4069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4070 ;;      Params:         0       5       0       0       0
  4071 ;;      Locals:         0       0       0       0       0
  4072 ;;      Temps:          0       3       0       0       0
  4073 ;;      Totals:         0       8       0       0       0
  4074 ;;Total ram usage:        8 bytes
  4075 ;; Hardware stack levels used:    1
  4076 ;; Hardware stack levels required when called:    2
  4077 ;; This function calls:
  4078 ;;		Nothing
  4079 ;; This function is called by:
  4080 ;;		___altoft
  4081 ;;		___awtoft
  4082 ;;		___ftadd
  4083 ;;		___ftdiv
  4084 ;;		___ftmul
  4085 ;; This function uses a non-reentrant model
  4086 ;;
  4087                           
  4088                           
  4089                           ;psect for function ___ftpack
  4090  074B                     ___ftpack:	
  4091                           
  4092                           ;incstack = 0
  4093                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  4094  074B  1283               	bcf	3,5	;RP0=0, select bank0
  4095  074C  1303               	bcf	3,6	;RP1=0, select bank0
  4096  074D  0823               	movf	___ftpack@exp,w
  4097  074E  1903               	btfsc	3,2
  4098  074F  2F55               	goto	l2346
  4099  0750  0822               	movf	___ftpack@arg+2,w
  4100  0751  0421               	iorwf	___ftpack@arg+1,w
  4101  0752  0420               	iorwf	___ftpack@arg,w
  4102  0753  1D03               	skipz
  4103  0754  2F68               	goto	l2352
  4104  0755                     l2346:	
  4105  0755  3000               	movlw	0
  4106  0756  00A0               	movwf	?___ftpack
  4107  0757  3000               	movlw	0
  4108  0758  00A1               	movwf	?___ftpack+1
  4109  0759  3000               	movlw	0
  4110  075A  00A2               	movwf	?___ftpack+2
  4111  075B  0008               	return
  4112  075C                     l2350:	
  4113  075C  3001               	movlw	1
  4114  075D  00A5               	movwf	??___ftpack
  4115  075E  0825               	movf	??___ftpack,w
  4116  075F  07A3               	addwf	___ftpack@exp,f
  4117  0760  3001               	movlw	1
  4118  0761                     u2655:	
  4119  0761  1003               	clrc
  4120  0762  0CA2               	rrf	___ftpack@arg+2,f
  4121  0763  0CA1               	rrf	___ftpack@arg+1,f
  4122  0764  0CA0               	rrf	___ftpack@arg,f
  4123  0765  3EFF               	addlw	-1
  4124  0766  1D03               	skipz
  4125  0767  2F61               	goto	u2655
  4126  0768                     l2352:	
  4127  0768  30FE               	movlw	254
  4128  0769  0522               	andwf	___ftpack@arg+2,w
  4129  076A  1903               	btfsc	3,2
  4130  076B  2F83               	goto	l585
  4131  076C  2F5C               	goto	l2350
  4132  076D                     l2354:	
  4133  076D  3001               	movlw	1
  4134  076E  00A5               	movwf	??___ftpack
  4135  076F  0825               	movf	??___ftpack,w
  4136  0770  07A3               	addwf	___ftpack@exp,f
  4137  0771  3001               	movlw	1
  4138  0772  07A0               	addwf	___ftpack@arg,f
  4139  0773  3000               	movlw	0
  4140  0774  1803               	skipnc
  4141  0775  3001               	movlw	1
  4142  0776  07A1               	addwf	___ftpack@arg+1,f
  4143  0777  3000               	movlw	0
  4144  0778  1803               	skipnc
  4145  0779  3001               	movlw	1
  4146  077A  07A2               	addwf	___ftpack@arg+2,f
  4147  077B  3001               	movlw	1
  4148  077C                     u2675:	
  4149  077C  1003               	clrc
  4150  077D  0CA2               	rrf	___ftpack@arg+2,f
  4151  077E  0CA1               	rrf	___ftpack@arg+1,f
  4152  077F  0CA0               	rrf	___ftpack@arg,f
  4153  0780  3EFF               	addlw	-1
  4154  0781  1D03               	skipz
  4155  0782  2F7C               	goto	u2675
  4156  0783                     l585:	
  4157  0783  30FF               	movlw	255
  4158  0784  0522               	andwf	___ftpack@arg+2,w
  4159  0785  1903               	btfsc	3,2
  4160  0786  2F92               	goto	l2362
  4161  0787  2F6D               	goto	l2354
  4162  0788                     l2360:	
  4163  0788  3001               	movlw	1
  4164  0789  02A3               	subwf	___ftpack@exp,f
  4165  078A  3001               	movlw	1
  4166  078B                     u2695:	
  4167  078B  1003               	clrc
  4168  078C  0DA0               	rlf	___ftpack@arg,f
  4169  078D  0DA1               	rlf	___ftpack@arg+1,f
  4170  078E  0DA2               	rlf	___ftpack@arg+2,f
  4171  078F  3EFF               	addlw	-1
  4172  0790  1D03               	skipz
  4173  0791  2F8B               	goto	u2695
  4174  0792                     l2362:	
  4175  0792  1BA1               	btfsc	___ftpack@arg+1,7
  4176  0793  2F98               	goto	l592
  4177  0794  3002               	movlw	2
  4178  0795  0223               	subwf	___ftpack@exp,w
  4179  0796  1803               	skipnc
  4180  0797  2F88               	goto	l2360
  4181  0798                     l592:	
  4182  0798  1823               	btfsc	___ftpack@exp,0
  4183  0799  2FA0               	goto	l593
  4184  079A  30FF               	movlw	255
  4185  079B  05A0               	andwf	___ftpack@arg,f
  4186  079C  307F               	movlw	127
  4187  079D  05A1               	andwf	___ftpack@arg+1,f
  4188  079E  30FF               	movlw	255
  4189  079F  05A2               	andwf	___ftpack@arg+2,f
  4190  07A0                     l593:	
  4191  07A0  1003               	clrc
  4192  07A1  0CA3               	rrf	___ftpack@exp,f
  4193  07A2  0823               	movf	___ftpack@exp,w
  4194  07A3  00A5               	movwf	??___ftpack
  4195  07A4  01A6               	clrf	??___ftpack+1
  4196  07A5  01A7               	clrf	??___ftpack+2
  4197  07A6  3010               	movlw	16
  4198  07A7                     u2735:	
  4199  07A7  1003               	clrc
  4200  07A8  0DA5               	rlf	??___ftpack,f
  4201  07A9  0DA6               	rlf	??___ftpack+1,f
  4202  07AA  0DA7               	rlf	??___ftpack+2,f
  4203  07AB  3EFF               	addlw	-1
  4204  07AC  1D03               	skipz
  4205  07AD  2FA7               	goto	u2735
  4206  07AE  0825               	movf	??___ftpack,w
  4207  07AF  04A0               	iorwf	___ftpack@arg,f
  4208  07B0  0826               	movf	??___ftpack+1,w
  4209  07B1  04A1               	iorwf	___ftpack@arg+1,f
  4210  07B2  0827               	movf	??___ftpack+2,w
  4211  07B3  04A2               	iorwf	___ftpack@arg+2,f
  4212  07B4  0824               	movf	___ftpack@sign,w
  4213  07B5  1903               	btfsc	3,2
  4214  07B6  0008               	return
  4215  07B7  17A2               	bsf	___ftpack@arg+2,7
  4216  07B8  0008               	return
  4217  07B9                     __end_of___ftpack:	
  4218                           
  4219                           	psect	text18
  4220  0D71                     __ptext18:	
  4221 ;; *************** function _initialise *****************
  4222 ;; Defined at:
  4223 ;;		line 26 in file "main.c"
  4224 ;; Parameters:    Size  Location     Type
  4225 ;;		None
  4226 ;; Auto vars:     Size  Location     Type
  4227 ;;		None
  4228 ;; Return value:  Size  Location     Type
  4229 ;;                  1    wreg      void 
  4230 ;; Registers used:
  4231 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4232 ;; Tracked objects:
  4233 ;;		On entry : 0/0
  4234 ;;		On exit  : 0/0
  4235 ;;		Unchanged: 0/0
  4236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4237 ;;      Params:         0       0       0       0       0
  4238 ;;      Locals:         0       0       0       0       0
  4239 ;;      Temps:          0       0       0       0       0
  4240 ;;      Totals:         0       0       0       0       0
  4241 ;;Total ram usage:        0 bytes
  4242 ;; Hardware stack levels used:    1
  4243 ;; Hardware stack levels required when called:    5
  4244 ;; This function calls:
  4245 ;;		_initializeADC
  4246 ;;		_initializeMotor
  4247 ;;		_initializeTimer0
  4248 ;;		_setupLCD
  4249 ;; This function is called by:
  4250 ;;		_main
  4251 ;; This function uses a non-reentrant model
  4252 ;;
  4253                           
  4254                           
  4255                           ;psect for function _initialise
  4256  0D71                     _initialise:	
  4257                           
  4258                           ;main.c: 29: TRISB = 0b00001111;
  4259                           
  4260                           ;incstack = 0
  4261                           ; Regs used in _initialise: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4262  0D71  300F               	movlw	15
  4263  0D72  1683               	bsf	3,5	;RP0=1, select bank1
  4264  0D73  1303               	bcf	3,6	;RP1=0, select bank1
  4265  0D74  0086               	movwf	6	;volatile
  4266                           
  4267                           ;main.c: 30: TRISC = 0;
  4268  0D75  0187               	clrf	7	;volatile
  4269                           
  4270                           ;main.c: 33: RB4 = 1;
  4271  0D76  1283               	bcf	3,5	;RP0=0, select bank0
  4272  0D77  1303               	bcf	3,6	;RP1=0, select bank0
  4273  0D78  1606               	bsf	6,4	;volatile
  4274                           
  4275                           ;main.c: 34: RB5 = 1;
  4276  0D79  1686               	bsf	6,5	;volatile
  4277                           
  4278                           ;main.c: 37: initializeTimer0();
  4279  0D7A  120A  158A  24D6  120A  158A  	fcall	_initializeTimer0
  4280                           
  4281                           ;main.c: 38: initializeADC();
  4282  0D7F  120A  158A  252C  120A  158A  	fcall	_initializeADC
  4283                           
  4284                           ;main.c: 39: setupLCD();
  4285  0D84  120A  158A  2642  120A  158A  	fcall	_setupLCD
  4286                           
  4287                           ;main.c: 40: initializeMotor();
  4288  0D89  120A  158A  261A   	fcall	_initializeMotor
  4289  0D8C  0008               	return
  4290  0D8D                     __end_of_initialise:	
  4291                           
  4292                           	psect	text19
  4293  0E42                     __ptext19:	
  4294 ;; *************** function _setupLCD *****************
  4295 ;; Defined at:
  4296 ;;		line 85 in file "lcd.c"
  4297 ;; Parameters:    Size  Location     Type
  4298 ;;		None
  4299 ;; Auto vars:     Size  Location     Type
  4300 ;;		None
  4301 ;; Return value:  Size  Location     Type
  4302 ;;                  1    wreg      void 
  4303 ;; Registers used:
  4304 ;;		wreg, status,2, status,0, pclath, cstack
  4305 ;; Tracked objects:
  4306 ;;		On entry : 0/0
  4307 ;;		On exit  : 0/0
  4308 ;;		Unchanged: 0/0
  4309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4310 ;;      Params:         0       0       0       0       0
  4311 ;;      Locals:         0       0       0       0       0
  4312 ;;      Temps:          0       0       0       0       0
  4313 ;;      Totals:         0       0       0       0       0
  4314 ;;Total ram usage:        0 bytes
  4315 ;; Hardware stack levels used:    1
  4316 ;; Hardware stack levels required when called:    3
  4317 ;; This function calls:
  4318 ;;		_lcdWriteControl
  4319 ;; This function is called by:
  4320 ;;		_initialise
  4321 ;; This function uses a non-reentrant model
  4322 ;;
  4323                           
  4324                           
  4325                           ;psect for function _setupLCD
  4326  0E42                     _setupLCD:	
  4327                           
  4328                           ;lcd.c: 87: PORTD = 0;
  4329                           
  4330                           ;incstack = 0
  4331                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
  4332  0E42  1283               	bcf	3,5	;RP0=0, select bank0
  4333  0E43  1303               	bcf	3,6	;RP1=0, select bank0
  4334  0E44  0188               	clrf	8	;volatile
  4335                           
  4336                           ;lcd.c: 88: PORTE = 0;
  4337  0E45  0189               	clrf	9	;volatile
  4338                           
  4339                           ;lcd.c: 90: TRISD = 0b00000000;
  4340  0E46  1683               	bsf	3,5	;RP0=1, select bank1
  4341  0E47  1303               	bcf	3,6	;RP1=0, select bank1
  4342  0E48  0188               	clrf	8	;volatile
  4343                           
  4344                           ;lcd.c: 91: TRISE = 0b00000000;
  4345  0E49  0189               	clrf	9	;volatile
  4346                           
  4347                           ;lcd.c: 94: lcdWriteControl(0b00000001);
  4348  0E4A  3001               	movlw	1
  4349  0E4B  120A  158A  2518  120A  158A  	fcall	_lcdWriteControl
  4350                           
  4351                           ;lcd.c: 95: lcdWriteControl(0b00111000);
  4352  0E50  3038               	movlw	56
  4353  0E51  120A  158A  2518  120A  158A  	fcall	_lcdWriteControl
  4354                           
  4355                           ;lcd.c: 96: lcdWriteControl(0b00001100);
  4356  0E56  300C               	movlw	12
  4357  0E57  120A  158A  2518  120A  158A  	fcall	_lcdWriteControl
  4358                           
  4359                           ;lcd.c: 97: lcdWriteControl(0b00000110);
  4360  0E5C  3006               	movlw	6
  4361  0E5D  120A  158A  2518  120A  158A  	fcall	_lcdWriteControl
  4362                           
  4363                           ;lcd.c: 98: lcdWriteControl(0b00000010);
  4364  0E62  3002               	movlw	2
  4365  0E63  120A  158A  2518  120A  158A  	fcall	_lcdWriteControl
  4366                           
  4367                           ;lcd.c: 102: lcdWriteControl(0b00000001);
  4368  0E68  3001               	movlw	1
  4369  0E69  120A  158A  2518   	fcall	_lcdWriteControl
  4370  0E6C  0008               	return
  4371  0E6D                     __end_of_setupLCD:	
  4372                           
  4373                           	psect	text20
  4374  0CD6                     __ptext20:	
  4375 ;; *************** function _initializeTimer0 *****************
  4376 ;; Defined at:
  4377 ;;		line 7 in file "timer0.c"
  4378 ;; Parameters:    Size  Location     Type
  4379 ;;		None
  4380 ;; Auto vars:     Size  Location     Type
  4381 ;;		None
  4382 ;; Return value:  Size  Location     Type
  4383 ;;                  1    wreg      void 
  4384 ;; Registers used:
  4385 ;;		wreg
  4386 ;; Tracked objects:
  4387 ;;		On entry : 0/0
  4388 ;;		On exit  : 0/0
  4389 ;;		Unchanged: 0/0
  4390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4391 ;;      Params:         0       0       0       0       0
  4392 ;;      Locals:         0       0       0       0       0
  4393 ;;      Temps:          0       0       0       0       0
  4394 ;;      Totals:         0       0       0       0       0
  4395 ;;Total ram usage:        0 bytes
  4396 ;; Hardware stack levels used:    1
  4397 ;; Hardware stack levels required when called:    2
  4398 ;; This function calls:
  4399 ;;		Nothing
  4400 ;; This function is called by:
  4401 ;;		_initialise
  4402 ;; This function uses a non-reentrant model
  4403 ;;
  4404                           
  4405                           
  4406                           ;psect for function _initializeTimer0
  4407  0CD6                     _initializeTimer0:	
  4408                           
  4409                           ;timer0.c: 10: TMR0 = 100;
  4410                           
  4411                           ;incstack = 0
  4412                           ; Regs used in _initializeTimer0: [wreg]
  4413  0CD6  3064               	movlw	100
  4414  0CD7  1283               	bcf	3,5	;RP0=0, select bank0
  4415  0CD8  1303               	bcf	3,6	;RP1=0, select bank0
  4416  0CD9  0081               	movwf	1	;volatile
  4417                           
  4418                           ;timer0.c: 11: T0CS = 0;
  4419  0CDA  1683               	bsf	3,5	;RP0=1, select bank1
  4420  0CDB  1303               	bcf	3,6	;RP1=0, select bank1
  4421  0CDC  1281               	bcf	1,5	;volatile
  4422                           
  4423                           ;timer0.c: 12: T0SE = 0;
  4424  0CDD  1201               	bcf	1,4	;volatile
  4425                           
  4426                           ;timer0.c: 14: PSA = 0;
  4427  0CDE  1181               	bcf	1,3	;volatile
  4428                           
  4429                           ;timer0.c: 15: PS0 = 0;
  4430  0CDF  1001               	bcf	1,0	;volatile
  4431                           
  4432                           ;timer0.c: 16: PS1 = 0;
  4433  0CE0  1081               	bcf	1,1	;volatile
  4434                           
  4435                           ;timer0.c: 17: PS2 = 1;
  4436  0CE1  1501               	bsf	1,2	;volatile
  4437                           
  4438                           ;timer0.c: 19: TMR0IE = 1;
  4439  0CE2  168B               	bsf	11,5	;volatile
  4440                           
  4441                           ;timer0.c: 20: (GIE = 1);
  4442  0CE3  178B               	bsf	11,7	;volatile
  4443  0CE4  0008               	return
  4444  0CE5                     __end_of_initializeTimer0:	
  4445                           
  4446                           	psect	text21
  4447  0E1A                     __ptext21:	
  4448 ;; *************** function _initializeMotor *****************
  4449 ;; Defined at:
  4450 ;;		line 19 in file "motor.c"
  4451 ;; Parameters:    Size  Location     Type
  4452 ;;		None
  4453 ;; Auto vars:     Size  Location     Type
  4454 ;;		None
  4455 ;; Return value:  Size  Location     Type
  4456 ;;                  2   28[None  ] int 
  4457 ;; Registers used:
  4458 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4459 ;; Tracked objects:
  4460 ;;		On entry : 0/0
  4461 ;;		On exit  : 0/0
  4462 ;;		Unchanged: 0/0
  4463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4464 ;;      Params:         0       0       0       0       0
  4465 ;;      Locals:         0       0       0       0       0
  4466 ;;      Temps:          0       1       0       0       0
  4467 ;;      Totals:         0       1       0       0       0
  4468 ;;Total ram usage:        1 bytes
  4469 ;; Hardware stack levels used:    1
  4470 ;; Hardware stack levels required when called:    4
  4471 ;; This function calls:
  4472 ;;		_lcdSetCursor
  4473 ;;		_lcdWriteString
  4474 ;;		_lcdWriteToDigitBCD
  4475 ;; This function is called by:
  4476 ;;		_initialise
  4477 ;; This function uses a non-reentrant model
  4478 ;;
  4479                           
  4480                           
  4481                           ;psect for function _initializeMotor
  4482  0E1A                     _initializeMotor:	
  4483                           
  4484                           ;motor.c: 21: PORTC = halfSteps[0];
  4485                           
  4486                           ;incstack = 0
  4487                           ; Regs used in _initializeMotor: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4488  0E1A  1683               	bsf	3,5	;RP0=1, select bank1
  4489  0E1B  1303               	bcf	3,6	;RP1=0, select bank1
  4490  0E1C  0839               	movf	_halfSteps^(0+128),w
  4491  0E1D  1283               	bcf	3,5	;RP0=0, select bank0
  4492  0E1E  1303               	bcf	3,6	;RP1=0, select bank0
  4493  0E1F  0087               	movwf	7	;volatile
  4494                           
  4495                           ;motor.c: 22: lcdSetCursor(0x40);
  4496  0E20  3040               	movlw	64
  4497  0E21  120A  158A  24A8  120A  158A  	fcall	_lcdSetCursor
  4498                           
  4499                           ;motor.c: 23: lcdWriteString("Steps:");
  4500  0E26  3001               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  4501  0E27  120A  158A  258D  120A  158A  	fcall	_lcdWriteString
  4502                           
  4503                           ;motor.c: 24: lcdWriteToDigitBCD(nrOfSteps,4,1);
  4504  0E2C  1683               	bsf	3,5	;RP0=1, select bank1
  4505  0E2D  1303               	bcf	3,6	;RP1=0, select bank1
  4506  0E2E  0854               	movf	(_nrOfSteps+1)^(0+128),w
  4507  0E2F  1283               	bcf	3,5	;RP0=0, select bank0
  4508  0E30  1303               	bcf	3,6	;RP1=0, select bank0
  4509  0E31  00A7               	movwf	lcdWriteToDigitBCD@data+1
  4510  0E32  1683               	bsf	3,5	;RP0=1, select bank1
  4511  0E33  1303               	bcf	3,6	;RP1=0, select bank1
  4512  0E34  0853               	movf	_nrOfSteps^(0+128),w
  4513  0E35  1283               	bcf	3,5	;RP0=0, select bank0
  4514  0E36  1303               	bcf	3,6	;RP1=0, select bank0
  4515  0E37  00A6               	movwf	lcdWriteToDigitBCD@data
  4516  0E38  3004               	movlw	4
  4517  0E39  00B1               	movwf	??_initializeMotor
  4518  0E3A  0831               	movf	??_initializeMotor,w
  4519  0E3B  00A8               	movwf	lcdWriteToDigitBCD@digits
  4520  0E3C  01A9               	clrf	lcdWriteToDigitBCD@showSign
  4521  0E3D  0AA9               	incf	lcdWriteToDigitBCD@showSign,f
  4522  0E3E  120A  118A  2587   	fcall	_lcdWriteToDigitBCD
  4523  0E41  0008               	return
  4524  0E42                     __end_of_initializeMotor:	
  4525                           
  4526                           	psect	text22
  4527  0587                     __ptext22:	
  4528 ;; *************** function _lcdWriteToDigitBCD *****************
  4529 ;; Defined at:
  4530 ;;		line 39 in file "lcd.c"
  4531 ;; Parameters:    Size  Location     Type
  4532 ;;  data            2    6[BANK0 ] int 
  4533 ;;  digits          1    8[BANK0 ] unsigned char 
  4534 ;;  showSign        1    9[BANK0 ] unsigned char 
  4535 ;; Auto vars:     Size  Location     Type
  4536 ;;  OnesDigit       2   15[BANK0 ] unsigned int 
  4537 ;;  sign            1   14[BANK0 ] char 
  4538 ;;  ThousandDigi    1   13[BANK0 ] unsigned char 
  4539 ;;  HundredDigit    1   12[BANK0 ] unsigned char 
  4540 ;;  TensDigit       1   11[BANK0 ] unsigned char 
  4541 ;; Return value:  Size  Location     Type
  4542 ;;                  1    wreg      void 
  4543 ;; Registers used:
  4544 ;;		wreg, status,2, status,0, pclath, cstack
  4545 ;; Tracked objects:
  4546 ;;		On entry : 0/0
  4547 ;;		On exit  : 0/0
  4548 ;;		Unchanged: 0/0
  4549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4550 ;;      Params:         0       4       0       0       0
  4551 ;;      Locals:         0       6       0       0       0
  4552 ;;      Temps:          0       1       0       0       0
  4553 ;;      Totals:         0      11       0       0       0
  4554 ;;Total ram usage:       11 bytes
  4555 ;; Hardware stack levels used:    1
  4556 ;; Hardware stack levels required when called:    3
  4557 ;; This function calls:
  4558 ;;		___wmul
  4559 ;;		_lcdWriteData
  4560 ;; This function is called by:
  4561 ;;		_main
  4562 ;;		_initializeMotor
  4563 ;;		_move
  4564 ;; This function uses a non-reentrant model
  4565 ;;
  4566                           
  4567                           
  4568                           ;psect for function _lcdWriteToDigitBCD
  4569  0587                     _lcdWriteToDigitBCD:	
  4570                           
  4571                           ;lcd.c: 40: unsigned int OnesDigit;
  4572                           ;lcd.c: 41: unsigned char TensDigit, HundredDigit, ThousandDigit;
  4573                           ;lcd.c: 42: signed char sign = 1;
  4574                           
  4575                           ;incstack = 0
  4576                           ; Regs used in _lcdWriteToDigitBCD: [wreg+status,2+status,0+pclath+cstack]
  4577  0587  1283               	bcf	3,5	;RP0=0, select bank0
  4578  0588  1303               	bcf	3,6	;RP1=0, select bank0
  4579  0589  01AE               	clrf	lcdWriteToDigitBCD@sign
  4580  058A  0AAE               	incf	lcdWriteToDigitBCD@sign,f
  4581                           
  4582                           ;lcd.c: 44: if(data<0)
  4583  058B  1FA7               	btfss	lcdWriteToDigitBCD@data+1,7
  4584  058C  2D8F               	goto	l2452
  4585                           
  4586                           ;lcd.c: 45: sign = -1;
  4587  058D  01AE               	clrf	lcdWriteToDigitBCD@sign
  4588  058E  03AE               	decf	lcdWriteToDigitBCD@sign,f
  4589  058F                     l2452:	
  4590                           
  4591                           ;lcd.c: 47: OnesDigit = data*sign;
  4592  058F  082E               	movf	lcdWriteToDigitBCD@sign,w
  4593  0590  00A0               	movwf	___wmul@multiplier
  4594  0591  01A1               	clrf	___wmul@multiplier+1
  4595  0592  1BA0               	btfsc	___wmul@multiplier,7
  4596  0593  03A1               	decf	___wmul@multiplier+1,f
  4597  0594  0827               	movf	lcdWriteToDigitBCD@data+1,w
  4598  0595  00A3               	movwf	___wmul@multiplicand+1
  4599  0596  0826               	movf	lcdWriteToDigitBCD@data,w
  4600  0597  00A2               	movwf	___wmul@multiplicand
  4601  0598  120A  158A  25AD  120A  118A  	fcall	___wmul
  4602  059D  1283               	bcf	3,5	;RP0=0, select bank0
  4603  059E  1303               	bcf	3,6	;RP1=0, select bank0
  4604  059F  0821               	movf	?___wmul+1,w
  4605  05A0  00B0               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  4606  05A1  0820               	movf	?___wmul,w
  4607  05A2  00AF               	movwf	lcdWriteToDigitBCD@OnesDigit
  4608                           
  4609                           ;lcd.c: 48: ThousandDigit = 0;
  4610  05A3  01AD               	clrf	lcdWriteToDigitBCD@ThousandDigit
  4611                           
  4612                           ;lcd.c: 49: HundredDigit = 0;
  4613  05A4  01AC               	clrf	lcdWriteToDigitBCD@HundredDigit
  4614                           
  4615                           ;lcd.c: 50: TensDigit = 0;
  4616  05A5  01AB               	clrf	lcdWriteToDigitBCD@TensDigit
  4617  05A6                     l2462:	
  4618                           ;lcd.c: 54: while(OnesDigit >= 1000){
  4619                           
  4620  05A6  3003               	movlw	3
  4621  05A7  0230               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  4622  05A8  30E8               	movlw	232
  4623  05A9  1903               	skipnz
  4624  05AA  022F               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  4625  05AB  1C03               	btfss	3,0
  4626  05AC  2DC6               	goto	l2466
  4627                           
  4628                           ;lcd.c: 55: OnesDigit = OnesDigit - 1000;
  4629  05AD  082F               	movf	lcdWriteToDigitBCD@OnesDigit,w
  4630  05AE  3E18               	addlw	24
  4631  05AF  00AF               	movwf	lcdWriteToDigitBCD@OnesDigit
  4632  05B0  0830               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  4633  05B1  1803               	skipnc
  4634  05B2  3E01               	addlw	1
  4635  05B3  3EFC               	addlw	252
  4636  05B4  00B0               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  4637                           
  4638                           ;lcd.c: 56: ThousandDigit++;
  4639  05B5  3001               	movlw	1
  4640  05B6  00AA               	movwf	??_lcdWriteToDigitBCD
  4641  05B7  082A               	movf	??_lcdWriteToDigitBCD,w
  4642  05B8  07AD               	addwf	lcdWriteToDigitBCD@ThousandDigit,f
  4643  05B9  2DA6               	goto	l2462
  4644  05BA                     l2464:	
  4645                           ;lcd.c: 57: }
  4646                           ;lcd.c: 58: while(OnesDigit >= 100){
  4647                           
  4648                           
  4649                           ;lcd.c: 59: OnesDigit = OnesDigit - 100;
  4650  05BA  082F               	movf	lcdWriteToDigitBCD@OnesDigit,w
  4651  05BB  3E9C               	addlw	156
  4652  05BC  00AF               	movwf	lcdWriteToDigitBCD@OnesDigit
  4653  05BD  0830               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  4654  05BE  1803               	skipnc
  4655  05BF  3E01               	addlw	1
  4656  05C0  3EFF               	addlw	255
  4657  05C1  00B0               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  4658                           
  4659                           ;lcd.c: 60: HundredDigit++;
  4660  05C2  3001               	movlw	1
  4661  05C3  00AA               	movwf	??_lcdWriteToDigitBCD
  4662  05C4  082A               	movf	??_lcdWriteToDigitBCD,w
  4663  05C5  07AC               	addwf	lcdWriteToDigitBCD@HundredDigit,f
  4664  05C6                     l2466:	
  4665  05C6  3000               	movlw	0
  4666  05C7  0230               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  4667  05C8  3064               	movlw	100
  4668  05C9  1903               	skipnz
  4669  05CA  022F               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  4670  05CB  1C03               	btfss	3,0
  4671  05CC  2DDA               	goto	l2470
  4672  05CD  2DBA               	goto	l2464
  4673  05CE                     l2468:	
  4674                           ;lcd.c: 61: }
  4675                           ;lcd.c: 62: while (OnesDigit >= 10){
  4676                           
  4677                           
  4678                           ;lcd.c: 63: OnesDigit = OnesDigit - 10;
  4679  05CE  082F               	movf	lcdWriteToDigitBCD@OnesDigit,w
  4680  05CF  3EF6               	addlw	246
  4681  05D0  00AF               	movwf	lcdWriteToDigitBCD@OnesDigit
  4682  05D1  0830               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  4683  05D2  1803               	skipnc
  4684  05D3  3E01               	addlw	1
  4685  05D4  3EFF               	addlw	255
  4686  05D5  00B0               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  4687                           
  4688                           ;lcd.c: 64: TensDigit++;
  4689  05D6  3001               	movlw	1
  4690  05D7  00AA               	movwf	??_lcdWriteToDigitBCD
  4691  05D8  082A               	movf	??_lcdWriteToDigitBCD,w
  4692  05D9  07AB               	addwf	lcdWriteToDigitBCD@TensDigit,f
  4693  05DA                     l2470:	
  4694  05DA  3000               	movlw	0
  4695  05DB  0230               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  4696  05DC  300A               	movlw	10
  4697  05DD  1903               	skipnz
  4698  05DE  022F               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  4699  05DF  1803               	skipnc
  4700  05E0  2DCE               	goto	l2468
  4701                           
  4702                           ;lcd.c: 65: }
  4703                           ;lcd.c: 68: if(sign == -1 && showSign)
  4704  05E1  0A2E               	incf	lcdWriteToDigitBCD@sign,w
  4705  05E2  1D03               	btfss	3,2
  4706  05E3  2DE9               	goto	l2478
  4707  05E4  0829               	movf	lcdWriteToDigitBCD@showSign,w
  4708  05E5  1903               	btfsc	3,2
  4709  05E6  2DE9               	goto	l2478
  4710                           
  4711                           ;lcd.c: 69: lcdWriteData((unsigned char)45);
  4712  05E7  302D               	movlw	45
  4713  05E8  2DF2               	goto	L5
  4714  05E9                     l2478:	
  4715                           
  4716                           ;lcd.c: 70: else if (sign == 1 && showSign){
  4717  05E9  1283               	bcf	3,5	;RP0=0, select bank0
  4718  05EA  1303               	bcf	3,6	;RP1=0, select bank0
  4719  05EB  032E               	decf	lcdWriteToDigitBCD@sign,w
  4720  05EC  1D03               	btfss	3,2
  4721  05ED  2DF7               	goto	l2484
  4722  05EE  0829               	movf	lcdWriteToDigitBCD@showSign,w
  4723  05EF  1903               	btfsc	3,2
  4724  05F0  2DF7               	goto	l2484
  4725                           
  4726                           ;lcd.c: 71: lcdWriteData((unsigned char)43);
  4727  05F1  302B               	movlw	43
  4728  05F2                     L5:	
  4729  05F2  120A  158A  2505  120A  118A  	fcall	_lcdWriteData
  4730  05F7                     l2484:	
  4731                           
  4732                           ;lcd.c: 72: }
  4733                           ;lcd.c: 74: if(digits>3)
  4734  05F7  3004               	movlw	4
  4735  05F8  1283               	bcf	3,5	;RP0=0, select bank0
  4736  05F9  1303               	bcf	3,6	;RP1=0, select bank0
  4737  05FA  0228               	subwf	lcdWriteToDigitBCD@digits,w
  4738  05FB  1C03               	skipc
  4739  05FC  2E04               	goto	l2488
  4740                           
  4741                           ;lcd.c: 75: lcdWriteData((unsigned char)ThousandDigit + 48);
  4742  05FD  082D               	movf	lcdWriteToDigitBCD@ThousandDigit,w
  4743  05FE  3E30               	addlw	48
  4744  05FF  120A  158A  2505  120A  118A  	fcall	_lcdWriteData
  4745  0604                     l2488:	
  4746                           
  4747                           ;lcd.c: 76: if(digits>2)
  4748  0604  3003               	movlw	3
  4749  0605  1283               	bcf	3,5	;RP0=0, select bank0
  4750  0606  1303               	bcf	3,6	;RP1=0, select bank0
  4751  0607  0228               	subwf	lcdWriteToDigitBCD@digits,w
  4752  0608  1C03               	skipc
  4753  0609  2E11               	goto	l2492
  4754                           
  4755                           ;lcd.c: 77: lcdWriteData((unsigned char)HundredDigit + 48);
  4756  060A  082C               	movf	lcdWriteToDigitBCD@HundredDigit,w
  4757  060B  3E30               	addlw	48
  4758  060C  120A  158A  2505  120A  118A  	fcall	_lcdWriteData
  4759  0611                     l2492:	
  4760                           
  4761                           ;lcd.c: 78: if(digits>1)
  4762  0611  3002               	movlw	2
  4763  0612  1283               	bcf	3,5	;RP0=0, select bank0
  4764  0613  1303               	bcf	3,6	;RP1=0, select bank0
  4765  0614  0228               	subwf	lcdWriteToDigitBCD@digits,w
  4766  0615  1C03               	skipc
  4767  0616  2E1E               	goto	l336
  4768                           
  4769                           ;lcd.c: 79: lcdWriteData((unsigned char)TensDigit + 48);
  4770  0617  082B               	movf	lcdWriteToDigitBCD@TensDigit,w
  4771  0618  3E30               	addlw	48
  4772  0619  120A  158A  2505  120A  118A  	fcall	_lcdWriteData
  4773  061E                     l336:	
  4774                           
  4775                           ;lcd.c: 81: lcdWriteData((unsigned char)OnesDigit + 48);
  4776  061E  1283               	bcf	3,5	;RP0=0, select bank0
  4777  061F  1303               	bcf	3,6	;RP1=0, select bank0
  4778  0620  082F               	movf	lcdWriteToDigitBCD@OnesDigit,w
  4779  0621  3E30               	addlw	48
  4780  0622  120A  158A  2505   	fcall	_lcdWriteData
  4781  0625  0008               	return
  4782  0626                     __end_of_lcdWriteToDigitBCD:	
  4783                           
  4784                           	psect	text23
  4785  0DAD                     __ptext23:	
  4786 ;; *************** function ___wmul *****************
  4787 ;; Defined at:
  4788 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  4789 ;; Parameters:    Size  Location     Type
  4790 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4791 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4792 ;; Auto vars:     Size  Location     Type
  4793 ;;  product         2    4[BANK0 ] unsigned int 
  4794 ;; Return value:  Size  Location     Type
  4795 ;;                  2    0[BANK0 ] unsigned int 
  4796 ;; Registers used:
  4797 ;;		wreg, status,2, status,0
  4798 ;; Tracked objects:
  4799 ;;		On entry : 0/0
  4800 ;;		On exit  : 0/0
  4801 ;;		Unchanged: 0/0
  4802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4803 ;;      Params:         0       4       0       0       0
  4804 ;;      Locals:         0       2       0       0       0
  4805 ;;      Temps:          0       0       0       0       0
  4806 ;;      Totals:         0       6       0       0       0
  4807 ;;Total ram usage:        6 bytes
  4808 ;; Hardware stack levels used:    1
  4809 ;; Hardware stack levels required when called:    2
  4810 ;; This function calls:
  4811 ;;		Nothing
  4812 ;; This function is called by:
  4813 ;;		_lcdWriteToDigitBCD
  4814 ;; This function uses a non-reentrant model
  4815 ;;
  4816                           
  4817                           
  4818                           ;psect for function ___wmul
  4819  0DAD                     ___wmul:	
  4820                           
  4821                           ;incstack = 0
  4822                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4823  0DAD  1283               	bcf	3,5	;RP0=0, select bank0
  4824  0DAE  1303               	bcf	3,6	;RP1=0, select bank0
  4825  0DAF  01A4               	clrf	___wmul@product
  4826  0DB0  01A5               	clrf	___wmul@product+1
  4827  0DB1                     l2392:	
  4828  0DB1  1C20               	btfss	___wmul@multiplier,0
  4829  0DB2  2DB9               	goto	l424
  4830  0DB3  0822               	movf	___wmul@multiplicand,w
  4831  0DB4  07A4               	addwf	___wmul@product,f
  4832  0DB5  1803               	skipnc
  4833  0DB6  0AA5               	incf	___wmul@product+1,f
  4834  0DB7  0823               	movf	___wmul@multiplicand+1,w
  4835  0DB8  07A5               	addwf	___wmul@product+1,f
  4836  0DB9                     l424:	
  4837  0DB9  3001               	movlw	1
  4838  0DBA                     u2765:	
  4839  0DBA  1003               	clrc
  4840  0DBB  0DA2               	rlf	___wmul@multiplicand,f
  4841  0DBC  0DA3               	rlf	___wmul@multiplicand+1,f
  4842  0DBD  3EFF               	addlw	-1
  4843  0DBE  1D03               	skipz
  4844  0DBF  2DBA               	goto	u2765
  4845  0DC0  3001               	movlw	1
  4846  0DC1                     u2775:	
  4847  0DC1  1003               	clrc
  4848  0DC2  0CA1               	rrf	___wmul@multiplier+1,f
  4849  0DC3  0CA0               	rrf	___wmul@multiplier,f
  4850  0DC4  3EFF               	addlw	-1
  4851  0DC5  1D03               	skipz
  4852  0DC6  2DC1               	goto	u2775
  4853  0DC7  0820               	movf	___wmul@multiplier,w
  4854  0DC8  0421               	iorwf	___wmul@multiplier+1,w
  4855  0DC9  1D03               	btfss	3,2
  4856  0DCA  2DB1               	goto	l2392
  4857  0DCB  0825               	movf	___wmul@product+1,w
  4858  0DCC  00A1               	movwf	?___wmul+1
  4859  0DCD  0824               	movf	___wmul@product,w
  4860  0DCE  00A0               	movwf	?___wmul
  4861  0DCF  0008               	return
  4862  0DD0                     __end_of___wmul:	
  4863                           
  4864                           	psect	text24
  4865  0D8D                     __ptext24:	
  4866 ;; *************** function _lcdWriteString *****************
  4867 ;; Defined at:
  4868 ;;		line 33 in file "lcd.c"
  4869 ;; Parameters:    Size  Location     Type
  4870 ;;  s               1    wreg     PTR unsigned char 
  4871 ;;		 -> STR_5(7), STR_4(7), STR_3(3), STR_2(3), 
  4872 ;;		 -> STR_1(5), 
  4873 ;; Auto vars:     Size  Location     Type
  4874 ;;  s               1    4[BANK0 ] PTR unsigned char 
  4875 ;;		 -> STR_5(7), STR_4(7), STR_3(3), STR_2(3), 
  4876 ;;		 -> STR_1(5), 
  4877 ;; Return value:  Size  Location     Type
  4878 ;;                  1    wreg      void 
  4879 ;; Registers used:
  4880 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4881 ;; Tracked objects:
  4882 ;;		On entry : 0/0
  4883 ;;		On exit  : 0/0
  4884 ;;		Unchanged: 0/0
  4885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4886 ;;      Params:         0       0       0       0       0
  4887 ;;      Locals:         0       1       0       0       0
  4888 ;;      Temps:          0       1       0       0       0
  4889 ;;      Totals:         0       2       0       0       0
  4890 ;;Total ram usage:        2 bytes
  4891 ;; Hardware stack levels used:    1
  4892 ;; Hardware stack levels required when called:    3
  4893 ;; This function calls:
  4894 ;;		_lcdWriteData
  4895 ;; This function is called by:
  4896 ;;		_main
  4897 ;;		_initializeMotor
  4898 ;;		_move
  4899 ;; This function uses a non-reentrant model
  4900 ;;
  4901                           
  4902                           
  4903                           ;psect for function _lcdWriteString
  4904  0D8D                     _lcdWriteString:	
  4905                           
  4906                           ;incstack = 0
  4907                           ; Regs used in _lcdWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4908                           ;lcdWriteString@s stored from wreg
  4909  0D8D  1283               	bcf	3,5	;RP0=0, select bank0
  4910  0D8E  1303               	bcf	3,6	;RP1=0, select bank0
  4911  0D8F  00A4               	movwf	lcdWriteString@s
  4912  0D90                     l2446:	
  4913                           ;lcd.c: 35: while(*s) lcdWriteData(*s++);
  4914                           
  4915  0D90  0824               	movf	lcdWriteString@s,w
  4916  0D91  0084               	movwf	4
  4917  0D92  120A  158A  2000  120A  158A  	fcall	stringdir
  4918  0D97  3A00               	xorlw	0
  4919  0D98  1903               	btfsc	3,2
  4920  0D99  0008               	return
  4921  0D9A  0824               	movf	lcdWriteString@s,w
  4922  0D9B  0084               	movwf	4
  4923  0D9C  120A  158A  2000  120A  158A  	fcall	stringdir
  4924  0DA1  120A  158A  2505  120A  158A  	fcall	_lcdWriteData
  4925  0DA6  3001               	movlw	1
  4926  0DA7  1283               	bcf	3,5	;RP0=0, select bank0
  4927  0DA8  1303               	bcf	3,6	;RP1=0, select bank0
  4928  0DA9  00A3               	movwf	??_lcdWriteString
  4929  0DAA  0823               	movf	??_lcdWriteString,w
  4930  0DAB  07A4               	addwf	lcdWriteString@s,f
  4931  0DAC  2D90               	goto	l2446
  4932  0DAD                     __end_of_lcdWriteString:	
  4933                           
  4934                           	psect	text25
  4935  0D05                     __ptext25:	
  4936 ;; *************** function _lcdWriteData *****************
  4937 ;; Defined at:
  4938 ;;		line 17 in file "lcd.c"
  4939 ;; Parameters:    Size  Location     Type
  4940 ;;  databyte        1    wreg     unsigned char 
  4941 ;; Auto vars:     Size  Location     Type
  4942 ;;  databyte        1    2[BANK0 ] unsigned char 
  4943 ;; Return value:  Size  Location     Type
  4944 ;;                  1    wreg      void 
  4945 ;; Registers used:
  4946 ;;		wreg
  4947 ;; Tracked objects:
  4948 ;;		On entry : 0/0
  4949 ;;		On exit  : 0/0
  4950 ;;		Unchanged: 0/0
  4951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4952 ;;      Params:         0       0       0       0       0
  4953 ;;      Locals:         0       1       0       0       0
  4954 ;;      Temps:          0       2       0       0       0
  4955 ;;      Totals:         0       3       0       0       0
  4956 ;;Total ram usage:        3 bytes
  4957 ;; Hardware stack levels used:    1
  4958 ;; Hardware stack levels required when called:    2
  4959 ;; This function calls:
  4960 ;;		Nothing
  4961 ;; This function is called by:
  4962 ;;		_lcdWriteString
  4963 ;;		_lcdWriteToDigitBCD
  4964 ;; This function uses a non-reentrant model
  4965 ;;
  4966                           
  4967                           
  4968                           ;psect for function _lcdWriteData
  4969  0D05                     _lcdWriteData:	
  4970                           
  4971                           ;incstack = 0
  4972                           ; Regs used in _lcdWriteData: [wreg]
  4973                           ;lcdWriteData@databyte stored from wreg
  4974  0D05  1283               	bcf	3,5	;RP0=0, select bank0
  4975  0D06  1303               	bcf	3,6	;RP1=0, select bank0
  4976  0D07  00A2               	movwf	lcdWriteData@databyte
  4977                           
  4978                           ;lcd.c: 18: RE2 = 0;
  4979  0D08  1109               	bcf	9,2	;volatile
  4980                           
  4981                           ;lcd.c: 19: RE1 = 0;
  4982  0D09  1089               	bcf	9,1	;volatile
  4983                           
  4984                           ;lcd.c: 20: RE0 = 1;
  4985  0D0A  1409               	bsf	9,0	;volatile
  4986                           
  4987                           ;lcd.c: 21: PORTD = databyte;
  4988  0D0B  0822               	movf	lcdWriteData@databyte,w
  4989  0D0C  0088               	movwf	8	;volatile
  4990                           
  4991                           ;lcd.c: 22: RE2 = 1;
  4992  0D0D  1509               	bsf	9,2	;volatile
  4993                           
  4994                           ;lcd.c: 23: RE2 = 0;
  4995  0D0E  1109               	bcf	9,2	;volatile
  4996                           
  4997                           ;lcd.c: 24: _delay((unsigned long)((1)*(20000000/4000.0)));
  4998  0D0F  3007               	movlw	7
  4999  0D10  00A1               	movwf	??_lcdWriteData+1
  5000  0D11  307D               	movlw	125
  5001  0D12  00A0               	movwf	??_lcdWriteData
  5002  0D13                     u3667:	
  5003  0D13  0BA0               	decfsz	??_lcdWriteData,f
  5004  0D14  2D13               	goto	u3667
  5005  0D15  0BA1               	decfsz	??_lcdWriteData+1,f
  5006  0D16  2D13               	goto	u3667
  5007  0D17  0008               	return
  5008  0D18                     __end_of_lcdWriteData:	
  5009                           
  5010                           	psect	text26
  5011  0CA8                     __ptext26:	
  5012 ;; *************** function _lcdSetCursor *****************
  5013 ;; Defined at:
  5014 ;;		line 28 in file "lcd.c"
  5015 ;; Parameters:    Size  Location     Type
  5016 ;;  address         1    wreg     unsigned char 
  5017 ;; Auto vars:     Size  Location     Type
  5018 ;;  address         1    3[BANK0 ] unsigned char 
  5019 ;; Return value:  Size  Location     Type
  5020 ;;                  1    wreg      void 
  5021 ;; Registers used:
  5022 ;;		wreg, status,2, status,0, pclath, cstack
  5023 ;; Tracked objects:
  5024 ;;		On entry : 0/0
  5025 ;;		On exit  : 0/0
  5026 ;;		Unchanged: 0/0
  5027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5028 ;;      Params:         0       0       0       0       0
  5029 ;;      Locals:         0       1       0       0       0
  5030 ;;      Temps:          0       0       0       0       0
  5031 ;;      Totals:         0       1       0       0       0
  5032 ;;Total ram usage:        1 bytes
  5033 ;; Hardware stack levels used:    1
  5034 ;; Hardware stack levels required when called:    3
  5035 ;; This function calls:
  5036 ;;		_lcdWriteControl
  5037 ;; This function is called by:
  5038 ;;		_main
  5039 ;;		_initializeMotor
  5040 ;;		_move
  5041 ;; This function uses a non-reentrant model
  5042 ;;
  5043                           
  5044                           
  5045                           ;psect for function _lcdSetCursor
  5046  0CA8                     _lcdSetCursor:	
  5047                           
  5048                           ;incstack = 0
  5049                           ; Regs used in _lcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  5050                           ;lcdSetCursor@address stored from wreg
  5051  0CA8  1283               	bcf	3,5	;RP0=0, select bank0
  5052  0CA9  1303               	bcf	3,6	;RP1=0, select bank0
  5053  0CAA  00A3               	movwf	lcdSetCursor@address
  5054                           
  5055                           ;lcd.c: 29: address |= 0b10000000;
  5056  0CAB  17A3               	bsf	lcdSetCursor@address,7
  5057                           
  5058                           ;lcd.c: 30: lcdWriteControl(address);
  5059  0CAC  0823               	movf	lcdSetCursor@address,w
  5060  0CAD  120A  158A  2518   	fcall	_lcdWriteControl
  5061  0CB0  0008               	return
  5062  0CB1                     __end_of_lcdSetCursor:	
  5063                           
  5064                           	psect	text27
  5065  0D18                     __ptext27:	
  5066 ;; *************** function _lcdWriteControl *****************
  5067 ;; Defined at:
  5068 ;;		line 6 in file "lcd.c"
  5069 ;; Parameters:    Size  Location     Type
  5070 ;;  databyte        1    wreg     unsigned char 
  5071 ;; Auto vars:     Size  Location     Type
  5072 ;;  databyte        1    2[BANK0 ] unsigned char 
  5073 ;; Return value:  Size  Location     Type
  5074 ;;                  1    wreg      void 
  5075 ;; Registers used:
  5076 ;;		wreg
  5077 ;; Tracked objects:
  5078 ;;		On entry : 0/0
  5079 ;;		On exit  : 0/0
  5080 ;;		Unchanged: 0/0
  5081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5082 ;;      Params:         0       0       0       0       0
  5083 ;;      Locals:         0       1       0       0       0
  5084 ;;      Temps:          0       2       0       0       0
  5085 ;;      Totals:         0       3       0       0       0
  5086 ;;Total ram usage:        3 bytes
  5087 ;; Hardware stack levels used:    1
  5088 ;; Hardware stack levels required when called:    2
  5089 ;; This function calls:
  5090 ;;		Nothing
  5091 ;; This function is called by:
  5092 ;;		_lcdSetCursor
  5093 ;;		_setupLCD
  5094 ;; This function uses a non-reentrant model
  5095 ;;
  5096                           
  5097                           
  5098                           ;psect for function _lcdWriteControl
  5099  0D18                     _lcdWriteControl:	
  5100                           
  5101                           ;incstack = 0
  5102                           ; Regs used in _lcdWriteControl: [wreg]
  5103                           ;lcdWriteControl@databyte stored from wreg
  5104  0D18  1283               	bcf	3,5	;RP0=0, select bank0
  5105  0D19  1303               	bcf	3,6	;RP1=0, select bank0
  5106  0D1A  00A2               	movwf	lcdWriteControl@databyte
  5107                           
  5108                           ;lcd.c: 7: RE2 = 0;
  5109  0D1B  1109               	bcf	9,2	;volatile
  5110                           
  5111                           ;lcd.c: 8: RE1 = 0;
  5112  0D1C  1089               	bcf	9,1	;volatile
  5113                           
  5114                           ;lcd.c: 9: RE0 = 0;
  5115  0D1D  1009               	bcf	9,0	;volatile
  5116                           
  5117                           ;lcd.c: 10: PORTD = databyte;
  5118  0D1E  0822               	movf	lcdWriteControl@databyte,w
  5119  0D1F  0088               	movwf	8	;volatile
  5120                           
  5121                           ;lcd.c: 11: RE2 = 1;
  5122  0D20  1509               	bsf	9,2	;volatile
  5123                           
  5124                           ;lcd.c: 12: RE2 = 0;
  5125  0D21  1109               	bcf	9,2	;volatile
  5126                           
  5127                           ;lcd.c: 13: _delay((unsigned long)((2)*(20000000/4000.0)));
  5128  0D22  300D               	movlw	13
  5129  0D23  00A1               	movwf	??_lcdWriteControl+1
  5130  0D24  30FB               	movlw	251
  5131  0D25  00A0               	movwf	??_lcdWriteControl
  5132  0D26                     u3677:	
  5133  0D26  0BA0               	decfsz	??_lcdWriteControl,f
  5134  0D27  2D26               	goto	u3677
  5135  0D28  0BA1               	decfsz	??_lcdWriteControl+1,f
  5136  0D29  2D26               	goto	u3677
  5137  0D2A  2D2B               	nop2
  5138  0D2B  0008               	return
  5139  0D2C                     __end_of_lcdWriteControl:	
  5140                           
  5141                           	psect	text28
  5142  0D2C                     __ptext28:	
  5143 ;; *************** function _initializeADC *****************
  5144 ;; Defined at:
  5145 ;;		line 5 in file "adConv.c"
  5146 ;; Parameters:    Size  Location     Type
  5147 ;;		None
  5148 ;; Auto vars:     Size  Location     Type
  5149 ;;		None
  5150 ;; Return value:  Size  Location     Type
  5151 ;;                  1    wreg      void 
  5152 ;; Registers used:
  5153 ;;		wreg
  5154 ;; Tracked objects:
  5155 ;;		On entry : 0/0
  5156 ;;		On exit  : 0/0
  5157 ;;		Unchanged: 0/0
  5158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5159 ;;      Params:         0       0       0       0       0
  5160 ;;      Locals:         0       0       0       0       0
  5161 ;;      Temps:          0       0       0       0       0
  5162 ;;      Totals:         0       0       0       0       0
  5163 ;;Total ram usage:        0 bytes
  5164 ;; Hardware stack levels used:    1
  5165 ;; Hardware stack levels required when called:    2
  5166 ;; This function calls:
  5167 ;;		Nothing
  5168 ;; This function is called by:
  5169 ;;		_initialise
  5170 ;; This function uses a non-reentrant model
  5171 ;;
  5172                           
  5173                           
  5174                           ;psect for function _initializeADC
  5175  0D2C                     _initializeADC:	
  5176                           
  5177                           ;adConv.c: 7: TRISA = 0b11111111;
  5178                           
  5179                           ;incstack = 0
  5180                           ; Regs used in _initializeADC: [wreg]
  5181  0D2C  30FF               	movlw	255
  5182  0D2D  1683               	bsf	3,5	;RP0=1, select bank1
  5183  0D2E  1303               	bcf	3,6	;RP1=0, select bank1
  5184  0D2F  0085               	movwf	5	;volatile
  5185                           
  5186                           ;adConv.c: 9: ADFM = 1;
  5187  0D30  179F               	bsf	31,7	;volatile
  5188                           
  5189                           ;adConv.c: 11: ADCS2 = 0;
  5190  0D31  131F               	bcf	31,6	;volatile
  5191                           
  5192                           ;adConv.c: 14: PCFG3 = 0;
  5193  0D32  119F               	bcf	31,3	;volatile
  5194                           
  5195                           ;adConv.c: 15: PCFG2 = 0;
  5196  0D33  111F               	bcf	31,2	;volatile
  5197                           
  5198                           ;adConv.c: 16: PCFG1 = 1;
  5199  0D34  149F               	bsf	31,1	;volatile
  5200                           
  5201                           ;adConv.c: 17: PCFG0 = 1;
  5202  0D35  141F               	bsf	31,0	;volatile
  5203                           
  5204                           ;adConv.c: 19: ADCON0 = 0b10000001;
  5205  0D36  3081               	movlw	129
  5206  0D37  1283               	bcf	3,5	;RP0=0, select bank0
  5207  0D38  1303               	bcf	3,6	;RP1=0, select bank0
  5208  0D39  009F               	movwf	31	;volatile
  5209                           
  5210                           ;adConv.c: 23: ADIF = 0;
  5211  0D3A  130C               	bcf	12,6	;volatile
  5212                           
  5213                           ;adConv.c: 24: ADIE = 1;
  5214  0D3B  1683               	bsf	3,5	;RP0=1, select bank1
  5215  0D3C  1303               	bcf	3,6	;RP1=0, select bank1
  5216  0D3D  170C               	bsf	12,6	;volatile
  5217                           
  5218                           ;adConv.c: 25: PEIE = 1;
  5219  0D3E  170B               	bsf	11,6	;volatile
  5220                           
  5221                           ;adConv.c: 26: GIE = 1;
  5222  0D3F  178B               	bsf	11,7	;volatile
  5223  0D40  0008               	return
  5224  0D41                     __end_of_initializeADC:	
  5225                           
  5226                           	psect	text29
  5227  0DD0                     __ptext29:	
  5228 ;; *************** function _isr *****************
  5229 ;; Defined at:
  5230 ;;		line 13 in file "main.c"
  5231 ;; Parameters:    Size  Location     Type
  5232 ;;		None
  5233 ;; Auto vars:     Size  Location     Type
  5234 ;;		None
  5235 ;; Return value:  Size  Location     Type
  5236 ;;                  1    wreg      void 
  5237 ;; Registers used:
  5238 ;;		wreg, status,2, status,0, pclath, cstack
  5239 ;; Tracked objects:
  5240 ;;		On entry : 0/0
  5241 ;;		On exit  : 0/0
  5242 ;;		Unchanged: 0/0
  5243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5244 ;;      Params:         0       0       0       0       0
  5245 ;;      Locals:         0       0       0       0       0
  5246 ;;      Temps:          4       0       0       0       0
  5247 ;;      Totals:         4       0       0       0       0
  5248 ;;Total ram usage:        4 bytes
  5249 ;; Hardware stack levels used:    1
  5250 ;; Hardware stack levels required when called:    1
  5251 ;; This function calls:
  5252 ;;		_debounceButtons
  5253 ;;		_flashLed
  5254 ;;		_lcdRefresh
  5255 ;; This function is called by:
  5256 ;;		Interrupt level 1
  5257 ;; This function uses a non-reentrant model
  5258 ;;
  5259                           
  5260                           
  5261                           ;psect for function _isr
  5262  0DD0                     _isr:	
  5263                           
  5264                           ;main.c: 14: if (T0IF){
  5265  0DD0  1D0B               	btfss	11,2	;volatile
  5266  0DD1  2DE4               	goto	i1l2276
  5267                           
  5268                           ;main.c: 15: T0IF = 0;
  5269  0DD2  110B               	bcf	11,2	;volatile
  5270                           
  5271                           ;main.c: 16: TMR0 = 100;
  5272  0DD3  3064               	movlw	100
  5273  0DD4  0081               	movwf	1	;volatile
  5274                           
  5275                           ;main.c: 17: flashLed();
  5276  0DD5  120A  158A  2541  120A  158A  	fcall	_flashLed
  5277                           
  5278                           ;main.c: 18: debounceButtons();
  5279  0DDA  120A  158A  26F3  120A  158A  	fcall	_debounceButtons
  5280                           
  5281                           ;main.c: 19: lcdRefresh();
  5282  0DDF  120A  158A  24BB  120A  158A  	fcall	_lcdRefresh
  5283  0DE4                     i1l2276:	
  5284                           
  5285                           ;main.c: 20: }
  5286                           ;main.c: 21: if(ADIF){
  5287  0DE4  1283               	bcf	3,5	;RP0=0, select bank0
  5288  0DE5  1303               	bcf	3,6	;RP1=0, select bank0
  5289  0DE6  1F0C               	btfss	12,6	;volatile
  5290  0DE7  2DEA               	goto	i1l93
  5291                           
  5292                           ;main.c: 22: conversionDone = 1;
  5293  0DE8  1470               	bsf	_conversionDone/(0+8),_conversionDone& (0+7)	;volatile
  5294                           
  5295                           ;main.c: 23: ADIF = 0;
  5296  0DE9  130C               	bcf	12,6	;volatile
  5297  0DEA                     i1l93:	
  5298  0DEA  0876               	movf	??_isr+3,w
  5299  0DEB  00FF               	movwf	127
  5300  0DEC  0875               	movf	??_isr+2,w
  5301  0DED  008A               	movwf	10
  5302  0DEE  0874               	movf	??_isr+1,w
  5303  0DEF  0084               	movwf	4
  5304  0DF0  0E73               	swapf	??_isr^(0+-128),w
  5305  0DF1  0083               	movwf	3
  5306  0DF2  0EFE               	swapf	126,f
  5307  0DF3  0E7E               	swapf	126,w
  5308  0DF4  0009               	retfie
  5309  0DF5                     __end_of_isr:	
  5310                           
  5311                           	psect	intentry
  5312  0004                     __pintentry:	
  5313                           ;incstack = 0
  5314                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  5315                           
  5316  0004                     interrupt_function:	
  5317  007E                     saved_w	set	btemp
  5318  0004  00FE               	movwf	btemp
  5319  0005  0E03               	swapf	3,w
  5320  0006  00F3               	movwf	??_isr
  5321  0007  0804               	movf	4,w
  5322  0008  00F4               	movwf	??_isr+1
  5323  0009  080A               	movf	10,w
  5324  000A  00F5               	movwf	??_isr+2
  5325  000B  1283               	bcf	3,5	;RP0=0, select bank0
  5326  000C  1303               	bcf	3,6	;RP1=0, select bank0
  5327  000D  087F               	movf	btemp+1,w
  5328  000E  00F6               	movwf	??_isr+3
  5329  000F  120A  158A  2DD0   	ljmp	_isr
  5330                           
  5331                           	psect	text30
  5332  0CBB                     __ptext30:	
  5333 ;; *************** function _lcdRefresh *****************
  5334 ;; Defined at:
  5335 ;;		line 24 in file "timer0.c"
  5336 ;; Parameters:    Size  Location     Type
  5337 ;;		None
  5338 ;; Auto vars:     Size  Location     Type
  5339 ;;		None
  5340 ;; Return value:  Size  Location     Type
  5341 ;;                  1    wreg      void 
  5342 ;; Registers used:
  5343 ;;		wreg, status,2, status,0
  5344 ;; Tracked objects:
  5345 ;;		On entry : 0/0
  5346 ;;		On exit  : 0/0
  5347 ;;		Unchanged: 0/0
  5348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5349 ;;      Params:         0       0       0       0       0
  5350 ;;      Locals:         0       0       0       0       0
  5351 ;;      Temps:          1       0       0       0       0
  5352 ;;      Totals:         1       0       0       0       0
  5353 ;;Total ram usage:        1 bytes
  5354 ;; Hardware stack levels used:    1
  5355 ;; This function calls:
  5356 ;;		Nothing
  5357 ;; This function is called by:
  5358 ;;		_isr
  5359 ;; This function uses a non-reentrant model
  5360 ;;
  5361                           
  5362                           
  5363                           ;psect for function _lcdRefresh
  5364  0CBB                     _lcdRefresh:	
  5365                           
  5366                           ;timer0.c: 25: irLcdCounter++;
  5367                           
  5368                           ;incstack = 0
  5369                           ; Regs used in _lcdRefresh: [wreg+status,2+status,0]
  5370  0CBB  3001               	movlw	1
  5371  0CBC  00F2               	movwf	??_lcdRefresh
  5372  0CBD  0872               	movf	??_lcdRefresh,w
  5373  0CBE  1683               	bsf	3,5	;RP0=1, select bank1
  5374  0CBF  1303               	bcf	3,6	;RP1=0, select bank1
  5375  0CC0  07D7               	addwf	_irLcdCounter^(0+128),f	;volatile
  5376                           
  5377                           ;timer0.c: 26: if(irLcdCounter==50){
  5378  0CC1  3032               	movlw	50
  5379  0CC2  0657               	xorwf	_irLcdCounter^(0+128),w	;volatile
  5380  0CC3  1D03               	btfss	3,2
  5381  0CC4  0008               	return
  5382                           
  5383                           ;timer0.c: 27: updateLcdIRData = 1;
  5384  0CC5  1571               	bsf	_updateLcdIRData/(0+8),_updateLcdIRData& (0+7)	;volatile
  5385                           
  5386                           ;timer0.c: 28: irLcdCounter = 0;
  5387  0CC6  01D7               	clrf	_irLcdCounter^(0+128)	;volatile
  5388  0CC7  0008               	return
  5389  0CC8                     __end_of_lcdRefresh:	
  5390                           
  5391                           	psect	text31
  5392  0D41                     __ptext31:	
  5393 ;; *************** function _flashLed *****************
  5394 ;; Defined at:
  5395 ;;		line 34 in file "timer0.c"
  5396 ;; Parameters:    Size  Location     Type
  5397 ;;		None
  5398 ;; Auto vars:     Size  Location     Type
  5399 ;;		None
  5400 ;; Return value:  Size  Location     Type
  5401 ;;                  1    wreg      void 
  5402 ;; Registers used:
  5403 ;;		wreg, status,2, status,0
  5404 ;; Tracked objects:
  5405 ;;		On entry : 0/0
  5406 ;;		On exit  : 0/0
  5407 ;;		Unchanged: 0/0
  5408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5409 ;;      Params:         0       0       0       0       0
  5410 ;;      Locals:         0       0       0       0       0
  5411 ;;      Temps:          0       0       0       0       0
  5412 ;;      Totals:         0       0       0       0       0
  5413 ;;Total ram usage:        0 bytes
  5414 ;; Hardware stack levels used:    1
  5415 ;; This function calls:
  5416 ;;		Nothing
  5417 ;; This function is called by:
  5418 ;;		_isr
  5419 ;; This function uses a non-reentrant model
  5420 ;;
  5421                           
  5422                           
  5423                           ;psect for function _flashLed
  5424  0D41                     _flashLed:	
  5425                           
  5426                           ;timer0.c: 35: rtcCounter++;
  5427                           
  5428                           ;incstack = 0
  5429                           ; Regs used in _flashLed: [wreg+status,2+status,0]
  5430  0D41  3001               	movlw	1
  5431  0D42  1683               	bsf	3,5	;RP0=1, select bank1
  5432  0D43  1303               	bcf	3,6	;RP1=0, select bank1
  5433  0D44  07D5               	addwf	_rtcCounter^(0+128),f	;volatile
  5434  0D45  1803               	skipnc
  5435  0D46  0AD6               	incf	(_rtcCounter+1)^(0+128),f	;volatile
  5436  0D47  3000               	movlw	0
  5437  0D48  07D6               	addwf	(_rtcCounter+1)^(0+128),f	;volatile
  5438                           
  5439                           ;timer0.c: 36: if(rtcCounter == 500){
  5440  0D49  30F4               	movlw	244
  5441  0D4A  0655               	xorwf	_rtcCounter^(0+128),w	;volatile
  5442  0D4B  1D03               	skipz
  5443  0D4C  0008               	return
  5444  0D4D  0356               	decf	(_rtcCounter+1)^(0+128),w	;volatile
  5445  0D4E  1D03               	btfss	3,2
  5446  0D4F  0008               	return
  5447                           
  5448                           ;timer0.c: 37: RB5 = !RB5;
  5449  0D50  3020               	movlw	32
  5450  0D51  1283               	bcf	3,5	;RP0=0, select bank0
  5451  0D52  1303               	bcf	3,6	;RP1=0, select bank0
  5452  0D53  0686               	xorwf	6,f
  5453                           
  5454                           ;timer0.c: 38: rtcCounter = 0;
  5455  0D54  1683               	bsf	3,5	;RP0=1, select bank1
  5456  0D55  1303               	bcf	3,6	;RP1=0, select bank1
  5457  0D56  01D5               	clrf	_rtcCounter^(0+128)	;volatile
  5458  0D57  01D6               	clrf	(_rtcCounter+1)^(0+128)	;volatile
  5459  0D58  0008               	return
  5460  0D59                     __end_of_flashLed:	
  5461                           
  5462                           	psect	text32
  5463  0EF3                     __ptext32:	
  5464 ;; *************** function _debounceButtons *****************
  5465 ;; Defined at:
  5466 ;;		line 43 in file "timer0.c"
  5467 ;; Parameters:    Size  Location     Type
  5468 ;;		None
  5469 ;; Auto vars:     Size  Location     Type
  5470 ;;		None
  5471 ;; Return value:  Size  Location     Type
  5472 ;;                  1    wreg      void 
  5473 ;; Registers used:
  5474 ;;		wreg, status,2, status,0
  5475 ;; Tracked objects:
  5476 ;;		On entry : 0/0
  5477 ;;		On exit  : 0/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5480 ;;      Params:         0       0       0       0       0
  5481 ;;      Locals:         0       0       0       0       0
  5482 ;;      Temps:          1       0       0       0       0
  5483 ;;      Totals:         1       0       0       0       0
  5484 ;;Total ram usage:        1 bytes
  5485 ;; Hardware stack levels used:    1
  5486 ;; This function calls:
  5487 ;;		Nothing
  5488 ;; This function is called by:
  5489 ;;		_isr
  5490 ;; This function uses a non-reentrant model
  5491 ;;
  5492                           
  5493                           
  5494                           ;psect for function _debounceButtons
  5495  0EF3                     _debounceButtons:	
  5496                           
  5497                           ;timer0.c: 45: if(!RB0) {
  5498                           
  5499                           ;incstack = 0
  5500                           ; Regs used in _debounceButtons: [wreg+status,2+status,0]
  5501  0EF3  1283               	bcf	3,5	;RP0=0, select bank0
  5502  0EF4  1303               	bcf	3,6	;RP1=0, select bank0
  5503  0EF5  1806               	btfsc	6,0	;volatile
  5504  0EF6  2F03               	goto	i1l2158
  5505                           
  5506                           ;timer0.c: 46: pbCounter++;
  5507  0EF7  3001               	movlw	1
  5508  0EF8  00F2               	movwf	??_debounceButtons
  5509  0EF9  0872               	movf	??_debounceButtons,w
  5510  0EFA  07F8               	addwf	_pbCounter,f	;volatile
  5511                           
  5512                           ;timer0.c: 47: if(pbCounter >10 &&pb0Released){
  5513  0EFB  300B               	movlw	11
  5514  0EFC  0278               	subwf	_pbCounter,w	;volatile
  5515  0EFD  1803               	btfsc	3,0
  5516  0EFE  1DF0               	btfss	_pb0Released/(0+8),_pb0Released& (0+7)	;volatile
  5517  0EFF  2F05               	goto	i1l2162
  5518                           
  5519                           ;timer0.c: 49: pb0Pressed = 1;
  5520  0F00  1570               	bsf	_pb0Pressed/(0+8),_pb0Pressed& (0+7)	;volatile
  5521                           
  5522                           ;timer0.c: 50: pb0Released = 0;
  5523  0F01  11F0               	bcf	_pb0Released/(0+8),_pb0Released& (0+7)	;volatile
  5524                           
  5525                           ;timer0.c: 51: }
  5526                           ;timer0.c: 52: }
  5527  0F02  2F05               	goto	i1l2162
  5528  0F03                     i1l2158:	
  5529                           
  5530                           ;timer0.c: 53: else{
  5531                           ;timer0.c: 55: pbCounter = 0;
  5532  0F03  01F8               	clrf	_pbCounter	;volatile
  5533                           
  5534                           ;timer0.c: 56: pb0Released = 1;
  5535  0F04  15F0               	bsf	_pb0Released/(0+8),_pb0Released& (0+7)	;volatile
  5536  0F05                     i1l2162:	
  5537                           
  5538                           ;timer0.c: 57: }
  5539                           ;timer0.c: 59: if(!RB1) {
  5540  0F05  1886               	btfsc	6,1	;volatile
  5541  0F06  2F13               	goto	i1l2172
  5542                           
  5543                           ;timer0.c: 60: pbCounter2++;
  5544  0F07  3001               	movlw	1
  5545  0F08  00F2               	movwf	??_debounceButtons
  5546  0F09  0872               	movf	??_debounceButtons,w
  5547  0F0A  07F9               	addwf	_pbCounter2,f	;volatile
  5548                           
  5549                           ;timer0.c: 61: if(pbCounter2 >10 &&pb1Released){
  5550  0F0B  300B               	movlw	11
  5551  0F0C  0279               	subwf	_pbCounter2,w	;volatile
  5552  0F0D  1803               	btfsc	3,0
  5553  0F0E  1EF0               	btfss	_pb1Released/(0+8),_pb1Released& (0+7)	;volatile
  5554  0F0F  2F15               	goto	i1l2176
  5555                           
  5556                           ;timer0.c: 62: pb1Pressed = 1;
  5557  0F10  1670               	bsf	_pb1Pressed/(0+8),_pb1Pressed& (0+7)	;volatile
  5558                           
  5559                           ;timer0.c: 63: pb1Released = 0;
  5560  0F11  12F0               	bcf	_pb1Released/(0+8),_pb1Released& (0+7)	;volatile
  5561                           
  5562                           ;timer0.c: 64: }
  5563                           ;timer0.c: 65: }
  5564  0F12  2F15               	goto	i1l2176
  5565  0F13                     i1l2172:	
  5566                           
  5567                           ;timer0.c: 66: else{
  5568                           ;timer0.c: 67: pbCounter2 = 0;
  5569  0F13  01F9               	clrf	_pbCounter2	;volatile
  5570                           
  5571                           ;timer0.c: 68: pb1Released = 1;
  5572  0F14  16F0               	bsf	_pb1Released/(0+8),_pb1Released& (0+7)	;volatile
  5573  0F15                     i1l2176:	
  5574                           
  5575                           ;timer0.c: 69: }
  5576                           ;timer0.c: 70: if(!RB2) {
  5577  0F15  1906               	btfsc	6,2	;volatile
  5578  0F16  2F25               	goto	i1l2186
  5579                           
  5580                           ;timer0.c: 71: pbCounter3++;
  5581  0F17  3001               	movlw	1
  5582  0F18  00F2               	movwf	??_debounceButtons
  5583  0F19  0872               	movf	??_debounceButtons,w
  5584  0F1A  1683               	bsf	3,5	;RP0=1, select bank1
  5585  0F1B  1303               	bcf	3,6	;RP1=0, select bank1
  5586  0F1C  07D8               	addwf	_pbCounter3^(0+128),f	;volatile
  5587                           
  5588                           ;timer0.c: 72: if(pbCounter3 >10 &&pb2Released){
  5589  0F1D  300B               	movlw	11
  5590  0F1E  0258               	subwf	_pbCounter3^(0+128),w	;volatile
  5591  0F1F  1803               	btfsc	3,0
  5592  0F20  1FF0               	btfss	_pb2Released/(0+8),_pb2Released& (0+7)	;volatile
  5593  0F21  2F29               	goto	i1l2190
  5594                           
  5595                           ;timer0.c: 73: pb2Pressed = 1;
  5596  0F22  1770               	bsf	_pb2Pressed/(0+8),_pb2Pressed& (0+7)	;volatile
  5597                           
  5598                           ;timer0.c: 74: pb2Released = 0;
  5599  0F23  13F0               	bcf	_pb2Released/(0+8),_pb2Released& (0+7)	;volatile
  5600                           
  5601                           ;timer0.c: 75: }
  5602                           ;timer0.c: 76: }
  5603  0F24  2F29               	goto	i1l2190
  5604  0F25                     i1l2186:	
  5605                           
  5606                           ;timer0.c: 77: else{
  5607                           ;timer0.c: 78: pbCounter3 = 0;
  5608  0F25  1683               	bsf	3,5	;RP0=1, select bank1
  5609  0F26  1303               	bcf	3,6	;RP1=0, select bank1
  5610  0F27  01D8               	clrf	_pbCounter3^(0+128)	;volatile
  5611                           
  5612                           ;timer0.c: 79: pb2Released = 1;
  5613  0F28  17F0               	bsf	_pb2Released/(0+8),_pb2Released& (0+7)	;volatile
  5614  0F29                     i1l2190:	
  5615                           
  5616                           ;timer0.c: 80: }
  5617                           ;timer0.c: 81: if(!RB3) {
  5618  0F29  1283               	bcf	3,5	;RP0=0, select bank0
  5619  0F2A  1303               	bcf	3,6	;RP1=0, select bank0
  5620  0F2B  1986               	btfsc	6,3	;volatile
  5621  0F2C  2F3C               	goto	i1l2200
  5622                           
  5623                           ;timer0.c: 82: pbCounter4++;
  5624  0F2D  3001               	movlw	1
  5625  0F2E  00F2               	movwf	??_debounceButtons
  5626  0F2F  0872               	movf	??_debounceButtons,w
  5627  0F30  1683               	bsf	3,5	;RP0=1, select bank1
  5628  0F31  1303               	bcf	3,6	;RP1=0, select bank1
  5629  0F32  07D9               	addwf	_pbCounter4^(0+128),f	;volatile
  5630                           
  5631                           ;timer0.c: 83: if(pbCounter4 >10 &&pb3Released){
  5632  0F33  300B               	movlw	11
  5633  0F34  0259               	subwf	_pbCounter4^(0+128),w	;volatile
  5634  0F35  1C03               	skipc
  5635  0F36  0008               	return
  5636  0F37  1CF1               	btfss	_pb3Released/(0+8),_pb3Released& (0+7)	;volatile
  5637  0F38  0008               	return
  5638                           
  5639                           ;timer0.c: 84: pb3Pressed = 1;
  5640  0F39  1471               	bsf	_pb3Pressed/(0+8),_pb3Pressed& (0+7)	;volatile
  5641                           
  5642                           ;timer0.c: 85: pb3Released = 0;
  5643  0F3A  10F1               	bcf	_pb3Released/(0+8),_pb3Released& (0+7)	;volatile
  5644                           
  5645                           ;timer0.c: 86: }
  5646                           ;timer0.c: 87: }
  5647  0F3B  0008               	return
  5648  0F3C                     i1l2200:	
  5649                           
  5650                           ;timer0.c: 88: else{
  5651                           ;timer0.c: 89: pbCounter4 = 0;
  5652  0F3C  1683               	bsf	3,5	;RP0=1, select bank1
  5653  0F3D  1303               	bcf	3,6	;RP1=0, select bank1
  5654  0F3E  01D9               	clrf	_pbCounter4^(0+128)	;volatile
  5655                           
  5656                           ;timer0.c: 90: pb3Released = 1;
  5657  0F3F  14F1               	bsf	_pb3Released/(0+8),_pb3Released& (0+7)	;volatile
  5658  0F40  0008               	return
  5659  0F41                     __end_of_debounceButtons:	
  5660  007E                     btemp	set	126	;btemp
  5661  007E                     wtemp	set	126
  5662  007E                     wtemp0	set	126
  5663  0080                     wtemp1	set	128
  5664  0082                     wtemp2	set	130
  5665  0084                     wtemp3	set	132
  5666  0086                     wtemp4	set	134
  5667  0088                     wtemp5	set	136
  5668  007F                     wtemp6	set	127
  5669  007E                     ttemp	set	126
  5670  007E                     ttemp0	set	126
  5671  0081                     ttemp1	set	129
  5672  0084                     ttemp2	set	132
  5673  0087                     ttemp3	set	135
  5674  007F                     ttemp4	set	127
  5675  007E                     ltemp	set	126
  5676  007E                     ltemp0	set	126
  5677  0082                     ltemp1	set	130
  5678  0086                     ltemp2	set	134
  5679  0080                     ltemp3	set	128


Data Sizes:
    Strings     25
    Constant    0
    Data        24
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     80      80
    BANK1            80     25      58
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> trunc@expon(BANK0[2]), 

    lcdWriteString@s	PTR unsigned char  size(1) Largest target is 7
		 -> STR_5(CODE[7]), STR_4(CODE[7]), STR_3(CODE[3]), STR_2(CODE[3]), 
		 -> STR_1(CODE[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_debounceButtons
    _isr->_lcdRefresh

Critical Paths under _main in BANK0

    _main->_moveDeg
    _readADCMeter->_round
    ___ftmul->___ftpack
    ___awtoft->___ftpack
    _moveDeg->_round
    _round->___ftadd
    _trunc->___fttol
    ___fttol->___ftdiv
    ___altoft->___ftpack
    ___ftneg->___altoft
    ___ftadd->_trunc
    _move->_lcdWriteToDigitBCD
    ___ftdiv->___ftneg
    _initialise->_initializeMotor
    _setupLCD->_lcdWriteControl
    _initializeMotor->_lcdWriteToDigitBCD
    _lcdWriteToDigitBCD->___wmul
    _lcdWriteString->_lcdWriteData
    _lcdSetCursor->_lcdWriteControl

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_readADCMeter

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   43175
                                             19 BANK1      6     6      0
                         _initialise
                       _lcdSetCursor
                     _lcdWriteString
                 _lcdWriteToDigitBCD
                               _move
                            _moveDeg
                        _readADCData
                       _readADCMeter
                 _startADCConversion
 ---------------------------------------------------------------------------------
 (1) _startADCConversion                                   2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _readADCMeter                                        21    19      2   20671
                                             77 BANK0      2     0      2
                                              0 BANK1     19    19      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                        _readADCData
                              _round
 ---------------------------------------------------------------------------------
 (2) _readADCData                                          4     2      2      34
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    2746
                                              8 BANK0     16    10      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    2326
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _moveDeg                                             14    11      3   15171
                                             77 BANK0      3     0      3
                                              0 BANK1     11    11      0
                            ___ftdiv
                             ___ftge
                            ___ftneg
                            ___fttol
                               _move
                              _round
 ---------------------------------------------------------------------------------
 (2) _round                                                6     3      3    8092
                                             71 BANK0      6     3      3
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftneg
                              _trunc
 ---------------------------------------------------------------------------------
 (3) _trunc                                                9     6      3    3663
                                             49 BANK0      9     6      3
                           ___altoft
                            ___ftneg (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                6     2      4     428
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             14    10      4     464
                                             35 BANK0     14    10      4
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (4) ___altoft                                             8     4      4    2397
                                              8 BANK0      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     240
                                             16 BANK0      3     0      3
                           ___altoft (ARG)
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3833
                                             58 BANK0     13     7      6
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                              _trunc (ARG)
 ---------------------------------------------------------------------------------
 (2) _move                                                 5     4      1    2722
                                             17 BANK0      5     4      1
                       _lcdSetCursor
                     _lcdWriteString
                 _lcdWriteToDigitBCD
 ---------------------------------------------------------------------------------
 (2) ___ftge                                              12     6      6     322
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2938
                                             19 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2128
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _initialise                                           0     0      0    2270
                      _initializeADC
                    _initializeMotor
                   _initializeTimer0
                           _setupLCD
 ---------------------------------------------------------------------------------
 (2) _setupLCD                                             0     0      0      31
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (2) _initializeTimer0                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initializeMotor                                      1     1      0    2239
                                             17 BANK0      1     1      0
                       _lcdSetCursor
                     _lcdWriteString
                 _lcdWriteToDigitBCD
 ---------------------------------------------------------------------------------
 (3) _lcdWriteToDigitBCD                                  11     7      4    1928
                                              6 BANK0     11     7      4
                             ___wmul
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     266
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _lcdWriteString                                       2     2      0     246
                                              3 BANK0      2     2      0
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (4) _lcdWriteData                                         3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _lcdSetCursor                                         1     1      0      65
                                              3 BANK0      1     1      0
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (4) _lcdWriteControl                                      3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _initializeADC                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                  4     4      0       0
                                              1 COMMON     4     4      0
                    _debounceButtons
                           _flashLed
                         _lcdRefresh
 ---------------------------------------------------------------------------------
 (7) _lcdRefresh                                           1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _flashLed                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _debounceButtons                                      1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialise
     _initializeADC
     _initializeMotor
       _lcdSetCursor
         _lcdWriteControl
       _lcdWriteString
         _lcdWriteData
       _lcdWriteToDigitBCD
         ___wmul
         _lcdWriteData
     _initializeTimer0
     _setupLCD
       _lcdWriteControl
   _lcdSetCursor
     _lcdWriteControl
   _lcdWriteString
     _lcdWriteData
   _lcdWriteToDigitBCD
     ___wmul
     _lcdWriteData
   _move
     _lcdSetCursor
       _lcdWriteControl
     _lcdWriteString
       _lcdWriteData
     _lcdWriteToDigitBCD
       ___wmul
       _lcdWriteData
   _moveDeg
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftneg
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _move
       _lcdSetCursor
         _lcdWriteControl
       _lcdWriteString
         _lcdWriteData
       _lcdWriteToDigitBCD
         ___wmul
         _lcdWriteData
     _round
       ___ftadd
         ___ftmul (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _trunc (ARG)
           ___altoft
             ___ftpack
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       _trunc (ARG)
         ___altoft
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _frexp (ARG)
   _readADCData
   _readADCMeter
     ___awtoft
       ___ftpack
     ___ftadd
       ___ftmul (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       _trunc (ARG)
         ___altoft
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _frexp (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _readADCData
     _round
       ___ftadd
         ___ftmul (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _trunc (ARG)
           ___altoft
             ___ftpack
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       _trunc (ARG)
         ___altoft
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _frexp (ARG)
   _startADCConversion

 _isr (ROOT)
   _debounceButtons
   _flashLed
   _lcdRefresh

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     19      3A       7       72.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     50      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       2       0       14.3%
CODE                 0      0       0       0        0.0%
DATA                 0      0      94      12        0.0%
ABS                  0      0      94       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Mon Apr 11 22:15:22 2016

                   ___altoft@exp 002E                                pc 0002                      __CFG_CP$OFF 0000  
                  ___altoft@sign 002F                               _GO 00FA              ?_startADCConversion 0072  
                             fsr 0004              ___wmul@multiplicand 0022                     ___ftadd@exp1 0066  
                   ___ftadd@exp2 0065                     ___ftadd@sign 0064                              l107 03F0  
                            l140 064E                              l424 0DB9                              l336 061E  
                            l616 00DD                              l592 0798                              l593 07A0  
                            l585 0783                              l676 0731                              _GIE 005F  
                            _RB0 0030                              _RB1 0031                              _RB2 0032  
                            _RB3 0033                              _RB4 0034                              _RB5 0035  
                            _RE0 0048                              _RE1 0049                              _RE2 004A  
                            _PS0 0408                              _PS1 0409                              _PS2 040A  
                   __CFG_CPD$OFF 0000                              _PSA 040B                              _isr 0DD0  
                            fsr0 0004                              indf 0000                     __CFG_FOSC$HS 0000  
                   ?_readADCData 0020                   ??_lcdWriteData 0020                     __CFG_LVP$OFF 0000  
                   ___ftdiv@cntr 003D                     ___ftdiv@sign 0042                             l2074 0F6A  
                           l1700 0709                             l2350 075C                             l2078 0F91  
                           l2502 005E                             l2414 07CF                             l1710 0734  
                           l1702 0719                             l2360 0788                             l2352 0768  
                           l2512 0074                             l2416 07E1                             l2362 0792  
                           l2354 076D                             l2346 0755                             l2530 00A3  
                           l2506 0065                             l1714 0742                             l2426 0E7B  
                           l2452 058F                             l2700 068E                             l2532 00AF  
                           l2524 008E                             l1708 0726                             l2446 0D90  
                           l2470 05DA                             l2462 05A6                             l2542 00CD  
                           l2534 00B4                             l2392 0DB1                             l2464 05BA  
                           l2552 0101                             l2544 00D9                             l2536 00B8  
                           l2800 0479                             l2466 05C6                             l2562 0124  
                           l1682 06D7                             l2492 0611                             l2484 05F7  
                           l2468 05CE                             l2708 062A                             l2548 00EF  
                           l2812 04A1                             l2478 05E9                             l2742 04FD  
                           l2582 0EC5                             l2726 0E01                             l2488 0604  
                           l2736 04E7                             l2808 0491                             l2920 03CD  
                           l2904 03AB                             l2682 0663                             l2690 0675  
                           l2914 03C1                             l2906 03B0                             l2764 0561  
                           l2756 0542                             l2668 063D                             l2932 03E9  
                           l2870 02CD                             l2926 03D9                             l2688 0674  
                           l2784 042A                             l2880 0331                             l2778 0414  
                           l2796 0469                             _ADIE 0466                             _ADIF 0066  
                           _ADFM 04FF                             ?_isr 0072             ??_startADCConversion 0020  
                           STR_1 0814                             STR_2 0819                             STR_3 081C  
                           STR_4 0806                             STR_5 080D                             _T0IF 005A  
                           _T0CS 040D                             u2211 0F5D                             _T0SE 040C  
                           u2212 0F5E                             u2213 0F63                             u2214 0F64  
                           u2231 0F84                             u2232 0F85                             u2233 0F8A  
                           u3105 00B9                             u2234 0F8B                             u3045 008F  
                           u1525 06DE                             u3135 00CE                             u3075 00A4  
                           u1555 070A                             u1585 0728                             u3355 050F  
                           u3435 0436                             u3365 0521                             u2805 07D4  
                           u3525 04A2                             u3445 0448                             u2735 07A7  
                           u2655 0761                             u3375 0543                             u3535 04AA  
                           u3385 0554                             u2675 077C                             u3395 0562  
                           u3475 047A                             _PEIE 005E                             u2765 0DBA  
                           u3485 0482                             u3637 03F6                             u2775 0DC1  
                           u2695 078B                             u3647 0CCE                             u3657 06B1  
                           u3667 0D13                             u3677 0D26                             i1l93 0DEA  
                           _TMR0 0001                     __CFG_WRT$OFF 0000                             _main 0327  
                   ___ftpack@arg 0020                     ___ftpack@exp 0023                             _move 0626  
                           btemp 007E                             ltemp 007E                             start 0012  
                           ttemp 007E                             wtemp 007E                     ___ftmul@cntr 0036  
                   ___ftmul@sign 0037                    ?_readADCMeter 006D                     ___fttol@exp1 0050  
                   ___fttol@lval 004C                            ??_isr 0073                            _ADCS2 04FE  
                          ?_main 0072                  __end_of___ftadd 013E                            ?_move 0031  
                  __CFG_WDTE$OFF 0000                  __end_of___ftdiv 0587                  __end_of___ftneg 0CBB  
                __end_of___ftmul 04CF                  __end_of___fttol 074B                            _PCFG0 04F8  
                          _PCFG1 04F9                            _PCFG2 04FA                            _PCFG3 04FB  
                          _PORTC 0007                            _PORTD 0008                            _PORTE 0009  
                          _TRISA 0085                            _TRISB 0086                            _TRISC 0087  
                          _TRISD 0088                            _TRISE 0089                ??_initializeMotor 0031  
                  ___awtoft@sign 002D       __end_of_lcdWriteToDigitBCD 0626                            _cstep 0077  
                          _frexp 0E6D                            _errno 00D1                ??_debounceButtons 0072  
                  ___ftpack@sign 0024                            _round 0FA0                            _trunc 0EA9  
                __end_of_moveDeg 0327                   __pbitbssCOMMON 0380                   __CFG_BOREN$OFF 0000  
                          pclath 000A                            ltemp0 007E                            ltemp1 0082  
                          ltemp2 0086                            ltemp3 0080                            move@i 0035  
             main@resultInMeters 00B7                            ttemp0 007E                            ttemp1 0081  
                          ttemp2 0084                            ttemp3 0087                            ttemp4 007F  
                          status 0003                            wtemp0 007E                            wtemp1 0080  
                          wtemp2 0082                            wtemp3 0084                            wtemp4 0086  
                          wtemp5 0088                            wtemp6 007F                   ??_readADCMeter 006F  
                __initialization 0015                     __end_of_main 03FC                     __end_of_move 06BD  
       __size_of_lcdWriteControl 0014                           ??_main 00B3                    ___fttol@sign1 004B  
                         ??_move 0032             __end_of_lcdSetCursor 0CB1                 ??_lcdWriteString 0023  
                         _ADCON0 001F                           ?_frexp 0020                 __end_of___altoft 07FB  
                         _ADRESH 001E                           _ADRESL 009E                 __end_of___awtoft 0E1A  
               __end_of___ftpack 07B9                           ?_round 0067                   _conversionDone 0380  
                         ?_trunc 0051                           i1l2200 0F3C                           i1l2162 0F05  
                         i1l2172 0F13                           i1l2190 0F29                           i1l2158 0F03  
                         i1l2176 0F15                           i1l2186 0F25                           i1l2276 0DE4  
                         _TMR0IE 005D                ?_initializeTimer0 0072               ??_initializeTimer0 0020  
                 __CFG_PWRTE$OFF 0000                 __end_of_flashLed 0D59                           ___ftge 0F41  
                         ___wmul 0DAD             __end_of_lcdWriteData 0D18                        ??___ftadd 0060  
                lcdWriteString@s 0024                        ??___ftdiv 0039                        ??___ftneg 0033  
                      ??___ftmul 002E                        ??___fttol 0047            ___ftmul@f3_as_product 0033  
               __end_of_setupLCD 0E6D                        ??_moveDeg 00A0                           saved_w 007E  
         __size_of_initializeADC 0015                           round@f 006A                           round@x 0067  
                         trunc@i 0055                           trunc@x 0051             __size_of_readADCData 000F  
        __end_of__initialization 0031                       ___altoft@c 0028                       ___ftadd@f1 005A  
                     ___ftadd@f2 005D                       ___ftge@ff1 0020                       ___ftge@ff2 0023  
                     ___ftdiv@f1 0036                       ___ftdiv@f2 0033                       ___ftdiv@f3 003E  
                     ___ftneg@f1 0030                       ___awtoft@c 0028                       ___ftmul@f1 0028  
                     ___ftmul@f2 002B                       ___fttol@f1 0043                   __pcstackCOMMON 0072  
                   __pidataBANK1 0D59                       _pb0Pressed 0382                       _pb1Pressed 0384  
                  __end_of_frexp 0EA9                       _pb2Pressed 0386                    __end_of_round 1000  
                     _pb3Pressed 0388                    __end_of_trunc 0EF3                ??_lcdWriteControl 0020  
           __end_of_readADCMeter 0238                          ??_frexp 0024                          ??_round 006A  
                        ??_trunc 0054                       __pbssBANK1 00D1             readADCData@ADCResult 0022  
            lcdSetCursor@address 0023                    _initializeADC 0D2C                       __pmaintext 0327  
                        ?___ftge 0020                          ?___wmul 0020                  _initializeMotor 0E1A  
                     __pintentry 0004            __size_of_lcdSetCursor 0009                        ?___altoft 0028  
                     _lcdRefresh 0CBB                        ?___awtoft 0028                       _pbCounter2 0079  
                     _pbCounter3 00D8                       _pbCounter4 00D9                        ?___ftpack 0020  
                _debounceButtons 0EF3                        ?_flashLed 0072                       __stringtab 0800  
    __size_of_startADCConversion 000E                     _irLcdCounter 00D7            __size_of_lcdWriteData 0013  
                   _lcdSetCursor 0CA8                   ?_initializeADC 0072               _lcdWriteToDigitBCD 0587  
                  move@direction 0031                        ?_setupLCD 0072                  __size_of___ftge 005F  
                        ___ftadd 0035                          ___ftdiv 04CF                          ___ftneg 0CB1  
                __size_of___wmul 0023                          ___ftmul 03FC                          ___fttol 06BD  
                     ??___altoft 002C              ?_lcdWriteToDigitBCD 0026                       ??___awtoft 002B  
                     ??___ftpack 0025                       _initialise 0D71                          __ptext1 0CC8  
                        __ptext2 013E                          __ptext3 0CE5                          __ptext4 03FC  
                        __ptext5 0DF5                          __ptext6 0238                          __ptext7 0FA0  
                        __ptext8 0EA9                          __ptext9 0E6D                    readADCMeter@k 00A3  
                  readADCMeter@m 00A6                     __size_of_isr 0025                          _moveDeg 0238  
        readADCMeter@rawInverted 00A0                       ??_flashLed 0072                     _lcdWriteData 0D05  
           end_of_initialization 0031             ??_lcdWriteToDigitBCD 002A               moveDeg@stepsToMove 00AA  
        __end_of_initializeMotor 0E42                       _rtcCounter 00D5          __end_of_debounceButtons 0F41  
                     ??_setupLCD 0023                      ?_lcdRefresh 0072        __size_of_initializeTimer0 000F  
          __size_of_readADCMeter 00FA                       _wholeSteps 00C9       lcdWriteToDigitBCD@showSign 0029  
                    ___ftdiv@exp 0041                  ??_initializeADC 0020                       main@result 00B5  
        readADCMeter@resultInInt 00B1                      ___ftmul@exp 0032                      _pb0Released 0383  
                   _readADCMeter 013E                      _pb1Released 0385                   __end_of___ftge 0FA0  
                    _pb2Released 0387                  _lcdWriteControl 0D18                   __end_of___wmul 0DD0  
                    _pb3Released 0389                      ?_initialise 0072              start_initialization 0015  
                  ??_readADCData 0022                      __end_of_isr 0DF5                       frexp@value 0020  
        __size_of_lcdWriteString 0020              __size_of_lcdRefresh 000D                 ?_initializeMotor 0072  
               ?_debounceButtons 0072                         ??___ftge 0026                         ??___wmul 0024  
                     init_fetch0 0CF4               readADCMeter@result 00A9                 _readADCMeter$689 00AC  
                    __pdataBANK1 00B9                __size_of___altoft 0042                __size_of___awtoft 0025  
              __size_of___ftpack 006E                      __pbssCOMMON 0077                        ___latbits 0002  
                  __pcstackBANK0 0020                    __pcstackBANK1 00A0                __size_of_flashLed 0018  
            __end_of_readADCData 0CF4              __size_of_initialise 001C  lcdWriteToDigitBCD@ThousandDigit 002D  
        __end_of_lcdWriteControl 0D2C                        _halfSteps 00B9                       moveDeg@deg 006D  
                       ?___ftadd 005A                         ?___ftdiv 0033                         ?___ftneg 0030  
                      _pbCounter 0078                         ?___ftmul 0028                         ?___fttol 0043  
              __size_of_setupLCD 002B                 _initializeTimer0 0CD6                        __pstrings 0800  
                       ?_moveDeg 006D                        _nrOfSteps 00D3                  readADCMeter@raw 00AF  
     __end_of_startADCConversion 0CD6                   __size_of_frexp 003C                   __size_of_round 0060  
                 __size_of_trunc 004A          lcdWriteControl@databyte 0022                interrupt_function 0004  
                 ___wmul@product 0024                     ??_lcdRefresh 0072                      __stringbase 0805  
              ___wmul@multiplier 0020   lcdWriteToDigitBCD@HundredDigit 002C                      _readADCData 0CE5  
           lcdWriteData@databyte 0022      __size_of_lcdWriteToDigitBCD 009F                   _lcdWriteString 0D8D  
             __end_of_lcdRefresh 0CC8                        frexp@eptr 0023                 ?_lcdWriteControl 0072  
               __size_of___ftadd 0109                 __size_of___ftdiv 00B8                 __size_of___ftneg 000A  
                       ___altoft 07B9                 __size_of___ftmul 00D3                 __size_of___fttol 008E  
                   ??_initialise 0032                         ___awtoft 0DF5                         ___ftpack 074B  
             __end_of__stringtab 0806                 __size_of_moveDeg 00EF                         __ptext10 06BD  
                       __ptext11 07B9                         __ptext20 0CD6                         __ptext12 0CB1  
                       __ptext21 0E1A                         __ptext13 0035                         __ptext30 0CBB  
                       __ptext22 0587                         __ptext14 0626                         __ptext31 0D41  
                       __ptext23 0DAD                         __ptext15 0F41                         __ptext32 0EF3  
                       __ptext24 0D8D                         __ptext16 04CF                         __ptext25 0D05  
                       __ptext17 074B                         __ptext26 0CA8                         __ptext18 0D71  
                       __ptext27 0D18                         __ptext19 0E42                         __ptext28 0D2C  
                       __ptext29 0DD0                         _flashLed 0D41           __end_of_lcdWriteString 0DAD  
                      move@steps 0034                       trunc@expon 0058                    __size_of_main 00D5  
                  __size_of_move 0097               __end_of_initialise 0D8D            __end_of_initializeADC 0D41  
                       _setupLCD 0E42      lcdWriteToDigitBCD@OnesDigit 002F                      _moveDeg$686 00A1  
                    _moveDeg$687 00A4                      _moveDeg$688 00A7      lcdWriteToDigitBCD@TensDigit 002B  
                       init_ram0 0CF8                  ?_lcdWriteString 0072                  _updateLcdIRData 038A  
                       intlevel1 0000         __end_of_initializeTimer0 0CE5                    ?_lcdSetCursor 0072  
       lcdWriteToDigitBCD@digits 0028                        stringcode 0800         __size_of_initializeMotor 0028  
                    _motorToggle 0381         __size_of_debounceButtons 004E                         stringdir 0800  
                       stringtab 0800                    ?_lcdWriteData 0072           lcdWriteToDigitBCD@data 0026  
         lcdWriteToDigitBCD@sign 002E                   ??_lcdSetCursor 0023               _startADCConversion 0CC8  
